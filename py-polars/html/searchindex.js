Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.cleared", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pearson_corr", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_column", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/pivot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.cast_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.tz_localize", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.with_time_zone", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.argsort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cleared", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan", "reference/lazyframe/api/polars.LazyFrame.describe_plan", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_column", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.cast_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.tz_localize", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.with_time_zone", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.cleared.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pearson_corr.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_column.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/pivot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.cast_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.tz_localize.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.with_time_zone.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.argsort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cleared.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/lazyframe/api/polars.LazyFrame.describe_plan.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_column.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.cast_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.tz_localize.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.with_time_zone.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_delta", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pearson_corr", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Pivot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.cast_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.tz_localize", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.with_time_zone", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.cast_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.tz_localize", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.with_time_zone", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 86, 101, 114, 117, 207, 209, 236, 239, 249, 525, 598], "refer": [0, 88, 89, 91, 204, 236, 397, 453, 525, 767, 828, 864], "input": [0, 54, 88, 89, 91, 374, 382, 433, 476, 494, 501, 502, 505, 525, 534, 749, 808, 864], "output": [0, 24, 26, 27, 64, 91, 108, 117, 139, 140, 162, 165, 200, 236, 245, 249, 376, 377, 381, 471, 476, 501, 512, 525, 534, 555, 556, 565, 596, 598, 604, 613, 853, 864], "seri": [0, 1, 19, 45, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 81, 86, 107, 108, 110, 114, 117, 123, 131, 133, 135, 136, 141, 144, 145, 147, 149, 154, 155, 158, 170, 171, 177, 185, 189, 194, 195, 204, 205, 208, 236, 248, 249, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 263, 265, 269, 270, 277, 278, 281, 282, 286, 287, 291, 292, 304, 305, 307, 310, 313, 315, 317, 320, 324, 326, 329, 330, 333, 334, 342, 343, 348, 349, 353, 355, 357, 358, 359, 360, 361, 363, 364, 365, 375, 376, 393, 397, 398, 399, 400, 401, 403, 416, 419, 422, 423, 430, 447, 453, 457, 462, 463, 464, 465, 470, 476, 477, 479, 480, 481, 482, 483, 484, 486, 487, 488, 494, 495, 498, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 514, 515, 516, 517, 525, 534, 551, 578, 592, 593, 604, 857, 860, 863, 867, 868, 869], "datafram": [0, 1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 43, 45, 54, 55, 56, 57, 58, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 103, 104, 106, 108, 109, 234, 235, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 481, 482, 483, 484, 485, 488, 491, 492, 493, 494, 496, 498, 502, 503, 504, 505, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 525, 534, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 604, 612, 632, 648, 652, 667, 811, 813, 824, 825, 835, 844, 845, 853, 864], "lazyfram": [0, 1, 42, 44, 54, 55, 56, 57, 58, 61, 62, 99, 100, 101, 102, 103, 104, 106, 110, 152, 164, 236, 282, 346, 525, 534, 603, 870], "express": [0, 59, 61, 64, 108, 110, 111, 117, 129, 131, 138, 160, 165, 173, 183, 205, 207, 209, 236, 245, 246, 248, 249, 266, 282, 288, 289, 290, 293, 299, 301, 321, 340, 346, 353, 355, 359, 362, 367, 370, 375, 376, 377, 381, 382, 393, 394, 395, 400, 414, 415, 416, 418, 425, 438, 453, 459, 462, 468, 470, 473, 477, 480, 481, 485, 486, 487, 488, 492, 493, 494, 495, 496, 500, 501, 502, 505, 507, 509, 510, 511, 512, 514, 515, 518, 524, 534, 540, 548, 551, 572, 580, 581, 583, 592, 593, 594, 597, 598, 604, 632, 656, 657, 658, 666, 694, 785, 792, 813, 864], "extend": [0, 236, 343, 525, 534, 612, 717, 864], "function": [0, 55, 56, 57, 58, 59, 63, 88, 89, 91, 99, 109, 117, 126, 133, 157, 163, 164, 165, 196, 199, 209, 219, 236, 246, 249, 282, 299, 324, 337, 338, 339, 376, 377, 391, 403, 404, 405, 406, 407, 408, 410, 411, 412, 424, 466, 474, 476, 486, 487, 494, 495, 501, 509, 525, 534, 565, 569, 571, 598, 604, 613, 648, 666, 697, 711, 712, 713, 714, 773, 787, 788, 794, 799, 864], "data": [0, 1, 12, 15, 29, 45, 54, 55, 57, 62, 68, 69, 74, 75, 77, 78, 79, 80, 81, 82, 88, 89, 91, 92, 93, 96, 97, 98, 99, 106, 107, 109, 110, 111, 118, 119, 128, 137, 139, 150, 152, 164, 168, 174, 175, 181, 188, 192, 193, 234, 236, 285, 304, 325, 333, 354, 361, 363, 397, 413, 414, 424, 466, 468, 480, 512, 525, 534, 538, 539, 548, 555, 571, 597, 604, 612, 650, 655, 659, 671, 673, 706, 709, 767, 783, 784, 794, 799, 846, 847, 849, 851, 855, 863, 864], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 64, 68, 77, 79, 82, 86, 88, 89, 90, 91, 93, 97, 99, 100, 105, 106, 107, 110, 113, 114, 117, 127, 133, 137, 139, 140, 141, 188, 192, 193, 195, 197, 198, 236, 249, 270, 282, 285, 286, 288, 289, 290, 305, 307, 310, 313, 315, 317, 320, 326, 334, 340, 351, 355, 357, 359, 360, 400, 448, 449, 450, 453, 466, 476, 481, 489, 490, 491, 493, 494, 500, 501, 525, 534, 540, 546, 548, 555, 556, 572, 581, 588, 589, 604, 636, 648, 650, 652, 656, 657, 658, 674, 676, 679, 685, 687, 690, 693, 699, 707, 709, 725, 727, 794, 823, 824, 825, 828, 846, 847, 849, 856, 864], "config": [0, 205, 236, 534, 593, 604], "except": [0, 151, 236, 534, 561, 604, 847, 855, 864], "test": [0, 91, 534, 557, 564, 604], "util": [0, 534, 548, 604], "sql": [0, 42, 98, 150, 236, 534], "These": [1, 524], "allow": [1, 45, 68, 99, 101, 102, 103, 104, 110, 111, 151, 152, 175, 236, 321, 399, 414, 453, 525, 560, 561, 565, 594, 604, 694, 769, 784, 786, 828, 864], "you": [1, 28, 54, 78, 86, 88, 89, 91, 96, 99, 114, 117, 124, 128, 151, 160, 192, 196, 209, 219, 236, 249, 266, 288, 289, 290, 340, 346, 376, 399, 404, 405, 406, 407, 408, 410, 411, 412, 439, 442, 477, 486, 495, 525, 540, 545, 557, 561, 564, 581, 598, 604, 612, 632, 656, 657, 658, 769, 814, 817, 847, 855, 864], "regist": [1, 55, 56, 57, 58], "custom": [1, 55, 56, 57, 58, 117, 209, 236, 249, 282, 376, 403, 476, 501, 525, 565, 598, 604, 613, 648, 773, 864], "dedic": 1, "namespac": [1, 235, 239, 524, 534, 603], "underli": [1, 65, 72, 96, 110, 111, 128, 188, 236, 304, 305, 306, 309, 311, 312, 314, 316, 318, 319, 322, 323, 325, 331, 332, 333, 335, 399, 413, 525, 612, 673, 674, 675, 678, 680, 684, 686, 689, 691, 692, 695, 696, 698, 704, 705, 706, 708, 769, 783, 794, 842, 843, 847, 864], "polar": [1, 236, 524, 525, 534, 604, 864, 870, 871], "class": [1, 2, 3, 4, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 81, 108, 109, 192, 193, 236, 525, 534, 604, 846, 847, 864, 870], "without": [1, 63, 90, 93, 97, 100, 101, 199, 236, 299, 324, 404, 405, 406, 407, 408, 410, 411, 412, 511, 525, 666, 671, 697, 864], "requir": [1, 28, 81, 106, 107, 162, 163, 193, 197, 205, 236, 337, 338, 339, 419, 453, 468, 525, 588, 593, 604, 712, 713, 714, 793, 828, 847, 851, 864], "subclass": [1, 236], "mixin": 1, "expr": [1, 54, 55, 56, 57, 58, 59, 62, 64, 124, 127, 129, 131, 138, 139, 140, 150, 160, 165, 173, 177, 183, 204, 205, 207, 236, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 529, 530, 531, 545, 547, 549, 551, 554, 555, 556, 560, 573, 578, 580, 583, 592, 593, 597, 604, 632, 666, 718, 792, 838, 864], "ar": [1, 14, 28, 45, 64, 70, 76, 77, 79, 81, 82, 88, 89, 90, 91, 96, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 113, 117, 124, 126, 129, 133, 139, 140, 151, 152, 157, 163, 173, 189, 193, 200, 236, 246, 282, 297, 298, 302, 303, 324, 329, 336, 357, 359, 360, 361, 363, 364, 365, 368, 397, 400, 401, 403, 409, 424, 426, 427, 439, 442, 460, 477, 478, 483, 512, 519, 521, 524, 525, 526, 529, 530, 531, 534, 545, 549, 555, 556, 557, 561, 564, 565, 569, 572, 594, 604, 610, 612, 648, 664, 665, 697, 702, 710, 711, 721, 724, 733, 736, 737, 738, 739, 740, 741, 745, 767, 771, 773, 779, 799, 814, 817, 836, 847, 855, 857, 860, 864, 867, 868, 869], "all": [1, 6, 11, 14, 19, 22, 29, 61, 62, 64, 77, 79, 81, 82, 83, 88, 89, 91, 92, 96, 99, 102, 103, 108, 109, 111, 124, 130, 147, 149, 152, 157, 159, 160, 168, 182, 191, 200, 236, 247, 248, 266, 270, 280, 282, 284, 293, 299, 340, 350, 351, 354, 357, 360, 364, 365, 367, 370, 372, 376, 377, 386, 390, 394, 397, 402, 419, 425, 432, 437, 438, 443, 444, 459, 471, 481, 493, 514, 525, 534, 540, 543, 545, 548, 550, 565, 569, 572, 581, 582, 594, 604, 632, 636, 646, 666, 731, 743, 767, 800, 807, 812, 813, 818, 819, 864], "support": [1, 28, 62, 77, 90, 91, 98, 100, 108, 111, 182, 205, 236, 278, 425, 447, 525, 582, 593, 604, 644, 800, 822, 864], "target": [1, 60, 436, 453, 811, 828], "thi": [1, 6, 22, 24, 26, 28, 44, 45, 54, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 117, 124, 126, 128, 133, 138, 139, 140, 141, 145, 147, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 163, 166, 167, 168, 175, 177, 180, 182, 184, 185, 188, 190, 192, 193, 196, 197, 199, 200, 201, 202, 206, 207, 209, 235, 236, 239, 246, 248, 249, 258, 260, 266, 270, 282, 286, 293, 299, 304, 305, 311, 321, 324, 330, 333, 340, 342, 343, 348, 353, 354, 355, 359, 370, 375, 376, 381, 382, 388, 389, 391, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 416, 418, 419, 420, 425, 426, 427, 440, 445, 453, 456, 457, 467, 468, 469, 470, 471, 474, 477, 482, 484, 486, 488, 493, 494, 495, 511, 515, 525, 534, 535, 537, 540, 545, 548, 554, 555, 556, 558, 561, 565, 569, 572, 578, 580, 581, 582, 588, 594, 595, 596, 598, 603, 604, 612, 613, 622, 625, 632, 636, 652, 666, 671, 673, 674, 680, 694, 697, 703, 706, 709, 711, 716, 717, 723, 724, 729, 730, 735, 736, 742, 744, 746, 750, 751, 752, 753, 755, 756, 757, 758, 759, 761, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 777, 780, 781, 782, 784, 787, 788, 789, 790, 792, 793, 794, 795, 800, 801, 803, 815, 820, 828, 831, 832, 835, 836, 843, 845, 846, 847, 848, 850, 851, 854, 855, 864], "featur": [1, 28, 45, 60, 236], "i": [1, 11, 24, 26, 27, 45, 54, 60, 61, 62, 63, 64, 67, 68, 70, 71, 77, 80, 81, 82, 84, 85, 88, 89, 90, 92, 96, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 117, 124, 126, 134, 137, 138, 139, 140, 141, 145, 146, 148, 151, 152, 155, 157, 160, 162, 164, 165, 173, 175, 182, 185, 188, 190, 196, 197, 199, 200, 205, 207, 209, 219, 235, 236, 239, 246, 247, 248, 249, 266, 268, 278, 282, 299, 321, 324, 329, 337, 338, 339, 342, 348, 351, 353, 355, 368, 376, 382, 391, 397, 399, 401, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 420, 424, 425, 426, 427, 432, 436, 437, 438, 440, 445, 447, 450, 453, 456, 471, 477, 478, 482, 484, 486, 487, 488, 495, 500, 511, 515, 525, 540, 545, 548, 554, 555, 556, 559, 561, 563, 565, 569, 572, 581, 582, 588, 593, 596, 598, 604, 611, 612, 613, 632, 634, 644, 666, 694, 697, 702, 711, 712, 713, 714, 716, 724, 725, 728, 729, 730, 732, 742, 744, 745, 767, 769, 771, 784, 785, 786, 787, 788, 789, 799, 800, 803, 807, 811, 812, 813, 815, 820, 822, 825, 831, 843, 847, 853, 854, 855, 864], "primarili": 1, "intend": 1, "us": [1, 8, 9, 11, 14, 19, 20, 24, 28, 45, 54, 64, 78, 80, 82, 84, 86, 88, 89, 90, 91, 92, 96, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 114, 117, 129, 130, 133, 139, 140, 151, 155, 157, 159, 160, 164, 165, 173, 175, 183, 185, 196, 197, 200, 207, 209, 219, 236, 244, 249, 266, 282, 286, 299, 302, 303, 333, 336, 337, 338, 339, 340, 345, 346, 354, 368, 376, 380, 397, 399, 401, 404, 405, 406, 407, 408, 410, 411, 412, 414, 416, 419, 420, 424, 426, 427, 433, 434, 435, 439, 440, 445, 447, 449, 451, 453, 476, 477, 478, 481, 483, 486, 488, 495, 500, 502, 505, 510, 515, 524, 525, 540, 549, 550, 554, 555, 556, 557, 561, 563, 564, 569, 583, 588, 592, 598, 604, 613, 632, 648, 652, 666, 706, 710, 712, 713, 714, 718, 719, 724, 745, 767, 769, 771, 784, 787, 788, 789, 793, 799, 803, 808, 809, 814, 815, 820, 822, 824, 828, 838, 846, 847, 854, 855, 864], "librari": [1, 65, 72, 376, 525, 871], "author": 1, "domain": 1, "specif": [1, 22, 90, 98, 100, 110, 403, 453, 514, 525, 773, 828, 864], "capabl": 1, "which": [1, 14, 23, 24, 25, 26, 27, 28, 54, 55, 56, 57, 58, 88, 89, 90, 91, 98, 99, 100, 124, 128, 183, 197, 236, 246, 282, 357, 360, 361, 363, 364, 365, 382, 525, 545, 588, 596, 604, 612, 733, 737, 738, 739, 740, 741, 787, 864], "mai": [1, 28, 62, 63, 77, 88, 90, 92, 100, 101, 102, 117, 126, 128, 151, 179, 180, 199, 236, 277, 282, 299, 304, 311, 324, 340, 343, 404, 405, 406, 407, 408, 410, 411, 412, 417, 418, 453, 486, 487, 495, 509, 525, 561, 565, 579, 580, 595, 598, 604, 612, 643, 666, 673, 680, 697, 711, 717, 791, 792, 828, 864], "exist": [1, 90, 100, 110, 604], "belong": [1, 139, 236, 555, 604], "core": [1, 81, 193, 236], "cannot": [1, 88, 89, 117, 175, 209, 236, 249, 414, 449, 525, 581, 598, 604, 784, 824, 864], "overrid": [1, 78, 108, 109, 111, 236], "str": [1, 5, 7, 10, 11, 14, 15, 22, 23, 24, 25, 26, 27, 28, 31, 42, 43, 44, 45, 46, 54, 55, 56, 57, 58, 60, 63, 64, 78, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 150, 151, 153, 154, 155, 156, 157, 158, 160, 162, 163, 165, 167, 169, 170, 171, 172, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 189, 190, 191, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 236, 244, 245, 249, 263, 264, 268, 269, 270, 278, 281, 282, 301, 305, 321, 324, 327, 329, 330, 334, 340, 343, 344, 346, 348, 353, 359, 362, 377, 381, 383, 391, 394, 400, 402, 404, 405, 406, 407, 408, 410, 411, 412, 418, 419, 426, 427, 457, 458, 459, 462, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 525, 529, 540, 541, 542, 543, 544, 545, 547, 548, 551, 553, 554, 555, 556, 558, 560, 561, 565, 569, 572, 574, 575, 576, 577, 578, 580, 581, 582, 583, 588, 589, 593, 594, 595, 596, 598, 599, 600, 604, 609, 630, 636, 648, 650, 667, 674, 694, 697, 700, 702, 703, 707, 717, 719, 721, 750, 753, 757, 758, 759, 770, 787, 788, 832, 834, 845, 864, 867], "dt": [1, 54, 140, 236, 531, 556, 604, 869], "attempt": [1, 192, 236, 847, 864], "do": [1, 54, 61, 99, 128, 151, 188, 196, 199, 219, 236, 266, 299, 474, 525, 540, 561, 565, 572, 581, 604, 612, 632, 666, 847, 855, 864], "so": [1, 45, 99, 100, 137, 139, 140, 165, 236, 268, 478, 555, 556, 604, 634], "rais": [1, 10, 14, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 106, 107, 173, 236, 381, 393, 453, 500, 525, 828, 847, 855, 864], "an": [1, 55, 57, 58, 61, 64, 65, 68, 69, 72, 77, 88, 89, 91, 96, 98, 99, 102, 109, 110, 111, 117, 118, 119, 126, 129, 131, 133, 139, 140, 151, 160, 162, 165, 171, 173, 188, 192, 199, 209, 219, 236, 245, 246, 249, 266, 268, 282, 285, 288, 289, 290, 294, 295, 296, 297, 298, 299, 333, 346, 367, 376, 377, 382, 395, 403, 404, 405, 406, 407, 408, 410, 411, 412, 433, 437, 446, 452, 453, 462, 477, 481, 492, 500, 509, 511, 525, 534, 538, 539, 540, 548, 551, 555, 556, 561, 565, 572, 581, 583, 594, 598, 604, 632, 634, 650, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 706, 711, 773, 774, 775, 776, 777, 778, 780, 781, 782, 787, 788, 808, 812, 816, 821, 827, 828, 847, 855, 864], "attributeerror": 1, "howev": [1, 126, 236, 711, 864], "can": [1, 54, 64, 69, 88, 89, 91, 92, 99, 101, 102, 109, 110, 111, 117, 125, 133, 138, 139, 160, 165, 183, 196, 199, 207, 209, 236, 249, 266, 282, 299, 321, 340, 354, 386, 399, 404, 405, 406, 407, 408, 410, 411, 412, 416, 419, 424, 438, 471, 474, 477, 481, 488, 493, 502, 515, 524, 525, 540, 555, 583, 595, 598, 604, 613, 632, 648, 666, 694, 754, 769, 787, 788, 789, 793, 799, 813, 864], "other": [1, 14, 64, 88, 89, 91, 99, 106, 107, 124, 128, 134, 150, 151, 157, 173, 234, 236, 248, 263, 288, 289, 290, 301, 359, 427, 466, 525, 534, 545, 560, 561, 569, 594, 604, 612, 629, 656, 657, 658, 669, 736, 786, 849, 856, 863, 864], "onli": [1, 14, 22, 45, 54, 60, 62, 88, 89, 91, 92, 96, 99, 102, 103, 104, 110, 111, 117, 124, 138, 151, 155, 183, 185, 236, 244, 287, 288, 289, 290, 321, 349, 399, 469, 510, 514, 525, 540, 545, 557, 561, 564, 583, 604, 653, 656, 657, 658, 694, 722, 769, 843, 864], "gener": [1, 98, 108, 109, 110, 111, 175, 196, 236, 282, 414, 420, 525, 648, 784, 795, 864], "userwarn": 1, "pl": [1, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 236, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 525, 535, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 631, 632, 635, 636, 638, 643, 644, 647, 648, 650, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 722, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 750, 751, 752, 753, 754, 755, 756, 762, 763, 764, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 795, 796, 797, 798, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 824, 825, 826, 828, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 864], "register_expr_namespac": [1, 55, 57, 58], "greet": 1, "def": [1, 55, 56, 57, 58, 109, 110, 111, 164, 196, 236, 571, 604], "__init__": [1, 2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 108], "self": [1, 55, 56, 57, 58, 61, 391, 525, 540, 548, 572, 581, 604, 612, 787, 788, 856, 864], "_expr": [1, 56], "hello": [1, 348, 474, 525, 636], "return": [1, 22, 24, 26, 27, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 70, 73, 76, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 114, 117, 118, 122, 124, 125, 126, 127, 129, 130, 133, 142, 144, 150, 152, 153, 159, 160, 162, 163, 164, 165, 173, 175, 186, 187, 193, 196, 197, 204, 207, 209, 212, 216, 222, 236, 246, 247, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 264, 268, 269, 270, 281, 291, 292, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 335, 342, 348, 352, 355, 357, 358, 359, 360, 361, 363, 364, 365, 371, 375, 382, 386, 400, 401, 414, 422, 423, 430, 432, 434, 436, 437, 438, 439, 440, 442, 445, 447, 448, 449, 450, 456, 461, 462, 463, 464, 465, 467, 469, 470, 471, 476, 477, 481, 489, 490, 491, 498, 500, 501, 511, 516, 518, 525, 540, 546, 548, 557, 563, 564, 565, 571, 572, 581, 587, 588, 596, 599, 600, 604, 609, 610, 611, 613, 620, 621, 623, 624, 627, 628, 630, 634, 635, 636, 647, 667, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 708, 711, 716, 721, 724, 726, 727, 731, 733, 734, 736, 737, 738, 739, 740, 741, 743, 747, 754, 771, 772, 784, 786, 788, 805, 806, 807, 809, 811, 812, 813, 814, 815, 817, 820, 822, 823, 824, 825, 828, 831, 837, 839, 850, 852, 856, 864], "lit": [1, 86, 114, 367, 486, 488, 495, 515, 518, 525, 719, 864], "alia": [1, 54, 56, 58, 139, 140, 153, 198, 204, 205, 236, 249, 260, 266, 288, 289, 290, 294, 295, 296, 297, 298, 304, 306, 307, 308, 310, 313, 315, 317, 320, 321, 322, 324, 325, 326, 328, 329, 332, 333, 334, 346, 348, 353, 358, 359, 367, 370, 371, 384, 391, 392, 399, 415, 431, 432, 435, 437, 439, 442, 447, 449, 450, 451, 466, 467, 473, 479, 480, 482, 483, 488, 491, 492, 496, 510, 514, 515, 525, 555, 556, 558, 564, 589, 592, 593, 597, 604, 625, 632, 673, 674, 677, 694, 701, 706, 707, 747, 824, 825, 864], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 348, 525, 636], "select": [1, 54, 55, 56, 57, 59, 87, 88, 89, 90, 92, 96, 98, 99, 101, 117, 151, 160, 164, 173, 182, 194, 198, 200, 236, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 282, 283, 284, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 347, 348, 349, 350, 351, 353, 354, 356, 357, 359, 360, 362, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 441, 445, 446, 448, 449, 450, 452, 454, 455, 457, 458, 459, 460, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 476, 477, 479, 481, 482, 484, 485, 488, 491, 493, 494, 496, 498, 502, 503, 504, 505, 506, 507, 512, 513, 514, 515, 516, 517, 525, 541, 558, 561, 571, 582, 589, 594, 596, 604, 632, 648, 787, 788, 800, 811, 813, 838, 864], "register_dataframe_namespac": [1, 56, 57, 58], "split": [1, 55, 162, 207, 236, 348, 449, 450, 525, 824, 825], "splitfram": [1, 55], "df": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 55, 56, 59, 77, 78, 79, 80, 81, 82, 83, 98, 99, 109, 110, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 481, 482, 483, 484, 485, 488, 491, 492, 493, 494, 496, 498, 502, 503, 504, 505, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 525, 538, 539, 540, 541, 543, 544, 545, 547, 548, 549, 550, 552, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 592, 595, 596, 598, 599, 600, 604, 632, 648, 652, 811, 813, 819, 824, 825, 845, 864], "_df": [1, 55], "by_alternate_row": 1, "list": [1, 31, 54, 55, 57, 61, 63, 83, 85, 87, 88, 89, 90, 92, 96, 98, 99, 100, 109, 110, 111, 120, 125, 126, 127, 131, 136, 139, 144, 159, 162, 174, 183, 189, 190, 196, 197, 198, 199, 205, 208, 219, 236, 244, 263, 265, 266, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 340, 342, 348, 376, 382, 383, 391, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 418, 426, 427, 437, 448, 457, 458, 462, 481, 482, 488, 492, 502, 505, 514, 515, 525, 541, 544, 545, 546, 547, 551, 555, 569, 588, 589, 593, 594, 604, 626, 629, 631, 632, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 654, 711, 716, 720, 723, 727, 736, 771, 773, 774, 775, 776, 777, 778, 780, 781, 782, 812, 823, 834, 838, 846, 864], "with_row_count": [1, 236, 604, 788, 864], "name": [1, 12, 16, 18, 26, 44, 55, 56, 57, 58, 63, 64, 67, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 117, 120, 123, 124, 132, 135, 137, 150, 151, 157, 165, 169, 176, 189, 195, 196, 198, 204, 205, 206, 236, 245, 282, 324, 329, 340, 367, 377, 381, 383, 394, 457, 458, 459, 474, 475, 481, 485, 488, 493, 498, 499, 502, 505, 507, 508, 510, 512, 515, 516, 525, 541, 544, 560, 561, 569, 575, 577, 583, 589, 593, 595, 596, 597, 604, 609, 648, 655, 697, 702, 721, 770, 832, 834, 845, 848, 864], "n": [1, 9, 11, 19, 27, 31, 32, 55, 56, 57, 58, 64, 85, 86, 88, 89, 99, 114, 117, 128, 139, 142, 153, 162, 175, 186, 187, 193, 212, 222, 236, 265, 269, 281, 299, 300, 304, 308, 328, 333, 343, 352, 371, 392, 400, 414, 424, 449, 450, 461, 463, 467, 498, 510, 516, 525, 540, 555, 557, 564, 586, 587, 599, 600, 604, 612, 631, 635, 647, 666, 668, 673, 677, 701, 706, 717, 726, 747, 762, 784, 799, 803, 824, 825, 837, 839, 842, 850, 854, 864], "filter": [1, 55, 99, 101, 124, 148, 209, 236, 435, 451, 473, 477, 525, 545, 548, 558, 598, 604, 787, 864], "col": [1, 24, 54, 55, 56, 57, 59, 80, 82, 99, 109, 110, 117, 131, 138, 139, 140, 148, 160, 164, 173, 177, 183, 198, 204, 205, 207, 236, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 279, 280, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 346, 347, 348, 349, 353, 354, 355, 356, 358, 359, 361, 362, 363, 366, 367, 368, 369, 373, 374, 375, 378, 379, 380, 385, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 477, 482, 483, 488, 491, 494, 496, 497, 502, 505, 508, 514, 515, 518, 525, 551, 554, 555, 556, 558, 571, 578, 583, 589, 592, 593, 594, 597, 604, 632, 648, 652, 694, 771, 787, 788, 811, 813, 828, 864], "2": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 77, 78, 79, 80, 81, 82, 83, 98, 99, 101, 105, 106, 107, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 236, 243, 244, 245, 247, 248, 249, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 301, 307, 309, 310, 313, 315, 316, 317, 318, 320, 321, 323, 324, 325, 326, 329, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 386, 387, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 425, 426, 427, 428, 430, 432, 435, 437, 438, 439, 442, 443, 444, 447, 449, 450, 451, 454, 455, 457, 458, 459, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 473, 474, 479, 480, 481, 482, 483, 484, 485, 488, 491, 492, 493, 494, 496, 498, 500, 502, 503, 504, 505, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 525, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 604, 609, 612, 613, 615, 619, 620, 621, 622, 623, 624, 631, 632, 635, 636, 638, 643, 644, 647, 648, 652, 653, 654, 659, 660, 663, 664, 665, 666, 667, 669, 678, 682, 683, 689, 691, 696, 697, 698, 702, 705, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 722, 725, 726, 728, 730, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 762, 763, 764, 766, 767, 770, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 795, 797, 799, 800, 801, 802, 803, 805, 807, 812, 813, 817, 818, 819, 824, 825, 836, 837, 838, 839, 840, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 856, 864], "0": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 28, 54, 55, 56, 58, 59, 63, 83, 88, 89, 91, 92, 96, 98, 99, 101, 102, 103, 104, 105, 108, 109, 110, 111, 114, 117, 118, 119, 121, 122, 125, 129, 130, 133, 134, 136, 137, 139, 141, 145, 150, 152, 154, 155, 156, 158, 159, 160, 161, 163, 166, 167, 171, 175, 176, 177, 180, 182, 183, 184, 185, 191, 194, 196, 197, 199, 200, 201, 204, 205, 206, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 236, 239, 243, 244, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 266, 268, 274, 282, 285, 287, 289, 290, 291, 292, 294, 299, 302, 303, 309, 313, 315, 316, 320, 325, 326, 337, 338, 339, 341, 344, 345, 349, 351, 354, 357, 360, 361, 363, 364, 365, 367, 368, 373, 374, 376, 378, 379, 380, 385, 388, 389, 390, 392, 393, 396, 397, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 419, 421, 422, 423, 424, 428, 429, 436, 456, 460, 464, 465, 466, 472, 477, 479, 480, 482, 485, 486, 488, 492, 495, 503, 504, 507, 508, 512, 515, 517, 518, 525, 538, 539, 544, 546, 549, 550, 555, 560, 563, 568, 572, 573, 577, 578, 580, 581, 583, 584, 590, 592, 593, 594, 595, 598, 604, 614, 615, 616, 617, 618, 619, 620, 622, 624, 632, 634, 650, 653, 655, 660, 661, 666, 667, 669, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 698, 699, 710, 712, 713, 714, 718, 722, 725, 733, 735, 737, 738, 739, 740, 741, 745, 751, 752, 762, 766, 767, 773, 775, 776, 778, 779, 780, 782, 784, 796, 797, 798, 802, 803, 805, 811, 813, 831, 840, 841, 844, 848, 849, 854, 855, 864], "drop": [1, 117, 123, 124, 197, 236, 265, 300, 302, 303, 525, 545, 588, 604, 631, 668, 670, 864], "aaa": 1, "bbb": 1, "ccc": 1, "ddd": 1, "eee": 1, "fff": 1, "column": [1, 11, 12, 15, 16, 18, 26, 45, 54, 55, 56, 57, 62, 63, 67, 71, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 92, 93, 96, 97, 98, 99, 102, 103, 104, 106, 110, 117, 122, 123, 124, 125, 126, 127, 132, 135, 137, 138, 139, 140, 144, 145, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 167, 169, 170, 171, 176, 177, 183, 184, 185, 189, 191, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 219, 236, 246, 247, 249, 258, 260, 263, 282, 306, 309, 311, 312, 314, 316, 318, 319, 322, 323, 325, 331, 332, 335, 340, 346, 367, 381, 383, 391, 394, 398, 400, 404, 405, 406, 407, 408, 410, 411, 412, 419, 426, 427, 449, 450, 453, 459, 473, 474, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 495, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 525, 544, 545, 546, 547, 554, 555, 556, 560, 561, 565, 566, 567, 568, 569, 570, 571, 573, 575, 577, 578, 583, 584, 585, 588, 589, 590, 592, 593, 594, 595, 596, 604, 610, 611, 629, 675, 678, 680, 684, 686, 689, 691, 692, 695, 696, 698, 704, 705, 708, 793, 824, 825, 845, 864], "txt": 1, "utf8": [1, 8, 14, 45, 88, 89, 99, 108, 125, 126, 133, 137, 176, 192, 236, 270, 342, 348, 430, 434, 436, 437, 438, 439, 447, 448, 449, 450, 453, 481, 483, 525, 546, 577, 604, 636, 700, 716, 744, 805, 809, 811, 812, 813, 814, 822, 823, 824, 825, 828, 847, 864], "register_lazyframe_namespac": [1, 55, 56, 58], "dtypeoper": [1, 57], "ldf": [1, 57, 537, 539, 544, 545, 547, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 573, 575, 576, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 597, 598, 599, 600, 604], "_ldf": [1, 57], "upcast_integer_typ": [1, 57], "with_column": [1, 57, 140, 164, 236, 249, 266, 285, 286, 288, 289, 290, 351, 354, 355, 358, 361, 363, 364, 365, 367, 391, 392, 435, 439, 442, 443, 444, 447, 449, 450, 451, 453, 456, 458, 466, 477, 480, 482, 483, 488, 492, 514, 515, 518, 525, 556, 571, 604, 632, 652, 828], "tp": [1, 57], "cast": [1, 56, 57, 77, 113, 133, 139, 140, 164, 193, 236, 248, 286, 297, 298, 304, 305, 399, 438, 456, 460, 466, 483, 525, 555, 556, 571, 604, 652, 664, 665, 673, 674, 769, 813, 836, 845, 849, 864], "int64": [1, 26, 56, 57, 86, 114, 125, 133, 137, 139, 140, 164, 176, 188, 236, 297, 298, 307, 310, 313, 315, 317, 320, 326, 340, 399, 460, 466, 477, 481, 493, 525, 546, 555, 556, 571, 577, 596, 604, 664, 665, 676, 679, 685, 687, 690, 693, 699, 709, 769, 786, 836, 847, 848, 849, 864], "int8": [1, 57, 133, 236, 297, 298, 460, 525, 664, 665, 772, 836, 864], "int16": [1, 57, 297, 298, 460, 525, 664, 665, 836, 864], "int32": [1, 57, 79, 110, 111, 139, 140, 236, 285, 311, 335, 466, 525, 555, 556, 604, 680, 708, 849, 864], "1": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 86, 88, 89, 90, 99, 100, 101, 105, 106, 107, 108, 110, 111, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 236, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 440, 441, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 481, 482, 483, 484, 485, 488, 489, 490, 491, 492, 493, 494, 496, 498, 500, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 514, 515, 516, 517, 518, 525, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 604, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 631, 632, 634, 635, 638, 643, 644, 647, 648, 650, 652, 653, 654, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 716, 717, 718, 719, 720, 722, 725, 726, 728, 730, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 750, 751, 752, 753, 754, 755, 756, 762, 763, 764, 766, 767, 770, 771, 772, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 811, 813, 824, 825, 828, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 864], "b": [1, 23, 24, 25, 28, 45, 57, 62, 77, 78, 79, 80, 81, 82, 83, 91, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 144, 145, 147, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 236, 245, 248, 249, 259, 263, 266, 270, 272, 284, 285, 286, 293, 301, 302, 303, 340, 342, 344, 345, 346, 350, 351, 354, 357, 360, 361, 362, 363, 364, 365, 367, 370, 372, 377, 386, 390, 394, 402, 419, 425, 443, 457, 458, 459, 469, 471, 473, 474, 479, 480, 481, 483, 484, 485, 488, 492, 493, 494, 496, 498, 502, 503, 504, 505, 506, 507, 512, 513, 514, 515, 516, 517, 525, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 599, 600, 604, 612, 632, 652, 667, 669, 710, 711, 719, 736, 744, 770, 786, 818, 852, 864], "3": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 91, 99, 101, 105, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 236, 244, 245, 246, 249, 258, 259, 260, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 316, 318, 322, 323, 324, 325, 328, 329, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 368, 370, 372, 373, 374, 375, 377, 386, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 426, 427, 428, 431, 433, 434, 435, 436, 439, 441, 442, 446, 447, 448, 449, 450, 451, 452, 457, 458, 459, 461, 462, 463, 467, 469, 470, 471, 473, 474, 479, 480, 481, 482, 483, 484, 485, 488, 492, 493, 494, 496, 498, 500, 502, 503, 504, 505, 507, 511, 512, 513, 514, 515, 516, 517, 518, 525, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 604, 609, 612, 613, 614, 616, 617, 618, 620, 621, 622, 623, 624, 631, 632, 635, 638, 643, 644, 647, 648, 650, 652, 653, 654, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 673, 674, 675, 676, 677, 678, 681, 682, 683, 685, 687, 688, 689, 691, 693, 695, 697, 698, 701, 702, 705, 706, 707, 709, 711, 713, 714, 716, 717, 718, 719, 720, 722, 725, 726, 728, 730, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 762, 763, 764, 766, 767, 770, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 795, 797, 798, 799, 800, 801, 803, 808, 809, 810, 811, 814, 817, 822, 826, 836, 837, 838, 839, 840, 841, 843, 844, 846, 847, 848, 851, 852, 853, 854, 856, 864], "4": [1, 11, 19, 23, 24, 25, 28, 45, 54, 55, 56, 57, 58, 59, 62, 64, 77, 78, 79, 80, 81, 82, 83, 99, 105, 106, 107, 111, 117, 118, 119, 121, 124, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 159, 160, 162, 164, 165, 166, 170, 174, 177, 178, 186, 187, 188, 189, 190, 191, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 236, 243, 244, 248, 249, 259, 265, 266, 269, 277, 278, 281, 284, 285, 287, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 306, 310, 316, 317, 318, 322, 323, 324, 325, 326, 329, 331, 332, 335, 341, 342, 344, 345, 349, 350, 352, 353, 354, 355, 364, 365, 367, 370, 372, 374, 377, 391, 393, 394, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 415, 417, 418, 421, 425, 426, 427, 428, 431, 439, 440, 442, 445, 447, 449, 450, 453, 459, 461, 462, 463, 466, 467, 479, 480, 481, 483, 484, 485, 488, 492, 494, 498, 502, 503, 504, 505, 506, 507, 512, 513, 514, 515, 516, 517, 518, 525, 538, 539, 540, 543, 545, 547, 548, 549, 550, 552, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 595, 598, 599, 600, 604, 612, 615, 622, 631, 632, 635, 643, 644, 647, 653, 654, 656, 666, 667, 669, 678, 679, 684, 686, 689, 690, 691, 692, 696, 697, 698, 699, 700, 702, 704, 705, 716, 718, 719, 728, 731, 736, 738, 739, 740, 741, 743, 755, 762, 763, 764, 767, 776, 778, 779, 780, 781, 782, 784, 786, 796, 800, 801, 806, 814, 815, 817, 820, 822, 824, 825, 828, 838, 839, 849, 856, 864], "c": [1, 23, 24, 25, 28, 45, 55, 57, 79, 81, 91, 99, 109, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131, 132, 133, 134, 136, 137, 138, 139, 142, 144, 145, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 169, 171, 172, 173, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 188, 192, 193, 194, 196, 197, 199, 201, 202, 205, 210, 211, 212, 213, 214, 215, 217, 219, 221, 222, 236, 249, 263, 270, 272, 367, 419, 449, 453, 469, 471, 474, 479, 480, 481, 483, 484, 485, 488, 494, 496, 498, 502, 503, 504, 505, 506, 507, 512, 513, 514, 515, 516, 517, 525, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 551, 554, 555, 560, 563, 569, 572, 575, 576, 577, 578, 581, 582, 583, 592, 593, 594, 599, 600, 604, 667, 744, 824, 828, 852, 864], "5": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 28, 54, 55, 57, 58, 59, 62, 63, 77, 79, 80, 81, 82, 85, 86, 89, 105, 110, 111, 114, 117, 118, 119, 121, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 151, 152, 153, 155, 157, 159, 160, 165, 166, 167, 170, 174, 178, 186, 187, 188, 189, 190, 195, 197, 199, 200, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 236, 244, 266, 269, 274, 280, 281, 285, 286, 287, 288, 289, 290, 299, 301, 307, 325, 326, 331, 334, 339, 340, 342, 343, 349, 352, 355, 358, 361, 363, 364, 365, 367, 372, 391, 392, 394, 396, 397, 401, 402, 403, 404, 405, 407, 411, 413, 415, 421, 432, 438, 439, 442, 456, 459, 461, 463, 467, 479, 482, 484, 485, 488, 491, 492, 493, 494, 498, 502, 503, 504, 505, 506, 507, 512, 513, 515, 516, 517, 525, 538, 539, 540, 543, 547, 548, 549, 550, 552, 554, 555, 556, 557, 559, 561, 562, 563, 564, 567, 568, 569, 572, 579, 580, 581, 582, 584, 585, 586, 587, 591, 592, 593, 595, 598, 599, 600, 604, 612, 615, 619, 622, 632, 635, 638, 647, 652, 654, 656, 662, 666, 667, 669, 674, 675, 676, 698, 699, 704, 705, 707, 714, 717, 728, 755, 762, 763, 764, 766, 767, 773, 774, 775, 777, 778, 781, 784, 786, 796, 802, 807, 813, 814, 850, 856, 864], "6": [1, 23, 24, 25, 26, 27, 28, 55, 57, 62, 77, 79, 80, 81, 82, 83, 117, 120, 122, 123, 124, 125, 127, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 150, 153, 154, 155, 156, 157, 158, 161, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 204, 205, 206, 207, 212, 219, 221, 222, 236, 249, 284, 285, 297, 298, 301, 321, 323, 325, 336, 342, 344, 345, 350, 352, 354, 372, 391, 395, 397, 398, 401, 404, 405, 406, 407, 408, 410, 411, 412, 415, 426, 427, 432, 439, 442, 461, 463, 474, 488, 492, 514, 515, 525, 540, 541, 543, 544, 545, 546, 547, 548, 551, 552, 554, 555, 556, 557, 559, 560, 562, 564, 565, 569, 572, 575, 577, 578, 579, 580, 581, 582, 583, 586, 587, 589, 591, 592, 593, 595, 596, 599, 600, 604, 612, 654, 660, 664, 665, 667, 669, 694, 705, 716, 755, 767, 776, 778, 779, 780, 782, 786, 807, 814, 836, 864], "7": [1, 23, 24, 25, 26, 27, 28, 55, 57, 62, 64, 120, 121, 122, 123, 125, 127, 131, 132, 134, 139, 140, 142, 144, 146, 150, 154, 155, 156, 158, 161, 163, 167, 169, 171, 173, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 194, 199, 200, 201, 202, 236, 298, 306, 322, 324, 329, 332, 335, 341, 352, 354, 391, 401, 405, 411, 461, 463, 514, 525, 541, 544, 546, 547, 551, 555, 556, 557, 559, 560, 564, 573, 575, 577, 578, 583, 586, 587, 592, 596, 604, 619, 675, 680, 697, 702, 705, 781, 864], "float32": [1, 24, 57, 133, 236, 732, 864], "lazi": [1, 57, 62, 64, 86, 99, 110, 114, 151, 164, 207, 236, 249, 282, 391, 477, 525, 534, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 604], "register_series_namespac": [1, 55, 56, 57], "math": [1, 58, 660, 797, 840, 864], "mathshortcut": [1, 58], "": [1, 24, 58, 63, 88, 89, 111, 122, 124, 126, 138, 139, 145, 150, 151, 170, 171, 187, 207, 236, 265, 269, 270, 277, 278, 281, 308, 340, 368, 382, 386, 388, 389, 391, 392, 399, 403, 427, 439, 440, 442, 445, 447, 448, 450, 453, 456, 458, 488, 491, 493, 496, 502, 505, 507, 515, 525, 545, 554, 555, 561, 587, 597, 604, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 631, 635, 636, 638, 643, 644, 647, 650, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 669, 674, 677, 697, 702, 709, 711, 713, 714, 716, 717, 718, 719, 720, 722, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 758, 759, 762, 763, 764, 766, 767, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 795, 796, 797, 798, 800, 801, 803, 806, 807, 808, 809, 810, 812, 814, 815, 817, 818, 820, 822, 825, 826, 828, 831, 834, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 864], "_": [1, 54, 58, 449, 824], "squar": [1, 58, 209, 368, 428, 525, 598, 745, 802, 864], "cube": [1, 58], "s2": [1, 107, 133, 236, 612, 654, 669, 736, 755, 786, 856, 864], "renam": [1, 88, 89, 236, 245, 377, 384, 458, 525, 604, 834, 845, 864], "n2": 1, "in_plac": [1, 144, 181, 202, 236, 768, 770, 794, 801, 864], "true": [1, 8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 59, 61, 62, 64, 77, 81, 85, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 118, 119, 121, 124, 130, 133, 134, 136, 137, 139, 145, 147, 148, 149, 151, 152, 155, 159, 160, 162, 165, 166, 183, 189, 196, 197, 198, 199, 200, 205, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 236, 244, 246, 247, 248, 249, 264, 285, 294, 295, 296, 297, 298, 324, 325, 329, 336, 337, 338, 339, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 399, 409, 414, 419, 424, 426, 427, 431, 433, 435, 438, 448, 449, 451, 453, 457, 458, 462, 467, 468, 471, 476, 477, 484, 510, 512, 514, 518, 525, 538, 539, 540, 542, 543, 545, 548, 550, 554, 555, 560, 561, 563, 565, 572, 581, 583, 588, 589, 593, 604, 610, 611, 612, 613, 623, 650, 654, 655, 697, 698, 702, 710, 712, 713, 714, 720, 724, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 755, 763, 764, 769, 779, 786, 799, 801, 806, 808, 810, 813, 823, 824, 826, 828, 847, 850, 855, 856, 864], "s3": [1, 90, 100, 101, 864], "n3": 1, "arg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 164, 193, 236, 496, 571, 604, 613, 847, 864], "ani": [2, 3, 4, 6, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 60, 78, 79, 80, 82, 88, 89, 90, 91, 92, 96, 99, 100, 102, 104, 108, 110, 111, 117, 124, 128, 130, 131, 133, 162, 163, 164, 173, 174, 189, 190, 192, 193, 199, 236, 249, 263, 266, 285, 325, 345, 359, 376, 384, 401, 403, 418, 426, 453, 462, 476, 494, 500, 512, 525, 545, 550, 571, 604, 612, 613, 629, 632, 669, 698, 719, 736, 771, 773, 788, 828, 838, 846, 847, 864], "kwarg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 163, 164, 193, 205, 236, 571, 593, 604, 847, 864], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 525, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 864, 870], "method": [2, 3, 4, 6, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 88, 89, 91, 108, 124, 146, 160, 167, 220, 236, 246, 330, 354, 396, 397, 404, 405, 406, 407, 408, 410, 411, 412, 469, 508, 519, 521, 525, 526, 529, 530, 531, 534, 545, 559, 573, 604, 613, 703, 728, 766, 767, 778, 849, 857, 860, 864, 867, 868, 869], "A": [4, 24, 42, 61, 64, 83, 88, 89, 96, 99, 100, 133, 139, 151, 162, 165, 189, 191, 199, 200, 219, 236, 243, 282, 307, 310, 313, 315, 317, 320, 326, 357, 360, 361, 363, 376, 377, 382, 394, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 431, 432, 436, 437, 438, 456, 459, 481, 482, 492, 496, 525, 555, 561, 583, 604, 648, 676, 679, 685, 687, 690, 693, 699, 773, 774, 775, 777, 780, 781, 782, 806, 807, 811, 812, 813, 818, 819, 828, 831, 864], "encod": [4, 53, 88, 89, 99, 191, 236, 433, 808], "set": [4, 5, 6, 7, 8, 9, 10, 11, 14, 19, 20, 22, 24, 26, 27, 55, 64, 79, 82, 88, 89, 91, 92, 96, 99, 102, 103, 104, 106, 107, 109, 110, 111, 120, 141, 151, 157, 175, 182, 196, 236, 249, 278, 282, 333, 334, 351, 359, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 420, 424, 425, 447, 525, 534, 541, 560, 561, 565, 569, 582, 596, 598, 604, 612, 613, 644, 706, 707, 721, 725, 736, 773, 774, 775, 776, 777, 778, 780, 781, 782, 784, 788, 799, 800, 822, 847, 864], "string": [4, 5, 7, 9, 10, 14, 24, 26, 27, 31, 45, 53, 64, 88, 89, 99, 108, 109, 111, 113, 133, 139, 140, 151, 183, 199, 200, 236, 270, 286, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 430, 431, 434, 435, 437, 438, 439, 440, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 456, 481, 483, 496, 502, 505, 525, 542, 543, 553, 555, 556, 561, 596, 604, 636, 652, 694, 697, 702, 804, 805, 806, 810, 812, 813, 814, 815, 817, 818, 819, 820, 822, 823, 824, 825, 826, 828, 829, 830, 831, 864], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 553, 574, 604], "cfg": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "previous": 5, "save": [5, 534], "share": [5, 45, 126, 236, 711, 864], "option": [5, 6, 7, 54, 64, 78, 79, 86, 88, 90, 91, 92, 96, 100, 102, 104, 105, 108, 109, 110, 111, 114, 117, 124, 151, 157, 160, 189, 191, 196, 200, 205, 236, 249, 368, 376, 403, 404, 405, 406, 407, 408, 410, 411, 412, 424, 446, 447, 452, 474, 477, 500, 525, 534, 560, 561, 569, 593, 598, 604, 613, 745, 773, 774, 775, 776, 777, 778, 780, 781, 782, 788, 799, 816, 821, 822, 827, 845, 864], "paramet": [5, 9, 10, 11, 14, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 39, 42, 44, 46, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 114, 117, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 150, 151, 153, 155, 157, 159, 160, 162, 163, 164, 165, 167, 169, 170, 171, 173, 175, 177, 179, 180, 182, 183, 184, 185, 186, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 212, 219, 220, 222, 236, 245, 248, 249, 258, 260, 263, 264, 265, 266, 268, 269, 270, 277, 278, 281, 282, 284, 285, 286, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 308, 321, 324, 328, 329, 330, 333, 334, 336, 337, 338, 339, 340, 343, 345, 346, 350, 351, 352, 354, 355, 359, 368, 371, 373, 376, 377, 391, 392, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 458, 461, 462, 467, 468, 471, 472, 473, 474, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 495, 496, 498, 500, 501, 502, 507, 508, 509, 510, 511, 512, 514, 515, 516, 525, 540, 544, 545, 548, 549, 550, 551, 553, 554, 555, 556, 557, 560, 561, 564, 565, 569, 571, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 586, 588, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 609, 612, 613, 622, 625, 629, 630, 631, 632, 634, 635, 636, 643, 644, 647, 648, 650, 652, 656, 657, 658, 662, 663, 664, 665, 666, 668, 669, 673, 674, 677, 694, 697, 701, 702, 703, 706, 707, 710, 711, 712, 713, 714, 717, 718, 719, 720, 725, 726, 728, 745, 747, 762, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 795, 799, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 834, 837, 838, 845, 846, 847, 850, 851, 853, 854, 855, 856, 864], "json": [5, 7, 26, 27, 94, 95, 103, 236, 438, 534, 553, 574, 596, 604, 813], "produc": [5, 110, 111, 381, 501], "reset": 6, "default": [6, 14, 22, 23, 24, 25, 26, 27, 28, 77, 78, 80, 81, 82, 86, 88, 89, 96, 99, 108, 109, 110, 111, 114, 126, 138, 140, 141, 151, 157, 165, 175, 206, 236, 278, 282, 286, 336, 351, 355, 373, 388, 389, 392, 397, 414, 420, 436, 447, 453, 477, 478, 500, 512, 525, 554, 556, 561, 569, 596, 604, 644, 648, 652, 710, 711, 725, 758, 759, 762, 767, 784, 803, 811, 822, 854, 864], "state": [6, 61, 72, 486, 534, 540, 548, 572, 581, 604], "note": [6, 14, 54, 64, 80, 82, 86, 88, 90, 96, 98, 100, 109, 110, 111, 114, 117, 129, 138, 139, 140, 150, 151, 160, 163, 164, 173, 190, 192, 196, 197, 200, 219, 236, 239, 266, 297, 298, 302, 303, 321, 324, 329, 361, 363, 404, 405, 406, 407, 408, 410, 411, 412, 424, 439, 442, 453, 460, 486, 495, 509, 525, 540, 548, 549, 555, 556, 557, 561, 564, 581, 588, 604, 632, 664, 665, 694, 787, 788, 794, 799, 814, 817, 836, 847, 864], "oper": [6, 45, 62, 68, 69, 77, 78, 79, 80, 81, 82, 88, 96, 117, 128, 133, 138, 145, 152, 160, 162, 164, 168, 188, 192, 193, 196, 199, 207, 219, 236, 244, 282, 294, 295, 296, 297, 298, 299, 367, 384, 397, 399, 474, 475, 492, 525, 548, 554, 557, 560, 564, 604, 612, 662, 663, 664, 665, 666, 767, 769, 843, 846, 847, 855, 864], "remov": [6, 122, 236, 239, 340, 441, 446, 452, 493, 525, 544, 604, 816, 821, 827], "from": [6, 24, 54, 64, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 121, 122, 126, 128, 137, 139, 140, 151, 152, 157, 169, 173, 175, 177, 196, 197, 199, 200, 236, 294, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 340, 354, 368, 388, 389, 392, 414, 426, 427, 436, 453, 469, 471, 480, 481, 489, 490, 491, 493, 500, 512, 524, 525, 544, 545, 548, 553, 555, 556, 561, 569, 574, 575, 578, 588, 592, 594, 604, 612, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 711, 730, 745, 758, 759, 760, 762, 784, 811, 853, 856, 864], "environ": [6, 22], "local": [6, 90, 100, 330, 703, 763, 764, 864], "flag": [6, 108, 205, 236, 416, 525, 565, 593, 604, 789, 864], "back": [6, 54, 128, 236, 612, 864], "valu": [6, 9, 22, 24, 26, 39, 40, 52, 54, 62, 63, 79, 81, 88, 89, 98, 99, 101, 106, 107, 108, 109, 110, 111, 113, 117, 124, 128, 129, 130, 134, 137, 139, 140, 141, 146, 154, 155, 156, 157, 158, 160, 162, 165, 166, 167, 169, 175, 179, 180, 183, 184, 185, 189, 199, 200, 201, 210, 211, 213, 214, 215, 217, 218, 219, 223, 224, 225, 226, 227, 228, 229, 236, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 267, 268, 269, 271, 273, 274, 275, 277, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 299, 300, 302, 303, 306, 318, 322, 331, 337, 338, 339, 341, 343, 344, 345, 347, 349, 350, 351, 353, 354, 356, 357, 358, 360, 361, 363, 364, 365, 366, 369, 370, 374, 375, 376, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 396, 397, 400, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 418, 422, 423, 424, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 443, 444, 447, 449, 450, 451, 456, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 480, 483, 484, 486, 487, 488, 494, 495, 500, 502, 503, 504, 505, 506, 509, 510, 515, 518, 525, 545, 549, 550, 555, 556, 558, 559, 566, 567, 568, 569, 570, 573, 575, 579, 580, 583, 584, 585, 590, 596, 597, 604, 608, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 627, 628, 631, 633, 634, 635, 637, 639, 640, 641, 643, 647, 649, 652, 653, 656, 657, 658, 660, 661, 666, 667, 668, 670, 671, 675, 691, 695, 704, 711, 712, 713, 714, 717, 718, 719, 721, 722, 724, 725, 728, 731, 733, 734, 736, 737, 738, 739, 740, 741, 743, 750, 751, 753, 754, 756, 758, 759, 760, 761, 762, 765, 766, 767, 773, 774, 775, 776, 777, 778, 780, 781, 782, 784, 785, 786, 787, 788, 791, 792, 797, 798, 799, 805, 807, 808, 809, 810, 811, 812, 813, 814, 817, 818, 819, 822, 824, 825, 826, 831, 836, 838, 839, 840, 841, 849, 852, 853, 855, 856, 864], "exampl": [6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 236, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 479, 480, 481, 482, 483, 484, 485, 488, 491, 492, 493, 494, 496, 498, 500, 502, 503, 504, 505, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 525, 534, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 631, 632, 635, 636, 638, 643, 644, 647, 648, 650, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 722, 725, 726, 728, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 750, 751, 752, 753, 754, 755, 756, 762, 763, 764, 766, 767, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 795, 796, 797, 798, 800, 801, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 824, 825, 826, 828, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 864], "current": [7, 22, 118, 119, 205, 236, 282, 324, 392, 525, 534, 538, 539, 593, 604, 655, 659, 697, 762, 864], "activ": [8, 12, 13, 15, 16, 17, 18, 21, 266, 632], "bool": [8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 39, 54, 59, 61, 62, 77, 81, 88, 89, 92, 94, 96, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 118, 119, 130, 131, 133, 134, 136, 138, 139, 144, 145, 147, 148, 149, 151, 162, 165, 175, 181, 183, 189, 193, 196, 197, 198, 200, 202, 205, 211, 213, 214, 217, 236, 246, 247, 248, 258, 260, 264, 266, 279, 285, 294, 295, 296, 297, 298, 299, 325, 336, 337, 338, 339, 343, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 376, 397, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 418, 419, 424, 426, 427, 431, 433, 435, 443, 444, 448, 449, 451, 453, 457, 458, 467, 468, 471, 476, 477, 478, 480, 486, 500, 510, 512, 514, 518, 525, 538, 540, 542, 548, 550, 551, 554, 555, 560, 561, 565, 572, 581, 583, 588, 589, 593, 596, 604, 610, 611, 612, 613, 622, 625, 630, 632, 645, 650, 655, 662, 663, 664, 665, 666, 698, 710, 712, 713, 714, 717, 720, 721, 724, 729, 730, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 763, 764, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 788, 789, 794, 799, 801, 806, 808, 810, 818, 819, 823, 824, 826, 828, 846, 847, 850, 851, 853, 855, 864], "ascii": [8, 14, 440, 442, 445, 456, 815, 817, 820, 831], "charact": [8, 9, 14, 20, 24, 88, 89, 99, 236, 321, 348, 439, 440, 445, 446, 448, 449, 452, 456, 525, 572, 604, 694, 814, 815, 816, 820, 821, 823, 824, 827, 831], "print": [8, 9, 11, 13, 19, 105, 125, 137, 138, 152, 236, 353, 525, 558, 604, 736, 773, 864], "tabl": [8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 44, 77, 88, 89, 90, 99, 100, 165, 188, 193, 199, 219, 236], "outlin": 8, "fals": [8, 10, 12, 13, 15, 16, 17, 18, 19, 22, 26, 28, 54, 59, 61, 64, 88, 89, 91, 92, 96, 99, 103, 104, 106, 107, 108, 109, 110, 111, 118, 119, 121, 133, 134, 136, 137, 138, 139, 144, 145, 147, 148, 149, 151, 152, 155, 159, 160, 162, 165, 166, 175, 181, 183, 189, 193, 196, 197, 200, 202, 205, 210, 211, 213, 214, 215, 217, 221, 236, 246, 247, 258, 260, 264, 266, 279, 294, 295, 296, 297, 298, 299, 325, 336, 337, 338, 339, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 376, 397, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 419, 424, 426, 427, 431, 433, 435, 443, 444, 448, 449, 451, 453, 467, 468, 471, 477, 478, 486, 500, 510, 512, 514, 518, 525, 538, 539, 540, 542, 548, 554, 555, 560, 561, 563, 565, 572, 581, 583, 593, 604, 612, 622, 625, 632, 645, 650, 654, 655, 662, 663, 664, 665, 666, 698, 710, 712, 713, 714, 720, 729, 731, 733, 736, 737, 738, 739, 740, 741, 743, 745, 755, 763, 764, 767, 768, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 786, 789, 794, 799, 801, 806, 808, 810, 818, 819, 823, 824, 826, 828, 846, 847, 850, 851, 853, 855, 856, 864], "revert": 8, "abc": [8, 12, 13, 15, 16, 17, 18, 19, 443, 818], "xyz": [8, 12, 13, 15, 16, 17, 18, 19, 432, 437, 807, 812, 845, 864], "shape": [8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 75, 77, 78, 79, 80, 81, 82, 83, 86, 99, 101, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 175, 177, 179, 180, 182, 183, 184, 185, 186, 187, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 236, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 480, 481, 482, 483, 484, 485, 488, 491, 492, 493, 494, 496, 498, 502, 503, 504, 505, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 525, 538, 540, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 598, 599, 600, 604, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 624, 631, 632, 635, 636, 638, 643, 644, 647, 648, 650, 652, 653, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 713, 714, 716, 717, 718, 719, 720, 722, 725, 726, 728, 731, 733, 736, 737, 738, 739, 740, 741, 743, 747, 754, 762, 763, 764, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 788, 791, 795, 796, 797, 798, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 824, 825, 826, 828, 837, 838, 839, 840, 841, 844, 845, 849, 851, 852, 853, 856, 864], "f64": [8, 10, 12, 13, 15, 16, 17, 18, 19, 54, 56, 58, 63, 101, 110, 118, 119, 121, 122, 124, 125, 129, 130, 133, 136, 145, 150, 151, 155, 156, 163, 166, 167, 182, 183, 184, 197, 201, 204, 205, 211, 213, 214, 215, 216, 217, 220, 221, 236, 243, 250, 251, 252, 253, 254, 255, 274, 285, 287, 291, 292, 299, 302, 303, 325, 336, 337, 338, 339, 340, 341, 349, 354, 361, 363, 364, 365, 367, 368, 373, 374, 378, 379, 380, 385, 388, 389, 392, 393, 396, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 422, 423, 424, 428, 429, 464, 465, 472, 479, 480, 482, 485, 493, 503, 504, 507, 512, 513, 517, 525, 538, 544, 545, 549, 550, 560, 561, 567, 568, 573, 583, 584, 590, 592, 593, 594, 604, 614, 615, 616, 617, 618, 619, 653, 660, 661, 666, 667, 698, 713, 714, 718, 722, 762, 773, 775, 776, 778, 779, 780, 782, 783, 797, 798, 802, 840, 841, 864], "int": [9, 11, 19, 20, 24, 28, 39, 56, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 114, 117, 126, 129, 130, 132, 141, 142, 143, 145, 151, 153, 154, 155, 158, 159, 160, 171, 173, 175, 178, 179, 180, 182, 184, 185, 186, 187, 194, 199, 201, 203, 206, 212, 222, 236, 264, 265, 268, 269, 277, 278, 281, 282, 284, 288, 289, 290, 299, 300, 337, 338, 339, 343, 344, 345, 350, 351, 352, 355, 371, 392, 393, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 420, 425, 429, 436, 440, 445, 447, 449, 450, 456, 457, 458, 461, 462, 463, 467, 472, 477, 480, 484, 488, 489, 490, 491, 498, 502, 504, 505, 506, 507, 510, 512, 513, 514, 515, 516, 517, 525, 548, 549, 550, 557, 561, 564, 572, 579, 580, 582, 584, 586, 587, 590, 591, 595, 599, 600, 604, 620, 621, 630, 631, 634, 635, 643, 644, 647, 648, 650, 654, 656, 657, 658, 666, 668, 711, 712, 713, 714, 717, 718, 719, 725, 726, 746, 747, 750, 751, 753, 755, 756, 758, 759, 760, 761, 762, 765, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 791, 792, 795, 800, 803, 811, 815, 820, 822, 824, 825, 831, 836, 837, 838, 839, 850, 854, 864], "number": [9, 11, 19, 20, 24, 28, 54, 73, 85, 86, 88, 89, 91, 99, 103, 109, 110, 114, 126, 127, 129, 130, 142, 152, 153, 159, 160, 175, 179, 180, 186, 199, 210, 212, 222, 236, 265, 269, 277, 281, 282, 284, 293, 299, 300, 309, 311, 316, 318, 325, 331, 332, 335, 337, 338, 339, 343, 345, 350, 352, 361, 363, 370, 371, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 417, 418, 420, 439, 442, 449, 450, 461, 467, 484, 498, 512, 516, 525, 547, 548, 549, 550, 557, 564, 572, 579, 580, 586, 599, 600, 604, 631, 635, 643, 647, 648, 666, 668, 678, 680, 689, 691, 698, 704, 705, 708, 711, 712, 713, 714, 717, 719, 726, 735, 747, 755, 756, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 791, 792, 795, 803, 814, 817, 824, 825, 837, 850, 854, 864], "format": [10, 14, 24, 26, 87, 88, 89, 94, 99, 101, 127, 157, 234, 236, 324, 327, 329, 453, 547, 553, 569, 596, 604, 700, 828, 863], "liter": [10, 14, 59, 64, 91, 111, 154, 155, 158, 159, 162, 177, 185, 189, 236, 246, 247, 367, 398, 431, 443, 444, 477, 489, 490, 500, 510, 514, 518, 525, 550, 578, 604, 610, 611, 787, 788, 806, 818, 819, 864], "left": [10, 64, 106, 107, 139, 140, 150, 151, 236, 337, 338, 339, 354, 404, 405, 406, 407, 408, 410, 411, 412, 440, 456, 466, 480, 486, 487, 495, 509, 525, 555, 556, 560, 561, 604, 712, 713, 714, 815, 831, 849, 864], "center": [10, 337, 338, 339, 403, 404, 405, 406, 407, 408, 410, 411, 412, 525, 712, 713, 714, 773, 774, 775, 776, 777, 778, 780, 781, 782, 864], "right": [10, 12, 64, 88, 89, 106, 107, 139, 140, 150, 151, 236, 337, 338, 339, 404, 405, 406, 407, 408, 410, 411, 412, 424, 445, 480, 525, 555, 556, 560, 561, 604, 712, 713, 714, 799, 820, 864], "cell": 10, "align": [10, 54, 456, 831], "keyerror": [10, 14], "recognis": [10, 14, 108], "column_abc": 10, "column_xyz": 10, "If": [11, 24, 26, 27, 28, 45, 60, 63, 64, 78, 80, 81, 82, 88, 89, 90, 91, 92, 96, 98, 99, 100, 102, 103, 104, 117, 128, 139, 140, 151, 157, 160, 162, 175, 182, 192, 193, 196, 219, 236, 249, 278, 282, 288, 289, 290, 346, 368, 376, 399, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 416, 420, 424, 425, 426, 427, 439, 442, 447, 448, 449, 450, 453, 467, 474, 476, 477, 478, 484, 486, 495, 500, 512, 525, 555, 556, 560, 561, 565, 569, 582, 596, 598, 604, 612, 613, 644, 656, 657, 658, 724, 745, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 789, 799, 800, 814, 817, 822, 823, 824, 825, 828, 843, 847, 850, 855, 864], "rang": [11, 63, 64, 98, 126, 139, 236, 306, 318, 322, 323, 324, 329, 331, 354, 477, 482, 489, 490, 525, 555, 604, 675, 691, 695, 696, 697, 702, 704, 711, 762, 864], "100": [11, 88, 89, 99, 103, 456, 477, 774, 775, 777, 864], "98": [11, 145, 236, 426, 427, 462, 467, 525], "99": [11, 129, 130, 145, 148, 236, 244, 343, 345, 426, 427, 462, 467, 480, 525, 549, 550, 604, 710, 717, 864], "imove": [12, 330, 337, 338, 339, 404, 405, 407, 411, 525, 703, 712, 713, 714, 774, 775, 777, 781, 864], "inlin": 12, "parenthes": 12, "below": [13, 90, 100, 124, 138, 236, 354, 518, 525, 545, 604], "when": [13, 17, 28, 45, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88, 89, 92, 96, 99, 102, 103, 110, 111, 113, 117, 125, 126, 128, 130, 133, 139, 164, 173, 177, 236, 288, 289, 290, 337, 338, 339, 345, 376, 382, 453, 486, 495, 525, 550, 555, 578, 604, 612, 656, 657, 658, 711, 712, 713, 714, 719, 787, 788, 864], "displai": [13, 17], "ascii_ful": 14, "ascii_no_bord": 14, "ascii_borders_onli": 14, "ascii_borders_only_condens": 14, "ascii_horizontal_onli": 14, "ascii_markdown": 14, "utf8_ful": 14, "utf8_full_condens": 14, "utf8_no_bord": 14, "utf8_borders_onli": 14, "utf8_horizontal_onli": 14, "noth": [14, 432, 436, 437, 438, 807, 811, 812, 813], "style": [14, 165, 236], "border": 14, "line": [14, 88, 89, 91, 99, 137, 236], "dens": [14, 137, 236, 397, 525, 767, 864], "row": [14, 19, 24, 26, 28, 54, 55, 57, 70, 73, 76, 79, 80, 82, 88, 89, 91, 92, 96, 99, 102, 103, 104, 109, 110, 117, 124, 128, 131, 133, 137, 139, 141, 142, 147, 149, 151, 152, 153, 157, 160, 182, 186, 187, 190, 197, 199, 206, 209, 212, 222, 236, 249, 342, 348, 352, 371, 392, 401, 425, 461, 486, 487, 495, 498, 502, 505, 509, 516, 525, 540, 545, 548, 551, 552, 555, 557, 561, 562, 564, 565, 569, 582, 586, 587, 588, 595, 598, 599, 600, 604, 612, 716, 726, 747, 762, 771, 800, 837, 864], "space": 14, "horizont": [14, 62, 133, 144, 199, 236, 483, 486, 487, 488, 492, 495, 502, 505, 509, 515], "markdown": 14, "compat": [14, 28, 100, 236, 604], "same": [14, 45, 54, 61, 106, 109, 117, 197, 209, 236, 243, 248, 249, 342, 348, 403, 404, 405, 406, 407, 408, 410, 411, 412, 481, 525, 588, 598, 604, 608, 612, 613, 716, 773, 774, 775, 776, 777, 778, 780, 781, 782, 856, 864], "No": 14, "The": [14, 28, 39, 46, 54, 60, 85, 88, 96, 98, 99, 100, 117, 139, 140, 141, 146, 151, 173, 198, 200, 209, 219, 236, 249, 282, 284, 306, 318, 321, 322, 324, 329, 331, 343, 348, 350, 351, 376, 397, 400, 403, 404, 405, 406, 407, 408, 410, 411, 412, 424, 427, 430, 433, 434, 439, 440, 445, 456, 478, 519, 521, 525, 526, 529, 530, 531, 538, 554, 555, 556, 557, 559, 561, 564, 565, 572, 589, 598, 604, 655, 675, 691, 694, 695, 697, 702, 704, 717, 725, 728, 767, 773, 774, 775, 776, 777, 778, 780, 781, 782, 799, 805, 808, 809, 814, 815, 820, 831, 857, 860, 864, 867, 868, 869], "one": [14, 54, 70, 111, 130, 131, 137, 139, 140, 157, 165, 173, 191, 195, 207, 208, 219, 236, 244, 345, 367, 403, 426, 427, 457, 462, 474, 502, 505, 514, 515, 525, 544, 550, 551, 555, 556, 569, 594, 604, 612, 719, 773, 832, 864], "more": [14, 26, 28, 54, 76, 90, 96, 100, 110, 111, 117, 138, 152, 157, 160, 163, 173, 175, 197, 209, 236, 249, 288, 289, 290, 367, 368, 376, 414, 424, 468, 502, 505, 515, 525, 554, 569, 588, 598, 604, 613, 656, 657, 658, 745, 784, 799, 851, 864, 871], "semigraph": 14, "box": [14, 117, 236], "draw": [14, 19, 20], "found": [14, 24, 71, 125, 236, 438, 453, 458, 813], "unicod": 14, "block": [14, 595, 604, 787, 788, 864], "http": [14, 436, 811, 871], "en": 14, "wikipedia": 14, "org": 14, "wiki": 14, "drawing_charact": 14, "box_draw": 14, "hide": [15, 16, 17, 18], "etc": [15, 80, 82, 88, 90, 92, 96, 100, 102, 104, 477, 787, 788, 864], "inform": [17, 60, 79, 90, 100, 163, 236, 288, 289, 290, 368, 424, 525, 572, 604, 656, 657, 658, 745, 799, 864], "separ": [18, 24, 196, 236, 270, 348, 483, 486, 487, 525, 636], "between": [18, 26, 62, 94, 108, 109, 110, 111, 167, 220, 236, 270, 285, 301, 355, 392, 396, 408, 430, 485, 507, 508, 512, 525, 573, 604, 636, 650, 669, 762, 766, 778, 805, 864], "set_tbl_column_data_type_inlin": 18, "max": [19, 28, 110, 111, 121, 130, 139, 140, 165, 236, 288, 289, 295, 345, 391, 397, 404, 416, 450, 525, 550, 555, 556, 597, 604, 656, 657, 662, 667, 719, 767, 774, 789, 825, 864], "both": [19, 24, 45, 64, 139, 140, 150, 151, 173, 236, 248, 355, 404, 405, 406, 407, 408, 410, 411, 412, 441, 446, 452, 525, 555, 556, 560, 561, 604], "element": [19, 86, 111, 114, 250, 251, 252, 253, 254, 255, 266, 291, 292, 294, 295, 296, 297, 298, 299, 341, 351, 359, 374, 392, 397, 400, 415, 421, 422, 423, 428, 449, 450, 464, 465, 467, 525, 613, 614, 615, 616, 617, 618, 619, 632, 660, 661, 662, 663, 664, 665, 666, 715, 720, 736, 749, 762, 767, 785, 796, 797, 798, 802, 803, 824, 825, 840, 841, 850, 851, 854, 864], "width": [20, 88, 89, 236, 440, 445, 456, 604, 815, 820, 831], "char": [20, 45, 442, 817], "enabl": [21, 416, 525, 789, 864], "addit": [21, 90, 100, 108, 109], "verbos": 21, "debug": [21, 540, 548, 565, 604], "log": [21, 56, 336, 467, 525, 710, 850, 864], "if_set": 22, "dict": [22, 28, 46, 55, 57, 60, 78, 79, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 102, 104, 110, 162, 163, 169, 176, 189, 190, 236, 565, 575, 577, 598, 604, 721, 864], "none": [22, 23, 24, 25, 26, 27, 28, 31, 40, 44, 54, 63, 64, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 118, 121, 124, 129, 130, 137, 139, 140, 141, 146, 150, 151, 152, 155, 157, 160, 161, 173, 175, 180, 182, 189, 191, 196, 197, 198, 199, 200, 205, 236, 245, 248, 249, 259, 268, 278, 282, 284, 288, 289, 290, 293, 302, 303, 324, 329, 334, 337, 338, 339, 340, 343, 344, 345, 350, 351, 354, 361, 362, 363, 364, 365, 370, 376, 390, 392, 398, 403, 404, 405, 406, 407, 408, 410, 411, 412, 414, 418, 419, 420, 421, 425, 430, 431, 433, 434, 435, 438, 439, 440, 441, 442, 445, 446, 447, 449, 450, 451, 452, 453, 456, 457, 458, 466, 474, 476, 477, 480, 483, 484, 490, 491, 493, 494, 500, 501, 510, 513, 514, 517, 525, 538, 539, 545, 549, 550, 555, 556, 559, 560, 561, 563, 565, 569, 580, 581, 582, 583, 588, 589, 593, 594, 596, 598, 604, 613, 620, 621, 634, 644, 648, 655, 656, 667, 669, 697, 702, 707, 710, 712, 713, 714, 717, 718, 719, 724, 725, 727, 728, 740, 741, 745, 773, 774, 775, 776, 777, 778, 780, 781, 782, 784, 792, 795, 796, 799, 800, 803, 805, 806, 808, 809, 810, 813, 814, 815, 816, 817, 820, 821, 822, 824, 825, 826, 827, 828, 842, 845, 846, 849, 854, 855, 864], "show": [22, 124, 137, 152, 161, 236, 545, 572, 581, 604], "variabl": [22, 83, 157, 191, 236, 569, 604, 844, 864], "chang": [22, 54, 63, 88, 89, 101, 199, 200, 236, 299, 324, 392, 404, 405, 406, 407, 408, 410, 411, 412, 525, 666, 674, 697, 762, 794, 864], "restrict": [22, 450, 825], "dictionari": [22, 78, 79, 82, 88, 89, 93, 97, 99, 162, 189, 190, 236, 667, 721, 864], "includ": [22, 24, 60, 90, 100, 110, 126, 139, 196, 199, 236, 325, 355, 448, 449, 486, 525, 555, 604, 698, 711, 823, 824, 855, 864], "those": [22, 397, 525, 767, 864], "_have_": 22, "been": [22, 239, 397, 525, 767, 864], "set_stat": 22, "all_stat": 22, "file": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 128, 236, 548, 574, 596, 604, 612, 864], "binaryio": [23, 25, 87, 88, 91, 92, 93, 96, 97, 236], "bytesio": [23, 24, 25, 28, 87, 88, 89, 91, 92, 96, 236], "path": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 236, 416, 438, 525, 574, 596, 604, 789, 813, 864], "compress": [23, 25, 28, 236, 604], "avrocompress": [23, 236], "uncompress": [23, 25, 28, 92, 102, 236, 604], "write": [23, 24, 25, 26, 28, 236, 288, 289, 290, 525, 563, 581, 596, 604, 656, 657, 658, 864], "apach": [23, 28, 87, 236], "avro": [23, 87, 236, 534], "should": [23, 24, 25, 26, 27, 28, 86, 108, 109, 111, 114, 117, 139, 151, 209, 236, 244, 249, 266, 286, 299, 333, 361, 363, 403, 404, 405, 406, 407, 408, 410, 411, 412, 415, 424, 446, 452, 500, 525, 544, 555, 560, 561, 565, 581, 596, 598, 604, 613, 632, 652, 666, 706, 773, 774, 775, 776, 777, 778, 780, 781, 782, 785, 799, 816, 821, 827, 864], "written": [23, 24, 25, 26, 27, 28, 236, 596, 604], "snappi": [23, 28, 236, 604], "deflat": [23, 236], "import": [23, 24, 25, 28, 31, 64, 77, 80, 81, 98, 99, 100, 101, 106, 107, 108, 109, 110, 111, 121, 137, 139, 151, 193, 199, 200, 236, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 491, 500, 555, 561, 565, 604, 660, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 730, 733, 737, 738, 739, 773, 797, 840, 864], "pathlib": [23, 24, 25, 26, 27, 28, 87, 91, 92, 93, 94, 95, 97, 99, 102, 103, 236, 574, 596, 604], "foo": [23, 24, 25, 26, 27, 28, 83, 117, 120, 122, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 141, 142, 143, 144, 145, 146, 148, 150, 153, 154, 155, 156, 158, 161, 162, 163, 165, 167, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 196, 198, 201, 202, 203, 207, 219, 236, 245, 264, 267, 268, 271, 272, 288, 289, 290, 321, 348, 352, 353, 393, 401, 417, 418, 430, 432, 433, 434, 437, 441, 446, 448, 450, 452, 454, 455, 461, 463, 474, 477, 479, 481, 484, 485, 494, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 516, 517, 518, 525, 541, 544, 545, 546, 551, 558, 559, 560, 575, 577, 578, 583, 588, 589, 591, 593, 594, 596, 604, 636, 656, 694, 807, 808, 809, 812, 825, 864], "bar": [23, 24, 25, 26, 27, 28, 83, 117, 120, 122, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 142, 144, 145, 146, 148, 150, 153, 154, 155, 156, 158, 161, 162, 163, 165, 167, 169, 170, 171, 173, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 198, 201, 202, 207, 219, 236, 245, 272, 353, 424, 433, 434, 448, 450, 474, 479, 481, 484, 485, 494, 498, 502, 503, 504, 505, 506, 507, 511, 512, 513, 516, 517, 518, 525, 541, 544, 545, 546, 551, 558, 559, 560, 575, 577, 578, 583, 588, 589, 591, 596, 604, 636, 799, 808, 809, 825, 864], "8": [23, 24, 25, 26, 27, 28, 38, 51, 53, 54, 55, 57, 58, 62, 105, 109, 110, 117, 120, 121, 122, 123, 124, 125, 127, 131, 132, 134, 137, 142, 144, 150, 154, 155, 156, 158, 163, 167, 169, 171, 173, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 194, 199, 201, 202, 205, 236, 248, 259, 265, 266, 293, 299, 302, 303, 354, 370, 391, 393, 394, 401, 402, 405, 406, 408, 410, 412, 419, 425, 440, 445, 453, 459, 463, 479, 484, 485, 488, 492, 494, 498, 502, 503, 504, 505, 506, 507, 512, 513, 514, 515, 516, 517, 525, 541, 544, 545, 546, 547, 551, 557, 560, 564, 565, 572, 575, 577, 578, 583, 586, 587, 592, 593, 596, 604, 631, 632, 666, 680, 762, 773, 776, 778, 779, 780, 782, 815, 820, 828, 864], "9": [23, 24, 25, 28, 54, 62, 117, 133, 140, 142, 146, 163, 177, 186, 199, 202, 204, 205, 207, 221, 236, 248, 259, 276, 279, 293, 298, 302, 303, 306, 322, 331, 332, 354, 359, 367, 370, 391, 401, 403, 405, 411, 421, 425, 463, 480, 482, 514, 525, 556, 557, 559, 564, 578, 583, 586, 592, 593, 604, 675, 684, 686, 692, 697, 698, 702, 704, 716, 736, 773, 781, 783, 796, 864], "ham": [23, 24, 25, 28, 83, 120, 122, 123, 124, 125, 131, 132, 134, 141, 142, 144, 150, 154, 155, 156, 158, 161, 163, 167, 169, 171, 173, 175, 176, 177, 179, 180, 182, 183, 184, 185, 186, 191, 192, 193, 194, 201, 202, 236, 481, 541, 544, 545, 546, 551, 560, 575, 577, 578, 583, 588, 594, 604], "d": [23, 24, 25, 28, 45, 62, 101, 121, 137, 141, 142, 145, 150, 153, 186, 188, 199, 202, 205, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 236, 308, 348, 419, 432, 437, 449, 453, 480, 525, 560, 583, 593, 604, 677, 700, 807, 812, 824, 828], "e": [23, 24, 25, 28, 45, 88, 89, 91, 92, 96, 102, 104, 121, 137, 142, 153, 186, 188, 199, 205, 236, 336, 340, 348, 373, 416, 419, 424, 493, 525, 563, 593, 604, 710, 786, 789, 799, 847, 864], "dirpath": [23, 24, 25, 28, 99, 236], "new_fil": [23, 24, 25, 28, 236], "has_head": [24, 88, 89, 91, 99, 236], "sep": [24, 85, 88, 89, 99, 236, 483], "quot": [24, 88, 89, 99, 236], "batch_siz": [24, 88, 89, 103, 236], "1024": [24, 28, 88, 89, 103, 236, 604], "datetime_format": [24, 236], "date_format": [24, 236], "time_format": [24, 236], "float_precis": [24, 236], "null_valu": [24, 88, 89, 99, 236], "_io": [24, 87, 91, 92, 236], "comma": [24, 236], "csv": [24, 88, 89, 91, 99, 236, 534, 597], "result": [24, 26, 27, 54, 78, 80, 82, 98, 99, 101, 102, 104, 111, 128, 139, 160, 180, 207, 236, 337, 338, 339, 368, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 416, 418, 448, 449, 477, 486, 487, 488, 501, 515, 525, 537, 555, 565, 572, 580, 596, 604, 612, 712, 713, 714, 745, 771, 773, 774, 775, 776, 777, 778, 780, 781, 782, 789, 792, 823, 824, 847, 864], "instead": [24, 26, 27, 86, 96, 110, 114, 117, 139, 160, 162, 236, 258, 260, 439, 477, 502, 505, 515, 525, 549, 554, 555, 596, 604, 622, 625, 787, 788, 814, 864], "whether": [24, 59, 64, 80, 82, 111, 139, 140, 236, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 604], "header": [24, 28, 88, 89, 91, 99, 125, 165, 196, 236, 604], "field": [24, 46, 198, 236, 282, 449, 450, 458, 486, 487, 589, 604, 648, 824, 825, 834], "symbol": [24, 236], "byte": [24, 39, 88, 89, 91, 92, 93, 96, 97, 99, 126, 236, 439, 442, 604, 711, 814, 817, 864], "process": [24, 236, 604], "per": [24, 109, 110, 137, 160, 161, 216, 218, 220, 223, 224, 225, 226, 227, 228, 229, 230, 236, 266, 268, 632, 634], "thread": [24, 85, 88, 89, 98, 112, 236, 266, 632], "specifi": [24, 54, 64, 71, 78, 80, 82, 110, 126, 130, 236, 337, 338, 339, 345, 400, 440, 445, 525, 550, 604, 711, 712, 713, 714, 719, 815, 820, 864], "defin": [24, 31, 64, 108, 109, 110, 117, 139, 140, 160, 164, 209, 236, 249, 404, 405, 406, 407, 408, 410, 411, 412, 476, 500, 525, 555, 556, 571, 598, 604, 613, 864], "chrono": [24, 236, 327, 453, 700, 828], "rust": [24, 28, 72, 92, 96, 117, 209, 236, 249, 525, 598], "crate": [24, 236], "fraction": [24, 106, 107, 175, 236, 325, 392, 414, 453, 525, 698, 762, 784, 864], "second": [24, 64, 139, 140, 151, 200, 236, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 453, 478, 490, 491, 525, 555, 556, 561, 604, 694, 697, 702], "precis": [24, 236, 304, 453, 673], "infer": [24, 79, 80, 82, 88, 89, 91, 99, 103, 108, 117, 236, 401, 453, 525, 771, 864], "maximum": [24, 88, 89, 99, 109, 110, 111, 154, 236, 261, 288, 289, 378, 388, 397, 502, 525, 566, 604, 627, 656, 657, 681, 750, 758, 763, 767, 864], "timeunit": [24, 31, 32, 64, 236, 304, 328, 333, 673, 701, 706, 842, 864], "frame": [24, 54, 91, 110, 117, 160, 164, 193, 199, 236, 571, 604], "datetim": [24, 39, 64, 81, 121, 137, 139, 140, 151, 200, 236, 264, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 404, 405, 406, 407, 408, 410, 411, 412, 453, 466, 480, 491, 500, 505, 525, 555, 556, 561, 604, 630, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 730, 750, 753, 758, 759, 788, 828, 842, 849, 864], "decim": [24, 236, 413, 525, 783, 864], "place": [24, 123, 144, 145, 170, 179, 180, 183, 202, 236, 258, 260, 270, 277, 417, 418, 525, 579, 580, 583, 604, 622, 625, 636, 643, 768, 770, 791, 792, 801, 864], "appli": [24, 59, 62, 99, 108, 110, 111, 124, 133, 164, 207, 236, 306, 309, 311, 312, 314, 316, 318, 319, 322, 323, 325, 331, 332, 335, 338, 339, 376, 391, 403, 404, 405, 407, 411, 453, 474, 477, 486, 487, 495, 501, 509, 525, 545, 557, 564, 565, 571, 604, 675, 678, 680, 684, 686, 689, 691, 692, 695, 696, 698, 704, 705, 708, 713, 714, 773, 774, 775, 777, 781, 828, 864], "float64": [24, 86, 110, 114, 125, 126, 133, 137, 176, 236, 250, 251, 252, 253, 254, 255, 285, 291, 292, 325, 340, 361, 363, 422, 423, 464, 465, 480, 481, 493, 525, 546, 577, 604, 698], "datatyp": [24, 26, 39, 46, 52, 79, 84, 86, 88, 89, 91, 93, 97, 108, 109, 110, 111, 114, 117, 125, 133, 176, 236, 249, 285, 340, 376, 419, 453, 466, 476, 477, 481, 493, 500, 501, 525, 534, 546, 565, 577, 596, 598, 604, 613, 650, 667, 709, 727, 730, 742, 744, 793, 828, 849, 864], "repres": [24, 40, 52, 64, 77, 78, 80, 81, 82, 236, 361, 363, 481, 500, 525, 788, 803, 854, 864], "null": [24, 54, 62, 79, 88, 89, 99, 101, 121, 124, 130, 133, 134, 146, 150, 155, 156, 161, 167, 179, 180, 183, 184, 185, 189, 198, 201, 236, 245, 248, 258, 260, 265, 267, 268, 271, 277, 282, 284, 288, 289, 290, 293, 300, 302, 303, 307, 310, 313, 315, 317, 320, 326, 337, 338, 339, 340, 343, 344, 345, 346, 350, 354, 361, 362, 363, 364, 365, 370, 390, 392, 398, 403, 404, 405, 406, 407, 408, 410, 411, 412, 417, 418, 419, 421, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 445, 447, 449, 450, 451, 456, 466, 473, 474, 480, 482, 483, 493, 500, 514, 525, 545, 550, 559, 560, 579, 580, 583, 589, 594, 596, 604, 613, 622, 625, 631, 643, 648, 656, 668, 671, 676, 679, 685, 687, 690, 693, 699, 712, 713, 714, 717, 719, 724, 740, 741, 761, 762, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 786, 791, 792, 796, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 820, 822, 824, 825, 826, 847, 849, 855, 864], "empti": [24, 69, 91, 118, 119, 148, 157, 236, 511, 538, 539, 569, 604, 655, 659, 732, 864], "ipccompress": [25, 236], "arrow": [25, 65, 77, 92, 102, 188, 219, 236, 843, 847, 864], "ipc": [25, 92, 93, 101, 102, 236, 534], "binari": [25, 236], "stream": [25, 61, 236, 540, 542, 548, 572, 581, 604], "feather": [25, 92, 102, 236, 534], "lz4": [25, 28, 236, 604], "zstd": [25, 28, 236, 604], "pretti": [26, 236], "row_ori": [26, 236], "json_lin": [26, 94, 236], "to_str": [26, 236, 596, 604], "io": [26, 27, 94, 95, 236, 574, 596, 604, 871], "iobas": [26, 27, 94, 95, 236, 574, 596, 604], "serial": [26, 27, 236], "represent": [26, 27, 236, 286, 306, 309, 311, 312, 314, 316, 318, 319, 322, 323, 325, 331, 332, 335, 466, 525, 542, 543, 563, 604, 652, 675, 678, 680, 684, 686, 689, 691, 692, 695, 696, 698, 704, 705, 708, 849, 864], "orient": [26, 55, 57, 80, 82, 236], "slower": [26, 80, 82, 117, 162, 200, 209, 236, 249, 525, 598], "common": [26, 236], "deprec": [26, 61, 94, 236, 239, 596, 604], "argument": [26, 28, 61, 88, 90, 94, 96, 100, 139, 140, 155, 163, 164, 165, 185, 193, 200, 236, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 571, 596, 604, 697, 702, 864], "toggl": [26, 94, 113, 236, 453, 828], "ndjson": [26, 94, 236], "ignor": [26, 61, 110, 111, 155, 185, 236, 265, 300, 388, 389, 525, 596, 604, 631, 668, 758, 759, 864], "write_ndjson": [26, 236], "newlin": [27, 95, 103, 236], "delimit": [27, 88, 89, 95, 99, 103, 236, 430, 805], "parquetcompress": [28, 236], "compression_level": [28, 236, 604], "statist": [28, 88, 89, 121, 236, 338, 339, 368, 404, 405, 406, 407, 408, 409, 410, 411, 412, 424, 525, 604, 667, 713, 714, 745, 779, 799, 864], "row_group_s": [28, 236, 604], "use_pyarrow": [28, 88, 92, 96, 236, 604, 846, 864], "pyarrow_opt": [28, 90, 96, 100, 236], "object": [28, 64, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 109, 110, 111, 152, 193, 236, 500, 534, 539, 554, 558, 563, 574, 604, 626, 651, 672, 804, 843, 864], "parquet": [28, 96, 97, 104, 236, 534, 604], "gzip": [28, 236, 604], "lzo": [28, 236, 604], "brotli": [28, 236, 604], "choos": [28, 236, 604], "good": [28, 236, 604], "perform": [28, 69, 88, 89, 92, 96, 99, 102, 103, 104, 117, 139, 140, 151, 168, 209, 236, 249, 525, 555, 556, 561, 595, 598, 604], "fast": [28, 236, 416, 525, 604, 789, 864], "decompress": [28, 236, 604], "backward": [28, 130, 151, 236, 284, 345, 525, 550, 561, 604, 719, 864], "guarante": [28, 88, 89, 236, 548, 604], "deal": [28, 236, 397, 453, 525, 604, 767, 828, 864], "older": [28, 236, 604], "reader": [28, 85, 88, 89, 92, 96, 236, 535, 604], "level": [28, 99, 102, 103, 104, 110, 117, 133, 160, 236, 346, 525, 557, 564, 604], "higher": [28, 167, 220, 236, 396, 408, 508, 525, 573, 604, 766, 778, 864], "mean": [28, 83, 88, 89, 96, 99, 121, 130, 165, 191, 236, 342, 345, 348, 405, 424, 436, 479, 525, 550, 604, 667, 716, 719, 724, 775, 799, 811, 864], "smaller": [28, 126, 236, 548, 604, 711, 864], "disk": [28, 236, 581, 604], "min": [28, 110, 111, 121, 130, 139, 140, 165, 236, 288, 290, 296, 345, 397, 407, 511, 525, 550, 555, 556, 604, 656, 658, 663, 667, 719, 767, 777, 864], "11": [28, 138, 140, 236, 302, 303, 321, 324, 329, 354, 392, 411, 425, 456, 481, 515, 525, 540, 554, 556, 557, 564, 572, 586, 604, 613, 694, 697, 702, 773, 864], "22": [28, 236, 324, 329, 333, 453, 481, 604, 697, 702, 706, 828], "extra": [28, 88, 90, 91, 92, 96, 100, 102, 104, 128, 162, 236, 604, 612, 864], "comput": [28, 61, 62, 66, 126, 151, 197, 220, 236, 243, 250, 251, 252, 253, 254, 255, 273, 274, 275, 291, 292, 294, 295, 296, 297, 298, 301, 336, 341, 368, 373, 374, 386, 392, 395, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 422, 423, 424, 428, 464, 465, 485, 492, 507, 512, 525, 558, 560, 561, 588, 594, 604, 608, 614, 615, 616, 617, 618, 619, 639, 640, 641, 660, 661, 662, 663, 664, 665, 669, 710, 711, 715, 745, 748, 749, 754, 762, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 796, 797, 798, 799, 802, 840, 841, 864], "size": [28, 88, 89, 109, 110, 111, 112, 126, 139, 199, 236, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 477, 525, 555, 604, 711, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 864], "group": [28, 138, 139, 140, 160, 162, 165, 199, 200, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236, 244, 249, 266, 391, 426, 427, 436, 462, 476, 525, 554, 555, 556, 597, 598, 599, 600, 604, 632, 811], "chunk": [28, 85, 88, 89, 99, 102, 103, 104, 110, 111, 128, 159, 236, 248, 398, 525, 604, 612, 654, 723, 755, 768, 843, 864], "reduc": [28, 88, 89, 96, 99, 102, 103, 104, 214, 215, 217, 221, 236, 419, 495, 525, 604, 751, 765, 793, 836, 864], "memori": [28, 62, 77, 80, 81, 82, 88, 89, 92, 96, 99, 102, 103, 104, 117, 128, 181, 209, 219, 236, 249, 398, 419, 525, 598, 604, 612, 768, 793, 794, 864], "pressur": [28, 96, 103, 104, 236, 419, 525, 604, 793, 864], "improv": [28, 92, 102, 236, 604], "speed": [28, 236, 604], "minimum": [28, 109, 110, 111, 133, 158, 236, 288, 290, 337, 338, 339, 385, 389, 397, 505, 525, 570, 604, 656, 658, 688, 712, 713, 714, 759, 764, 767, 864], "64": [28, 34, 37, 50, 56, 58, 236, 393, 525, 604, 762, 864], "implement": [28, 100, 117, 209, 236, 249, 525, 598, 787, 788, 864], "v": [28, 63, 126, 236, 415, 525, 785, 864], "At": [28, 236], "moment": [28, 163, 236, 368, 424, 525, 745, 799, 864], "pass": [28, 54, 64, 78, 91, 100, 109, 110, 111, 163, 164, 236, 308, 353, 525, 558, 565, 571, 581, 604, 613, 677, 864], "pyarrow": [28, 77, 81, 88, 90, 92, 96, 100, 101, 105, 188, 192, 193, 236, 535, 843, 846, 847, 864], "write_t": [28, 236], "base": [29, 124, 131, 139, 140, 219, 236, 336, 373, 374, 502, 505, 525, 534, 545, 551, 555, 556, 604, 710, 748, 749, 856, 864], "calendar": [30, 31, 139, 140, 151, 200, 236, 311, 321, 324, 329, 335, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 604, 680, 694, 697, 702, 708], "date": [31, 39, 54, 64, 88, 89, 99, 101, 121, 137, 139, 140, 151, 193, 236, 264, 304, 306, 307, 308, 309, 310, 311, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 355, 404, 405, 406, 407, 408, 410, 411, 412, 453, 466, 480, 505, 525, 534, 555, 556, 561, 604, 630, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 730, 750, 753, 758, 759, 788, 828, 849, 864], "time": [31, 32, 39, 60, 61, 64, 99, 128, 139, 140, 151, 200, 236, 263, 264, 282, 304, 305, 308, 321, 328, 330, 333, 334, 453, 466, 467, 482, 483, 489, 490, 491, 510, 525, 534, 540, 555, 556, 561, 572, 604, 612, 629, 673, 674, 677, 694, 701, 703, 706, 707, 828, 842, 849, 850, 864], "time_unit": [31, 32, 64, 333, 706, 864], "u": [31, 32, 64, 304, 308, 328, 333, 453, 510, 673, 677, 701, 706, 842, 864], "time_zon": [31, 64], "m": [31, 32, 64, 162, 236, 304, 308, 328, 333, 453, 491, 673, 677, 700, 701, 706, 828, 842, 864], "unit": [31, 32, 64, 110, 111, 126, 236, 304, 308, 328, 333, 375, 382, 470, 525, 572, 604, 673, 677, 701, 706, 711, 842, 864], "timezon": [31, 64, 453, 828], "zoneinfo": 31, "run": [31, 61, 117, 152, 209, 236, 249, 266, 299, 510, 511, 525, 540, 548, 572, 581, 598, 604, 632, 666, 864, 870], "available_timezon": 31, "full": [31, 60, 88, 89, 90, 99, 100], "attribut": [31, 32, 39, 108, 236, 519, 521, 526, 529, 530, 531, 604, 857, 860, 864, 867, 868, 869], "delta": [32, 90, 100, 507, 512, 534, 803, 854, 864], "32": [33, 36, 49, 56, 105, 140, 236, 419, 525, 556, 604, 669, 695, 762, 778, 864], "bit": [33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 399, 431, 525, 769, 806, 864], "float": [33, 34, 39, 63, 101, 106, 107, 108, 110, 111, 126, 129, 151, 167, 175, 180, 220, 236, 264, 287, 288, 289, 290, 302, 303, 325, 336, 337, 338, 339, 343, 344, 349, 354, 355, 357, 360, 361, 363, 364, 365, 373, 378, 385, 388, 389, 393, 396, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 418, 479, 480, 488, 502, 503, 504, 505, 508, 510, 513, 515, 517, 525, 549, 561, 573, 580, 581, 604, 630, 650, 653, 656, 657, 658, 669, 698, 710, 711, 712, 713, 714, 717, 718, 722, 735, 745, 748, 750, 751, 752, 753, 758, 759, 765, 766, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 787, 788, 799, 803, 836, 854, 864], "point": [33, 34, 100, 110, 111, 129, 139, 152, 175, 236, 287, 302, 303, 325, 344, 349, 361, 363, 413, 414, 525, 549, 555, 565, 604, 653, 698, 718, 722, 735, 783, 784, 864], "16": [35, 48, 56, 105, 139, 140, 204, 205, 236, 354, 405, 491, 492, 525, 555, 556, 581, 592, 593, 604, 697, 702, 762, 797, 840, 864], "sign": [35, 36, 37, 38, 321, 399, 456, 525, 694, 769, 831, 864], "integ": [35, 36, 37, 38, 48, 49, 50, 51, 109, 110, 139, 140, 236, 287, 325, 349, 399, 404, 405, 406, 407, 408, 409, 410, 411, 412, 477, 500, 525, 555, 556, 604, 620, 621, 653, 698, 722, 769, 779, 788, 864], "inner": [39, 45, 150, 236, 270, 301, 525, 560, 596, 604, 636, 669, 727, 864], "union": [39, 46, 54, 61, 62, 78, 79, 84, 86, 108, 109, 110, 111, 114, 117, 122, 124, 125, 127, 138, 154, 155, 157, 158, 160, 162, 169, 176, 177, 183, 185, 196, 198, 200, 205, 207, 236, 249, 285, 340, 359, 376, 453, 474, 475, 477, 478, 480, 481, 482, 483, 487, 488, 493, 501, 502, 505, 509, 511, 514, 515, 525, 540, 547, 548, 554, 565, 572, 577, 578, 581, 583, 593, 597, 598, 604, 613, 650, 669, 736, 788, 828, 864], "datatypeclass": [39, 46, 79, 84, 86, 108, 109, 110, 111, 114, 117, 125, 176, 236, 249, 285, 376, 477, 481, 525, 565, 577, 598, 604, 613, 650, 864], "timedelta": [39, 64, 139, 140, 200, 236, 306, 308, 309, 316, 318, 321, 322, 323, 324, 325, 328, 329, 331, 332, 335, 404, 405, 406, 407, 408, 410, 411, 412, 480, 525, 555, 556, 604, 681, 683, 688, 694, 697, 702, 750, 753, 758, 759, 864], "nest": [39, 45, 126, 236, 534, 711, 864], "arrai": [39, 77, 80, 88, 89, 126, 188, 192, 236, 263, 272, 273, 274, 275, 276, 279, 280, 288, 289, 290, 294, 295, 296, 297, 298, 374, 404, 405, 407, 410, 411, 412, 416, 432, 434, 436, 437, 438, 482, 492, 525, 629, 638, 639, 640, 641, 642, 645, 646, 656, 657, 658, 662, 663, 664, 665, 669, 711, 749, 774, 775, 777, 780, 781, 782, 789, 794, 807, 809, 811, 812, 813, 843, 847, 855, 864], "within": [39, 106, 107, 151, 236, 561, 604], "wrap": [41, 100], "arbitrari": [41, 110], "python": [41, 64, 88, 89, 105, 117, 174, 209, 236, 249, 376, 476, 525, 598, 613, 681, 682, 683, 688, 846, 864], "queri": [42, 61, 92, 98, 99, 102, 103, 104, 128, 152, 164, 236, 282, 438, 540, 542, 543, 548, 557, 564, 572, 581, 595, 598, 604, 612, 813, 864, 870], "pars": [42, 88, 89, 91, 99, 102, 103, 453, 828], "given": [42, 44, 54, 63, 86, 88, 89, 99, 108, 109, 110, 111, 114, 117, 126, 164, 173, 179, 180, 236, 264, 277, 328, 336, 343, 373, 397, 400, 401, 404, 405, 407, 410, 411, 412, 417, 418, 437, 453, 467, 474, 525, 571, 579, 580, 604, 613, 630, 643, 701, 710, 711, 717, 748, 760, 767, 771, 774, 775, 777, 780, 781, 782, 791, 792, 812, 828, 850, 856, 864], "transform": [42, 117, 236, 376, 454, 455, 525], "lf": [44, 546, 551, 577, 591, 604], "under": [44, 55, 56, 57, 58, 519, 521, 526, 529, 530, 531, 857, 860, 867, 868, 869], "add": [44, 117, 128, 139, 205, 206, 236, 394, 459, 491, 518, 525, 555, 560, 592, 593, 594, 595, 604, 612, 864], "context": [45, 160, 236, 244, 249, 266, 346, 381, 426, 427, 471, 476, 484, 494, 511, 524, 525, 594, 604, 632], "manag": 45, "categor": [45, 83, 113, 150, 236, 286, 466, 525, 651, 652, 849, 864], "temporarili": [45, 139, 140, 236, 555, 556, 604], "cach": [45, 61, 92, 99, 102, 104, 113, 404, 405, 406, 407, 408, 410, 411, 412, 453, 525, 540, 548, 572, 581, 604, 828], "categori": [45, 63, 113, 286, 652], "until": [45, 152, 236], "finish": [45, 66, 128, 236, 612, 864], "global": [45, 110, 113], "invalid": [45, 88, 89, 99, 433, 438, 808, 813], "outermost": 45, "exit": 45, "df1": [45, 54, 62, 106, 128, 134, 202, 236], "color": [45, 209, 598], "red": [45, 209, 598], "green": [45, 209, 598], "blue": 45, "orang": [45, 120, 210, 211, 213, 214, 215, 217, 220, 221, 236], "uint8": [45, 108, 297, 298, 460, 525, 664, 665, 836, 864], "df2": [45, 54, 62, 106, 128, 134, 202, 236], "yellow": 45, "black": [45, 117, 236], "join": [45, 54, 61, 151, 236, 354, 391, 525, 540, 548, 561, 572, 581, 594, 604], "succe": [45, 88, 89, 99], "df_join": 45, "how": [45, 62, 79, 82, 98, 124, 150, 199, 236, 265, 286, 300, 354, 400, 433, 525, 545, 560, 604, 631, 652, 668, 808, 864], "cat": [45, 63, 431, 454, 455, 466, 483, 521, 525, 806, 860], "u8": [45, 83, 191, 236, 844, 864], "sequenc": [46, 54, 61, 62, 78, 79, 80, 82, 85, 109, 110, 111, 122, 124, 127, 128, 138, 139, 140, 150, 151, 157, 160, 162, 164, 165, 177, 183, 191, 196, 197, 198, 199, 200, 205, 207, 236, 340, 359, 376, 474, 475, 476, 478, 480, 481, 482, 483, 486, 487, 488, 493, 495, 501, 502, 505, 509, 511, 514, 515, 525, 547, 554, 555, 556, 560, 561, 571, 578, 583, 593, 597, 604, 612, 669, 736, 788, 864], "composit": 46, "make": [46, 62, 77, 81, 88, 89, 92, 96, 98, 102, 104, 138, 139, 140, 160, 168, 200, 236, 330, 338, 339, 400, 449, 456, 525, 554, 555, 556, 604, 703, 713, 714, 824, 831, 864], "up": [46, 151, 236, 287, 456, 525, 560, 561, 565, 604, 653, 831, 864], "dai": [47, 64, 139, 140, 151, 200, 236, 308, 318, 321, 322, 323, 324, 328, 329, 331, 332, 335, 404, 405, 406, 407, 408, 410, 411, 412, 489, 490, 491, 525, 555, 556, 561, 604, 694, 695, 697, 702, 705], "unsign": [48, 49, 50, 51, 399, 525, 769, 864], "could": [52, 66, 124, 139, 236, 285, 486, 495, 525, 545, 555, 604, 650, 864], "determin": [52, 54, 62, 79, 82, 88, 89, 91, 96, 104, 117, 133, 139, 140, 196, 200, 236, 282, 286, 381, 400, 404, 405, 406, 407, 408, 410, 411, 412, 424, 478, 525, 555, 556, 604, 648, 652, 799, 864], "static": [52, 598], "utf": 53, "intern": [54, 59, 64, 91, 189, 236, 477, 488, 502, 505, 510, 514, 515, 626, 651, 672, 804], "revers": [54, 126, 183, 236, 258, 260, 279, 294, 295, 296, 297, 298, 377, 394, 397, 416, 426, 427, 459, 467, 478, 525, 583, 604, 622, 625, 645, 662, 663, 664, 665, 767, 789, 801, 850, 864], "uniqu": [54, 108, 109, 111, 149, 160, 218, 236, 259, 358, 366, 387, 453, 469, 471, 506, 525, 604, 624, 667, 734, 743, 756, 828, 852, 853, 864], "kei": [54, 60, 139, 151, 162, 165, 169, 172, 219, 236, 555, 561, 575, 576, 604], "contain": [54, 60, 78, 81, 90, 100, 160, 165, 236, 359, 432, 435, 436, 437, 438, 450, 451, 525, 572, 604, 721, 755, 807, 810, 811, 812, 813, 825, 826, 843, 864], "have": [54, 88, 89, 91, 106, 110, 111, 113, 128, 168, 219, 236, 299, 337, 338, 339, 382, 397, 525, 581, 595, 604, 612, 666, 674, 712, 713, 714, 724, 767, 864], "inject": 54, "fill": [54, 62, 86, 114, 129, 130, 180, 199, 236, 284, 343, 344, 345, 350, 354, 404, 405, 407, 410, 411, 412, 418, 440, 445, 456, 496, 525, 549, 550, 580, 594, 604, 717, 718, 719, 760, 774, 775, 777, 780, 781, 782, 792, 815, 820, 831, 864], "non": [54, 157, 236, 392, 403, 404, 405, 406, 407, 408, 410, 411, 412, 432, 437, 480, 483, 525, 569, 604, 762, 773, 774, 775, 776, 777, 778, 780, 781, 782, 807, 812, 847, 864], "each": [54, 103, 106, 107, 109, 117, 137, 151, 209, 210, 212, 222, 236, 249, 269, 281, 324, 329, 348, 397, 437, 449, 450, 476, 525, 561, 572, 598, 599, 600, 604, 635, 647, 654, 697, 702, 767, 812, 824, 825, 864], "sort": [54, 55, 138, 139, 140, 151, 162, 164, 165, 200, 207, 212, 222, 236, 258, 260, 286, 346, 416, 427, 471, 473, 478, 525, 543, 555, 556, 561, 571, 572, 581, 599, 600, 604, 622, 625, 652, 789, 851, 853, 864], "origin": [54, 88, 89, 197, 236, 367, 399, 432, 436, 437, 438, 440, 445, 456, 525, 588, 604, 807, 811, 812, 813, 815, 820, 831], "order": [54, 106, 138, 139, 140, 162, 164, 165, 175, 197, 200, 236, 258, 260, 286, 397, 414, 415, 416, 426, 427, 458, 468, 469, 478, 525, 554, 555, 556, 583, 588, 604, 622, 625, 652, 767, 772, 784, 785, 789, 834, 851, 852, 864], "unless": [54, 78, 855, 864], "case": [54, 104, 117, 128, 139, 140, 236, 376, 381, 382, 518, 525, 555, 556, 604, 612, 864], "final": [54, 104, 548, 604], "doe": [54, 73, 80, 82, 88, 89, 90, 91, 99, 100, 101, 106, 107, 128, 236, 330, 333, 458, 469, 494, 525, 548, 554, 565, 604, 612, 703, 706, 724, 794, 855, 864], "receiv": [54, 117, 164, 236, 571, 604], "now": [54, 140, 236, 556, 604], "ha": [54, 100, 200, 236, 239, 249, 299, 367, 382, 467, 476, 525, 538, 598, 604, 655, 666, 724, 735, 850, 864], "whose": [54, 151, 165, 236, 340, 493, 525, 561, 604], "post": 54, "constrain": 54, "newli": 54, "descend": [54, 183, 236, 258, 260, 416, 525, 583, 604, 622, 625, 789, 864], "singl": [54, 62, 88, 89, 98, 99, 109, 124, 128, 135, 183, 207, 236, 321, 346, 376, 398, 401, 430, 446, 452, 473, 476, 481, 501, 510, 525, 545, 583, 597, 604, 612, 694, 768, 771, 805, 816, 821, 827, 843, 864], "boolean": [54, 59, 131, 133, 137, 205, 236, 246, 247, 264, 346, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 473, 525, 551, 593, 604, 610, 611, 623, 630, 720, 729, 731, 733, 734, 736, 737, 738, 739, 740, 741, 743, 763, 764, 787, 806, 856, 864], "associ": 54, "2022": [54, 64, 105, 121, 137, 236, 453, 491, 680, 828], "x": [54, 88, 89, 99, 109, 110, 126, 144, 147, 149, 150, 157, 236, 249, 263, 270, 351, 376, 400, 424, 449, 466, 488, 515, 525, 560, 565, 569, 582, 604, 609, 613, 719, 744, 799, 824, 849, 864], "y": [54, 109, 110, 126, 147, 149, 150, 157, 236, 263, 270, 400, 453, 488, 515, 525, 560, 569, 582, 604, 609, 700, 828, 864], "12": [54, 63, 64, 139, 140, 151, 200, 236, 297, 309, 318, 323, 324, 329, 335, 392, 419, 489, 490, 525, 555, 556, 557, 561, 564, 581, 586, 604, 613, 691, 697, 702, 783, 864], "df3": [54, 236], "09": [54, 140, 236, 556, 604, 675], "01": [54, 64, 121, 137, 139, 140, 200, 236, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 453, 491, 555, 556, 604, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 828], "02": [54, 64, 137, 139, 140, 200, 236, 304, 308, 309, 310, 316, 317, 318, 325, 326, 328, 331, 333, 413, 491, 525, 555, 556, 604, 673, 677, 678, 679, 681, 682, 683, 684, 686, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706], "03": [54, 64, 139, 140, 200, 236, 304, 307, 308, 310, 317, 318, 324, 325, 326, 328, 329, 331, 333, 334, 555, 556, 604, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 686, 688, 690, 691, 692, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707], "af1": 54, "af2": 54, "af3": 54, "keep": [54, 88, 89, 99, 162, 197, 200, 236, 367, 480, 525, 588, 604], "easili": 54, "calcul": [54, 139, 236, 265, 300, 337, 338, 339, 368, 375, 409, 424, 470, 525, 555, 604, 631, 668, 712, 713, 714, 745, 779, 799, 803, 854, 864], "wise": [54, 124, 133, 236, 250, 251, 252, 253, 254, 255, 291, 292, 341, 374, 421, 422, 423, 464, 465, 486, 487, 495, 509, 525, 545, 604, 614, 615, 616, 617, 618, 619, 660, 661, 715, 749, 796, 797, 798, 840, 841, 864], "dot": [54, 525, 581, 604, 864], "product": [54, 163, 236, 297, 301, 525, 664, 669, 864], "fill_nul": [54, 129, 236, 453, 525, 549, 594, 604, 828, 864], "sum": [54, 126, 133, 138, 140, 165, 207, 236, 249, 282, 297, 298, 336, 346, 391, 404, 405, 407, 410, 411, 412, 473, 474, 486, 488, 495, 505, 525, 540, 543, 548, 554, 556, 572, 581, 604, 664, 665, 710, 711, 774, 775, 777, 780, 781, 782, 864], "167": 54, "47": 54, "callabl": [55, 56, 57, 58, 99, 117, 133, 164, 209, 236, 249, 282, 376, 377, 403, 476, 486, 487, 495, 501, 509, 525, 565, 571, 598, 604, 613, 648, 773, 864], "decor": [55, 56, 57, 58, 110, 111], "access": [55, 56, 57, 58, 594, 604], "by_first_letter_of_column_nam": 55, "f": [55, 100, 117, 121, 124, 137, 153, 188, 196, 199, 209, 236, 249, 282, 376, 377, 419, 453, 476, 482, 486, 487, 495, 501, 509, 525, 545, 565, 593, 598, 604, 648, 828], "fromkei": [55, 57], "by_first_letter_of_column_valu": 55, "starts_with": [55, 431, 435, 810], "slice": [55, 61, 126, 236, 269, 281, 403, 404, 405, 406, 407, 408, 410, 411, 412, 525, 540, 548, 565, 572, 581, 604, 635, 647, 711, 773, 774, 775, 776, 777, 778, 780, 781, 782, 864], "to_seri": [55, 59, 236, 282, 648], "xx": [55, 57], "xy": [55, 57], "yy": [55, 57], "yz": [55, 57], "a1": [55, 57], "a2": [55, 57], "b1": [55, 57], "b2": [55, 57], "pow_n": 56, "powersofn": 56, "next": [56, 284, 397, 525, 767, 864], "p": 56, "ceil": [56, 525, 864], "previou": [56, 392, 525, 762, 864], "floor": [56, 525, 864], "nearest": [56, 151, 167, 220, 236, 287, 349, 396, 408, 508, 525, 561, 573, 604, 653, 722, 766, 778, 864], "round": [56, 287, 349, 464, 525, 653, 722, 864], "24": [56, 117, 126, 140, 236, 297, 299, 310, 525, 556, 604, 666, 679, 864], "55": 56, "001": [56, 313, 315, 320, 491, 685, 687, 693], "next_pow2": 56, "prev_pow2": 56, "nearest_pow2": 56, "128": [56, 762, 864], "split_by_column_dtyp": 57, "dtype": [57, 79, 86, 88, 89, 99, 108, 109, 110, 111, 114, 139, 140, 151, 193, 236, 249, 250, 251, 252, 253, 254, 255, 258, 260, 261, 262, 263, 270, 285, 288, 289, 290, 291, 292, 297, 298, 307, 310, 313, 315, 317, 320, 326, 333, 340, 342, 348, 375, 376, 399, 400, 404, 405, 406, 407, 408, 410, 411, 412, 419, 422, 423, 430, 447, 460, 462, 464, 465, 466, 470, 471, 476, 477, 481, 482, 484, 493, 500, 501, 514, 525, 555, 556, 561, 604, 627, 628, 629, 636, 650, 655, 656, 657, 658, 664, 665, 676, 679, 685, 687, 690, 693, 699, 706, 711, 716, 727, 732, 772, 786, 793, 805, 822, 828, 836, 847, 848, 849, 864], "collect": [57, 61, 100, 101, 152, 188, 236, 249, 391, 477, 482, 510, 514, 525, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 557, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 590, 592, 593, 594, 595, 598, 604], "i16": [57, 419, 525], "i32": [57, 79, 110, 177, 236, 285, 335, 419, 518, 525, 578, 604, 680, 708], "f32": [57, 236, 266, 397, 419, 492, 525, 632, 767, 864], "31": [58, 105, 306, 307, 318, 331, 453, 489, 490, 675, 676, 828], "42": [58, 140, 141, 236, 556, 604, 725, 864], "25": [58, 64, 139, 140, 151, 200, 204, 205, 236, 324, 329, 335, 555, 556, 561, 567, 590, 592, 593, 604, 697, 702, 710, 762, 864], "961": 58, "1764": 58, "4160": 58, "27": [58, 221, 323, 335, 393, 525], "125": [58, 762, 864], "condit": [59, 124, 131, 173, 236, 435, 451, 545, 551, 604], "eager": [59, 139, 199, 236, 477, 500, 510, 514, 524, 534, 555, 604], "indic": [59, 83, 87, 88, 89, 92, 96, 99, 108, 109, 111, 139, 140, 236, 357, 360, 361, 363, 364, 365, 404, 405, 406, 407, 408, 410, 411, 412, 415, 421, 462, 525, 555, 556, 604, 733, 737, 738, 739, 740, 741, 785, 796, 838, 864], "where": [59, 98, 124, 128, 157, 204, 236, 332, 336, 415, 424, 512, 518, 525, 569, 604, 612, 623, 705, 710, 785, 799, 803, 854, 856, 864], "evalu": [59, 129, 131, 151, 205, 236, 299, 353, 355, 359, 475, 477, 492, 514, 525, 551, 558, 560, 561, 592, 593, 604, 623, 666, 856, 864], "eagerli": [59, 510], "oppos": 59, "lazili": [59, 88, 89, 99, 100, 102, 103, 104], "u32": [59, 139, 161, 206, 210, 218, 221, 236, 244, 256, 257, 258, 259, 260, 261, 262, 272, 293, 294, 306, 309, 316, 318, 322, 323, 325, 331, 332, 370, 387, 390, 397, 415, 432, 439, 442, 466, 469, 484, 506, 525, 555, 595, 604, 622, 623, 624, 638, 650, 675, 678, 684, 686, 689, 691, 692, 695, 696, 698, 704, 705, 767, 807, 814, 817, 849, 852, 853, 864], "build": 60, "wa": 60, "compil": [60, 261, 262, 627, 628], "gate": 60, "info": [60, 90, 100, 105], "otherwis": [60, 177, 236, 288, 289, 290, 337, 338, 339, 399, 518, 525, 578, 604, 613, 656, 657, 658, 712, 713, 714, 769, 787, 788, 864], "version": [60, 90, 100, 105, 239, 509], "follow": [60, 88, 89, 90, 98, 99, 100, 117, 139, 140, 151, 164, 200, 236, 249, 321, 324, 329, 348, 397, 404, 405, 406, 407, 408, 410, 411, 412, 476, 519, 521, 525, 526, 529, 530, 531, 554, 555, 556, 561, 571, 604, 694, 697, 702, 767, 787, 788, 857, 860, 864, 867, 868, 869, 871], "depend": [60, 105, 249, 261, 262, 381, 397, 476, 494, 525, 627, 628, 767, 864], "host": [60, 88, 92, 96, 102, 104], "git": 60, "lazy_fram": 61, "type_coercion": [61, 540, 542, 548, 572, 581, 604], "predicate_pushdown": [61, 540, 542, 548, 565, 572, 581, 604], "projection_pushdown": [61, 540, 542, 548, 565, 572, 581, 604], "simplify_express": [61, 540, 542, 548, 572, 581, 604], "string_cach": 61, "no_optim": [61, 540, 548, 565, 572, 604], "slice_pushdown": [61, 540, 542, 548, 565, 572, 581, 604], "common_subplan_elimin": [61, 540, 542, 548, 572, 581, 604], "multipl": [61, 62, 88, 89, 99, 102, 104, 109, 111, 126, 128, 131, 139, 144, 162, 165, 183, 205, 207, 236, 340, 382, 386, 401, 404, 405, 406, 407, 408, 410, 411, 412, 427, 478, 486, 487, 493, 495, 501, 509, 518, 525, 544, 551, 555, 583, 593, 597, 604, 612, 711, 754, 771, 864], "graph": [61, 152, 236, 558, 594, 604], "parallel": [61, 62, 85, 96, 98, 104, 139, 151, 152, 164, 236, 266, 299, 525, 534, 555, 560, 561, 604, 632, 666, 864], "threadpool": 61, "coercion": [61, 400, 525, 540, 548, 572, 581, 604], "optim": [61, 96, 99, 102, 103, 104, 152, 164, 168, 236, 540, 542, 548, 565, 572, 581, 595, 604], "predic": [61, 99, 101, 102, 103, 104, 131, 173, 236, 346, 473, 518, 525, 540, 548, 551, 565, 572, 581, 595, 604, 720, 787, 788, 864], "pushdown": [61, 540, 548, 565, 572, 581, 595, 604, 787, 788, 864], "project": [61, 99, 100, 102, 103, 104, 249, 426, 427, 525, 540, 548, 565, 572, 581, 596, 604], "simplifi": [61, 540, 548, 572, 581, 604], "turn": [61, 88, 89, 99, 113, 348, 471, 525, 540, 548, 565, 572, 604], "off": [61, 88, 89, 99, 113, 471, 525, 540, 548, 565, 572, 604], "Will": [61, 196, 236, 502, 505, 540, 548, 572, 581, 604, 864], "try": [61, 74, 75, 88, 89, 91, 92, 96, 99, 102, 104, 540, 548, 572, 581, 604], "branch": [61, 540, 548, 572, 581, 604], "subplan": [61, 540, 548, 572, 581, 604], "occur": [61, 386, 397, 525, 540, 548, 572, 581, 604, 754, 767, 864], "part": [61, 77, 449, 450, 540, 548, 572, 581, 594, 604, 675, 678, 684, 686, 689, 691, 692, 698, 708, 824, 825], "fashion": [61, 150, 236, 540, 548, 572, 581, 604], "alpha": [61, 337, 338, 339, 525, 540, 548, 572, 581, 604, 712, 713, 714, 864], "item": [62, 175, 236, 264, 268, 270, 342, 348, 414, 450, 525, 630, 634, 636, 716, 784, 825, 864], "rechunk": [62, 77, 81, 88, 89, 92, 96, 99, 102, 103, 104, 128, 236, 525, 612, 654, 755, 864], "concatmethod": 62, "vertic": [62, 128, 199, 202, 236, 430, 502, 805], "aggreg": [62, 88, 89, 133, 138, 139, 154, 155, 156, 158, 160, 165, 166, 167, 184, 185, 199, 201, 207, 208, 211, 213, 219, 236, 244, 346, 372, 376, 391, 403, 404, 405, 406, 407, 408, 410, 411, 412, 471, 486, 487, 488, 495, 499, 502, 505, 509, 515, 525, 555, 565, 566, 567, 568, 570, 573, 584, 585, 590, 597, 604, 773, 774, 775, 777, 780, 781, 782, 864], "concaten": [62, 133, 236, 654, 755, 864], "sure": [62, 77, 81, 88, 89, 92, 98, 138, 168, 236, 477, 554, 604], "contigu": [62, 77, 81, 88, 89, 92, 99, 102, 103, 104, 168, 236], "diagon": [62, 196, 236], "strategi": [62, 88, 108, 109, 110, 111, 130, 139, 150, 151, 159, 236, 282, 345, 525, 550, 555, 560, 561, 604, 648, 719, 864], "vstack": [62, 128, 236], "find": [62, 132, 236, 415, 478, 525, 785, 864], "schema": [62, 74, 79, 88, 89, 93, 97, 99, 103, 110, 117, 118, 119, 125, 236, 282, 381, 538, 539, 546, 565, 596, 598, 604, 659, 864], "miss": [62, 129, 236, 284, 350, 354, 361, 363, 512, 525, 549, 604, 855, 864], "stack": [62, 144, 202, 236], "length": [62, 63, 86, 103, 109, 114, 139, 140, 182, 236, 278, 299, 324, 329, 382, 403, 404, 405, 406, 407, 408, 410, 411, 412, 425, 440, 442, 445, 447, 456, 477, 525, 555, 556, 572, 582, 604, 644, 654, 666, 697, 702, 746, 760, 773, 774, 775, 776, 777, 778, 780, 781, 782, 800, 815, 817, 820, 822, 831, 864], "don": [62, 199, 236, 266, 299, 476, 525, 632, 666, 786, 855, 864], "t": [62, 91, 99, 117, 199, 236, 266, 299, 336, 337, 338, 339, 453, 476, 518, 525, 632, 666, 710, 712, 713, 714, 786, 828, 855, 864], "match": [62, 73, 78, 80, 82, 106, 107, 130, 151, 173, 236, 431, 432, 435, 437, 438, 441, 443, 444, 446, 451, 452, 453, 550, 561, 604, 806, 807, 810, 812, 813, 816, 818, 819, 821, 826, 827, 828], "relev": 62, "execut": [62, 152, 236, 266, 537, 572, 604, 632], "df_h1": 62, "l1": 62, "l2": 62, "df_h2": 62, "r1": 62, "r2": 62, "r3": 62, "df_d1": 62, "df_d2": 62, "bin": 63, "label": [63, 78, 80, 82, 236, 403, 404, 405, 406, 407, 408, 410, 411, 412, 525, 572, 604, 773, 774, 775, 776, 777, 778, 780, 781, 782, 864], "break_point_label": 63, "break_point": 63, "category_label": 63, "discret": [63, 265, 300, 336, 525, 631, 668, 710, 864], "creat": [63, 64, 77, 80, 82, 100, 109, 110, 111, 118, 119, 139, 140, 161, 165, 200, 236, 324, 329, 398, 447, 471, 477, 482, 489, 490, 491, 525, 538, 539, 542, 543, 555, 556, 604, 655, 659, 671, 697, 702, 760, 768, 822, 847, 864], "assign": [63, 109, 139, 236, 397, 449, 450, 525, 555, 604, 767, 824, 825, 864], "must": [63, 78, 80, 82, 90, 100, 106, 139, 140, 151, 173, 236, 282, 340, 376, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 565, 604, 864], "len": [63, 109, 110, 294, 401, 440, 445, 456, 525, 771, 815, 820, 831, 864], "breakpoint": 63, "experiment": [63, 101, 199, 205, 236, 299, 324, 404, 405, 406, 407, 408, 410, 411, 412, 525, 593, 604, 666, 697, 864], "being": [63, 88, 89, 99, 101, 199, 236, 299, 324, 404, 405, 406, 407, 408, 410, 411, 412, 492, 518, 525, 666, 697, 864], "consid": [63, 101, 134, 157, 199, 205, 207, 219, 236, 288, 289, 290, 299, 324, 404, 405, 406, 407, 408, 410, 411, 412, 426, 486, 495, 525, 557, 564, 569, 593, 604, 656, 657, 658, 666, 697, 786, 787, 788, 864], "break": [63, 101, 199, 236, 299, 324, 404, 405, 406, 407, 408, 410, 411, 412, 525, 666, 697, 864], "30": [63, 128, 139, 144, 164, 170, 171, 189, 205, 236, 256, 257, 258, 260, 300, 307, 323, 324, 329, 335, 351, 419, 525, 555, 571, 593, 604, 676, 697, 702], "inf": [63, 110, 111, 255, 357, 360, 525, 619, 733, 737, 762, 864], "low": [64, 139, 236, 325, 477, 555, 604], "high": [64, 139, 236, 325, 477, 555, 604], "interv": [64, 139, 140, 200, 236, 324, 325, 329, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 604, 675, 677, 678, 684, 686, 689, 691, 692, 695, 696, 697, 698, 700, 701, 702, 704, 705, 708], "close": [64, 139, 140, 236, 404, 405, 406, 407, 408, 410, 411, 412, 424, 525, 555, 556, 604, 799, 864], "closedwindow": [64, 139, 140, 236, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 604], "lower": [64, 99, 139, 167, 220, 236, 355, 375, 396, 399, 408, 477, 508, 525, 548, 555, 573, 604, 766, 769, 778, 864], "bound": [64, 88, 89, 126, 139, 236, 268, 355, 375, 470, 477, 525, 555, 604, 634, 711, 864], "upper": [64, 88, 89, 126, 139, 236, 355, 470, 477, 525, 555, 604, 711, 864], "period": [64, 139, 140, 179, 180, 236, 277, 324, 329, 337, 338, 339, 392, 417, 418, 525, 555, 556, 579, 580, 604, 643, 697, 702, 712, 713, 714, 762, 791, 792, 864], "It": [64, 117, 164, 209, 236, 249, 282, 330, 381, 525, 565, 598, 604, 703, 787, 788, 864], "like": [64, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 150, 219, 236, 266, 384, 397, 525, 548, 574, 604, 632, 767, 864], "durat": [64, 151, 200, 236, 307, 310, 313, 315, 317, 320, 326, 333, 466, 525, 561, 604, 676, 679, 685, 687, 690, 693, 699, 706, 849, 864], "3d12h4m25": [64, 139, 140, 151, 200, 236, 324, 329, 555, 556, 561, 604, 697, 702], "hour": [64, 139, 140, 151, 200, 236, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 490, 491, 525, 555, 556, 561, 604, 694, 697, 702], "minut": [64, 139, 140, 151, 200, 236, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 490, 491, 525, 555, 556, 561, 604, 694, 697, 702], "tempor": [64, 139, 140, 236, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 604], "window": [64, 139, 140, 236, 299, 324, 329, 337, 338, 339, 391, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 482, 525, 555, 556, 604, 666, 697, 702, 712, 713, 714, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 864], "granular": 64, "finer": 64, "than": [64, 76, 80, 82, 88, 89, 101, 110, 111, 117, 138, 151, 173, 175, 199, 209, 236, 249, 367, 414, 424, 426, 440, 445, 450, 456, 502, 505, 512, 515, 525, 554, 561, 598, 604, 784, 799, 815, 820, 825, 831, 864], "1d": [64, 139, 140, 151, 200, 236, 304, 310, 317, 321, 324, 329, 333, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 604, 673, 677, 679, 681, 682, 683, 688, 690, 694, 697, 700, 701, 702, 705, 706], "also": [64, 110, 111, 125, 138, 139, 140, 160, 183, 236, 305, 340, 354, 397, 404, 405, 406, 407, 408, 410, 411, 412, 486, 487, 495, 509, 524, 525, 555, 556, 583, 594, 604, 674, 767, 864], "permut": 64, "1mo": [64, 139, 140, 151, 200, 236, 307, 321, 324, 329, 334, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 604, 674, 676, 691, 694, 695, 696, 697, 702, 704, 707], "dtrang": 64, "1985": 64, "00": [64, 139, 151, 200, 236, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 453, 491, 555, 561, 604, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 828], "04": [64, 101, 139, 200, 236, 306, 307, 310, 316, 317, 318, 322, 324, 325, 326, 331, 332, 333, 334, 453, 491, 555, 604, 674, 676, 679, 684, 686, 689, 690, 691, 692, 696, 698, 699, 700, 704, 705, 706, 707, 828], "05": [64, 101, 106, 107, 151, 200, 236, 307, 325, 334, 561, 604, 674, 675, 676, 697, 702, 705, 707], "07": [64, 306, 322, 324, 329, 332, 453, 675, 705, 828], "08": [64, 106, 107, 140, 236, 324, 453, 491, 556, 604, 697, 702, 828], "zone": [64, 305, 330, 334, 674, 703, 707], "america": [64, 674], "new_york": [64, 674], "\u03bc": [64, 139, 140, 151, 200, 236, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 555, 556, 561, 604, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708], "est": [64, 674], "encount": [65, 139, 236, 388, 389, 438, 486, 495, 512, 525, 555, 604, 758, 759, 813, 864], "error": [65, 88, 89, 99, 173, 236, 270, 285, 367, 433, 438, 453, 525, 598, 636, 650, 808, 813, 828, 864], "duplic": [67, 147, 150, 151, 197, 236, 356, 478, 525, 560, 561, 588, 604, 731, 864], "certain": [68, 145, 200, 236, 340, 493, 525, 540, 572, 604, 864], "structur": [69, 74, 75, 128, 164, 236, 571, 604, 612, 864], "least": [70, 110, 392, 471, 525, 762, 853, 864], "expect": [70, 73, 76, 249, 476, 525, 563, 565, 604], "unexpect": [72, 236], "caus": [72, 88, 89, 99, 128, 236, 612, 864], "panic": 72, "combin": [74, 75, 139, 140, 141, 151, 200, 207, 236, 555, 556, 561, 581, 604], "mismatch": 74, "incompat": 75, "lib": [77, 843, 864], "chunkedarrai": [77, 159, 236, 669, 864], "zero": [77, 87, 88, 89, 92, 96, 130, 173, 188, 236, 344, 345, 415, 424, 456, 525, 550, 604, 719, 799, 831, 843, 847, 864], "copi": [77, 118, 119, 188, 236, 456, 538, 539, 604, 609, 655, 659, 671, 831, 843, 847, 864], "most": [77, 382, 386, 392, 450, 471, 525, 754, 762, 825, 853, 864], "closest": 77, "construct": [77, 78, 79, 80, 81, 82, 236, 553, 574, 604, 864], "pa": [77, 100, 101, 236], "map": [78, 79, 88, 89, 92, 93, 96, 97, 99, 102, 117, 125, 169, 189, 236, 324, 329, 377, 471, 476, 525, 546, 575, 604, 697, 702], "clone": [78, 79, 80, 81, 82, 118, 192, 193, 236, 538, 604, 655, 846, 847, 855, 864], "two": [78, 80, 82, 98, 133, 157, 165, 195, 207, 208, 209, 219, 236, 244, 301, 426, 427, 462, 474, 485, 507, 512, 514, 525, 569, 598, 604, 669, 864], "dimension": [78, 80, 82, 236, 864], "alreadi": [78, 236, 266, 299, 525, 632, 666, 864], "present": [78, 110, 236, 359, 525, 855, 864], "dimens": [78, 80, 82, 236, 401, 525, 771, 864], "infer_schema_length": [79, 82, 88, 89, 91, 99, 103], "50": [79, 82, 128, 236, 288, 289, 290, 324, 329, 525, 656, 702, 864], "mani": [79, 82, 98, 128, 236, 612, 864], "scan": [79, 82, 88, 89, 96, 99, 100, 101, 102, 103, 104, 548, 557, 564, 604], "slow": [79, 82, 88, 89, 99, 190, 236, 299, 525, 666, 864], "partial": 79, "overwrit": [79, 88, 89, 99, 205, 236, 548, 592, 593, 604], "first": [79, 88, 89, 91, 98, 99, 103, 117, 137, 139, 142, 151, 153, 159, 164, 165, 196, 197, 200, 212, 219, 236, 258, 259, 260, 266, 268, 269, 299, 321, 324, 352, 358, 371, 436, 438, 443, 444, 478, 480, 486, 495, 498, 525, 540, 555, 557, 561, 564, 571, 588, 594, 599, 604, 622, 625, 632, 634, 635, 666, 667, 694, 697, 726, 734, 747, 811, 813, 818, 819, 864], "let": 79, "about": [79, 424, 525, 799, 864], "3rd": 79, "unknown": [79, 500], "np": [80, 236, 733, 737, 738, 739, 773, 864], "ndarrai": [80, 131, 192, 236, 462, 525, 669, 788, 838, 847, 864], "numpi": [80, 105, 131, 163, 192, 236, 388, 389, 462, 525, 733, 737, 738, 739, 758, 759, 773, 838, 847, 855, 864], "columnar": [80, 82, 174, 236], "column_0": [80, 82, 117, 196, 236], "column_1": [80, 82, 117, 196, 236], "interpret": [80, 82, 88, 89, 99, 236], "yield": [80, 82, 88, 89, 99, 126, 128, 196, 236, 612, 711, 864], "conclus": [80, 82, 236], "nan_to_non": 81, "panda": [81, 91, 98, 105, 193, 236, 466, 525, 848, 849, 864], "index": [81, 84, 105, 132, 139, 140, 145, 151, 165, 171, 173, 182, 194, 200, 206, 236, 244, 256, 257, 258, 259, 260, 261, 262, 268, 278, 321, 404, 405, 406, 407, 408, 410, 411, 412, 425, 436, 447, 462, 478, 525, 555, 556, 561, 582, 595, 604, 620, 621, 622, 623, 624, 625, 627, 628, 634, 644, 694, 760, 788, 800, 811, 822, 838, 864], "datetimeindex": [81, 669, 864], "instal": [81, 88, 89, 92, 96, 98, 100, 105, 163, 192, 193, 236, 581, 604, 847, 864], "nan": [81, 106, 107, 110, 129, 236, 302, 303, 344, 354, 361, 363, 364, 365, 378, 385, 388, 389, 512, 525, 549, 604, 615, 619, 670, 718, 738, 739, 758, 759, 773, 864], "convert": [81, 83, 90, 91, 98, 100, 174, 189, 190, 191, 192, 193, 195, 236, 282, 453, 648, 828, 835, 846, 847, 848, 855, 864], "pd": [81, 91, 98, 236, 466, 525, 849, 864], "pd_df": 81, "pd_seri": 81, "dummi": [83, 191, 236, 844, 864], "subset": [83, 124, 160, 191, 197, 236, 545, 588, 604], "to_dummi": [83, 236, 864], "foo_1": [83, 191, 236], "foo_2": [83, 191, 236], "bar_3": [83, 191, 236], "bar_4": [83, 191, 236], "ham_a": [83, 191, 236], "ham_b": [83, 191, 236], "get": [84, 93, 97, 112, 120, 125, 135, 136, 139, 140, 142, 143, 147, 149, 153, 159, 173, 176, 178, 182, 186, 191, 203, 212, 222, 224, 225, 226, 227, 228, 229, 230, 236, 244, 256, 257, 258, 259, 260, 267, 271, 272, 283, 294, 295, 296, 297, 298, 308, 347, 352, 356, 358, 366, 369, 371, 378, 379, 380, 381, 383, 385, 388, 389, 396, 425, 429, 439, 442, 460, 461, 468, 472, 494, 498, 502, 503, 504, 505, 513, 516, 517, 525, 541, 546, 552, 555, 556, 557, 562, 564, 577, 582, 586, 591, 599, 600, 604, 620, 621, 622, 623, 624, 625, 633, 637, 638, 649, 654, 662, 663, 664, 665, 677, 709, 721, 723, 726, 727, 731, 734, 743, 747, 750, 752, 753, 755, 757, 758, 759, 763, 764, 766, 800, 803, 814, 817, 837, 842, 843, 844, 851, 854, 855, 864], "uint32": [84, 105, 126, 236, 258, 260, 261, 262, 272, 306, 309, 312, 314, 316, 318, 319, 322, 323, 325, 331, 332, 400, 432, 439, 442, 462, 466, 525, 623, 627, 628, 638, 650, 675, 678, 684, 686, 689, 691, 692, 695, 696, 698, 704, 705, 711, 786, 807, 849, 864], "regular": [84, 200, 236, 340, 481, 493, 525], "uint64": [84, 141, 236, 261, 262, 351, 399, 525, 627, 628, 725, 769, 864], "polars_u64_idx": 84, "read": [85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 128, 236, 376, 525, 548, 553, 574, 604, 612, 864], "over": [85, 88, 89, 99, 110, 117, 128, 138, 196, 209, 219, 236, 249, 299, 345, 354, 376, 377, 403, 404, 405, 406, 407, 408, 410, 411, 412, 476, 486, 487, 495, 501, 509, 525, 598, 612, 613, 666, 773, 774, 775, 777, 781, 864], "avail": [85, 90, 100, 109, 235, 239, 397, 519, 521, 524, 525, 526, 529, 530, 531, 534, 535, 548, 603, 604, 767, 857, 860, 864, 867, 868, 869], "fetch": [85, 99, 152, 236, 538, 540, 557, 564, 589, 604], "ideal": [85, 219], "read_csv_batch": [85, 535], "tpch": [85, 89], "tables_scale_100": [85, 89], "lineitem": [85, 89, 98], "tbl": [85, 89], "parse_d": [85, 88, 89, 99], "new": [86, 114, 117, 122, 124, 144, 145, 160, 161, 169, 170, 187, 199, 204, 236, 245, 342, 348, 354, 377, 443, 444, 449, 450, 457, 458, 463, 525, 534, 575, 587, 598, 604, 609, 613, 671, 716, 760, 770, 818, 819, 824, 825, 832, 834, 839, 845, 856, 864], "In": [86, 90, 100, 104, 110, 111, 114, 117, 126, 128, 139, 140, 160, 236, 249, 381, 426, 427, 525, 555, 556, 604, 612, 711, 768, 864], "probabl": [86, 114, 336, 525, 710, 864], "n_row": [87, 88, 89, 92, 96, 99, 102, 103, 104, 548, 604], "accept": [87, 88, 89, 90, 92, 96, 183, 236], "start": [87, 88, 89, 92, 96, 99, 102, 103, 104, 138, 139, 152, 182, 200, 206, 236, 278, 306, 308, 309, 316, 318, 322, 323, 324, 325, 328, 329, 331, 332, 335, 340, 355, 425, 431, 435, 447, 451, 481, 486, 493, 495, 518, 525, 554, 555, 572, 582, 595, 604, 644, 673, 674, 675, 677, 678, 684, 686, 689, 691, 692, 695, 696, 697, 698, 700, 701, 702, 704, 705, 706, 707, 708, 800, 810, 822, 826, 864], "stop": [87, 88, 89, 92, 96, 99, 102, 103, 104, 306, 308, 309, 316, 318, 322, 323, 324, 325, 328, 329, 331, 332, 335, 673, 674, 675, 677, 678, 684, 686, 689, 691, 692, 695, 696, 697, 698, 700, 701, 702, 704, 705, 706, 707, 708], "after": [87, 88, 89, 92, 96, 99, 102, 103, 104, 128, 198, 235, 236, 239, 397, 456, 525, 589, 604, 612, 674, 767, 831, 864], "textio": 88, "new_column": [88, 89, 91], "comment_char": [88, 89, 99], "quote_char": [88, 89, 99], "skip_row": [88, 89, 99], "ignore_error": [88, 89, 99], "n_thread": [88, 89], "8192": 88, "csvencod": [88, 89, 99], "low_memori": [88, 89, 96, 99, 103, 104], "storage_opt": [88, 90, 92, 96, 100, 102, 104], "skip_rows_after_head": [88, 89, 99], "row_count_nam": [88, 89, 92, 96, 99, 102, 103, 104], "row_count_offset": [88, 89, 92, 96, 99, 102, 103, 104], "sample_s": [88, 89], "eol_char": [88, 89, 99], "By": [88, 89, 91, 151, 183, 236, 500, 561, 604, 803, 847, 854, 864], "we": [88, 89, 91, 99, 138, 151, 183, 236, 266, 500, 518, 561, 565, 583, 604, 613, 632, 864], "handler": [88, 89, 91], "g": [88, 89, 90, 91, 92, 96, 100, 102, 104, 199, 236, 340, 416, 419, 493, 525, 786, 789, 847, 864], "via": [88, 89, 91, 99, 102, 104, 205, 236, 593, 604], "builtin": [88, 89, 91], "open": [88, 89, 91, 92, 96, 102, 104], "stringio": [88, 89], "fsspec": [88, 89, 92, 96, 100, 102, 104, 105], "remot": [88, 89, 92, 96], "dataset": [88, 89, 99, 101, 368, 525, 534, 745, 864], "autogener": [88, 89, 99], "column_x": [88, 89, 99], "enumer": [88, 89, 99], "everi": [88, 89, 99, 139, 187, 190, 200, 236, 261, 262, 265, 268, 269, 278, 281, 294, 295, 296, 297, 298, 299, 324, 329, 342, 348, 463, 486, 487, 525, 548, 555, 587, 604, 627, 628, 631, 634, 635, 644, 647, 662, 663, 664, 665, 666, 697, 702, 716, 839, 864], "shorter": [88, 89], "remain": [88, 89, 99, 126, 138, 236, 249, 449, 450, 525, 554, 565, 604, 711, 824, 825, 864], "comment": [88, 89, 99], "instanc": [88, 89, 99, 110, 111, 128, 133, 236, 282, 285, 382, 404, 405, 406, 407, 408, 410, 411, 412, 486, 495, 525, 565, 595, 604, 612, 650, 864], "special": [88, 89, 99, 613, 864], "handl": [88, 89, 99, 101, 265, 300, 433, 456, 525, 631, 668, 808, 831, 864], "escap": [88, 89, 99], "dure": [88, 89, 99, 128, 236, 612, 864], "provid": [88, 89, 90, 98, 99, 100, 110, 111, 205, 236, 282, 433, 434, 436, 438, 534, 593, 598, 604, 808, 809, 811, 813, 871], "equal": [88, 89, 99, 106, 107, 113, 134, 139, 151, 236, 403, 404, 405, 406, 407, 408, 410, 411, 412, 439, 440, 445, 456, 477, 525, 555, 561, 604, 773, 774, 775, 776, 777, 778, 780, 781, 782, 786, 814, 815, 820, 831, 864], "some": [88, 89, 99, 124, 236, 545, 604, 736, 864], "check": [88, 89, 99, 106, 107, 134, 148, 236, 246, 247, 264, 355, 359, 431, 435, 451, 525, 565, 604, 610, 611, 630, 729, 730, 732, 735, 736, 742, 744, 786, 806, 810, 826, 864], "might": [88, 89, 99, 381, 469, 525], "issu": [88, 89, 91, 99, 297, 298, 460, 525, 664, 665, 836, 864], "automat": [88, 89, 98, 99, 110, 111, 236, 453, 828, 864], "alwai": [88, 117, 209, 236, 249, 381, 525, 565, 598, 604], "physic": [88, 89, 151, 236, 286, 466, 525, 537, 560, 561, 604, 652, 849, 864], "cpu": [88, 89], "your": [88, 89, 106, 107, 236, 540, 557, 564, 565, 604], "system": [88, 89], "done": [88, 89, 99, 101, 137, 151, 236, 248, 285, 440, 445, 525, 561, 583, 597, 604, 650, 815, 820, 864], "buffer": [88, 89, 126, 236, 711, 864], "onc": [88, 89, 91, 175, 236, 414, 525, 537, 604, 784, 864], "modifi": [88, 89, 99, 144, 202, 236, 305, 333, 674, 706, 770, 829, 830, 864], "multi": [88, 89], "lossi": [88, 89, 99], "replac": [88, 89, 99, 129, 130, 171, 196, 204, 236, 433, 444, 549, 592, 604, 787, 788, 808, 819, 864], "decod": [88, 89], "im": [88, 89], "usag": [88, 89, 99, 110, 111, 181, 236, 794, 864], "expens": [88, 89, 96, 99, 103, 104, 138, 196, 236, 554, 604, 612, 864], "nativ": [88, 92, 96, 117, 209, 236, 249, 525, 598], "parser": 88, "even": 88, "possibl": [88, 117, 209, 236, 249, 375, 381, 450, 470, 525, 598, 825, 864], "differ": [88, 101, 128, 139, 140, 196, 236, 265, 300, 305, 306, 321, 322, 331, 388, 389, 453, 469, 494, 502, 505, 525, 555, 556, 604, 612, 631, 668, 674, 675, 694, 695, 704, 758, 759, 786, 828, 864], "regard": [88, 512], "sens": [88, 92, 96, 102, 104, 139, 140, 200, 236, 555, 556, 604], "particular": [88, 92, 96, 102, 104, 126, 236, 711, 864], "storag": [88, 90, 92, 96, 100, 102, 104], "connect": [88, 92, 96, 98, 101, 102, 104, 535], "port": [88, 92, 96, 98, 102, 104], "usernam": [88, 92, 96, 98, 102, 104], "password": [88, 92, 96, 98, 102, 104], "skip": [88, 89, 91, 99, 199, 236, 613, 864], "insert": [88, 89, 92, 96, 99, 102, 103, 104, 145, 170, 196, 198, 236, 415, 430, 456, 525, 589, 604, 785, 805, 831, 864], "count": [88, 89, 92, 96, 99, 102, 103, 104, 121, 139, 140, 151, 160, 161, 165, 196, 200, 206, 209, 218, 236, 294, 321, 370, 387, 390, 404, 405, 406, 407, 408, 410, 411, 412, 432, 469, 471, 506, 525, 555, 556, 561, 595, 598, 604, 667, 694, 756, 761, 807, 852, 853, 864], "offset": [88, 89, 92, 96, 99, 102, 103, 104, 139, 140, 182, 200, 206, 236, 278, 321, 324, 329, 425, 447, 525, 555, 556, 582, 595, 604, 644, 694, 697, 702, 800, 822, 864], "row_count": [88, 89, 92, 96, 99, 102, 103, 104], "sampl": [88, 89, 209, 236, 424, 525, 598, 799, 864], "estim": [88, 89, 126, 236, 338, 339, 368, 525, 711, 713, 714, 745, 864], "alloc": [88, 89, 126, 168, 236, 711, 864], "need": [88, 89, 91, 106, 107, 139, 140, 181, 192, 236, 282, 419, 439, 525, 555, 556, 597, 604, 793, 814, 847, 864], "end": [88, 89, 96, 99, 139, 236, 278, 324, 340, 355, 431, 435, 447, 451, 481, 493, 525, 555, 557, 564, 572, 604, 644, 697, 810, 822, 826], "scan_csv": [88, 89, 597], "glob": [88, 89, 99, 102, 104], "pattern": [88, 89, 99, 102, 104, 431, 432, 436, 437, 443, 444, 787, 788, 806, 807, 811, 812, 818, 819, 864], "store": [88, 96, 128, 236, 612, 864], "continu": [88, 96, 424, 525, 799, 864], "benchmark": [88, 96], "50000": 89, "batchedcsvread": [89, 534], "batch": [89, 103], "upon": 89, "creation": 89, "gather": 89, "work": [89, 91, 138, 140, 170, 197, 236, 266, 287, 288, 289, 290, 349, 442, 458, 468, 525, 554, 556, 588, 604, 632, 653, 656, 657, 658, 722, 817, 851, 864], "next_batch": 89, "call": [89, 110, 111, 152, 235, 236, 239, 535, 603, 604, 613, 864], "table_uri": [90, 100], "delta_table_opt": [90, 100], "lake": [90, 100, 534], "uri": [90, 98, 100], "root": [90, 100, 367, 377, 383, 394, 428, 459, 524, 525, 802, 864], "For": [90, 91, 100, 128, 140, 150, 151, 183, 209, 236, 282, 285, 382, 399, 424, 486, 495, 496, 525, 556, 561, 583, 598, 604, 612, 769, 799, 847, 864], "filesystem": [90, 100], "absolut": [90, 100, 106, 107, 243, 525, 608, 864], "rel": [90, 100, 106, 107, 219, 321, 337, 338, 339, 525, 694, 712, 713, 714, 864], "But": [90, 100], "gc": [90, 100], "azur": [90, 100], "thu": [90, 99, 100, 128, 236, 512, 612, 864], "latest": [90, 100, 350, 382, 525], "backend": [90, 98, 100], "deltalak": [90, 100], "cloud": [90, 100, 101], "configur": [90, 100], "authent": [90, 100], "here": [90, 98, 100, 109, 110, 111, 438, 813], "keyword": [90, 96, 100, 163, 164, 173, 236, 571, 604, 864], "while": [90, 91, 100, 110, 111, 157, 196, 236, 569, 604], "sinc": [90, 100, 239, 308, 677], "table_path": [90, 100], "fail": [90, 100, 197, 236, 282, 453, 588, 604, 613, 828, 864], "aw": [90, 100], "see": [90, 91, 98, 100, 106, 107, 110, 111, 150, 163, 164, 236, 288, 289, 290, 327, 345, 354, 368, 376, 424, 509, 525, 656, 657, 658, 700, 745, 799, 864, 871], "bucket": [90, 100, 324, 329, 697, 702], "aws_access_key_id": [90, 100], "the_aws_access_key_id": [90, 100], "aws_secret_access_kei": [90, 100], "the_aws_secret_access_kei": [90, 100], "googl": [90, 100], "service_account": [90, 100], "service_account_json_absolute_path": [90, 100], "az": [90, 100], "adl": [90, 100], "abf": [90, 100], "azure_storage_account_nam": [90, 100], "azure_storage_account_kei": [90, 100], "without_fil": [90, 100], "load": [90, 98, 100, 534, 557, 564, 604], "track": [90, 100, 117, 236], "sheet_id": 91, "sheet_nam": 91, "xlsx2csv_option": 91, "read_csv_opt": 91, "excel": [91, 534], "xlsx": 91, "sheet": 91, "xlsx2csv": [91, 105], "read_csv": [91, 99], "skip_empty_lin": 91, "my": [91, 100, 101], "datasheet": 91, "excel_fil": 91, "As": [91, 510], "correct": [91, 338, 339, 368, 409, 424, 525, 565, 604, 713, 714, 745, 779, 799, 864], "look": [91, 282], "document": [91, 98, 438, 453, 813, 828], "fix": [91, 109, 110, 333, 404, 405, 406, 407, 408, 410, 411, 412, 525, 706], "whole": [91, 426, 427, 436, 525, 811], "twice": 91, "actual": [91, 110, 111, 794, 864], "With": 91, "1000": [91, 126, 236, 313, 456, 685], "spreadsheet": [91, 165, 236], "xl": 91, "xlsm": 91, "xlsb": 91, "odf": 91, "od": 91, "odt": 91, "from_panda": [91, 98], "memory_map": [92, 96, 102], "v2": [92, 102], "valid": [92, 96, 111, 126, 236, 299, 426, 431, 432, 436, 437, 438, 525, 666, 711, 724, 806, 807, 811, 812, 813, 818, 819, 864], "greatli": [92, 102], "repeat": [92, 102, 398, 400, 525], "o": [92, 102, 299, 348, 467, 525, 666, 850, 864], "page": [92, 102, 236, 525, 534, 604, 864], "give": [92, 96, 102, 103, 104, 157, 236, 308, 368, 400, 525, 534, 569, 604, 677, 745, 864], "read_ndjson": 94, "parallelstrategi": [96, 104], "auto": [96, 104, 196, 236], "directori": 96, "partit": [96, 98, 101, 162, 236], "awar": [96, 330, 453, 703, 828], "stabl": 96, "increas": [96, 299, 525, 666, 864], "row_group": [96, 104], "direct": [96, 98, 104, 199, 236], "read_tabl": 96, "connection_uri": 98, "partition_on": 98, "partition_rang": 98, "tupl": [98, 117, 173, 174, 178, 236, 355, 401, 525, 572, 581, 604, 771, 790, 864], "partition_num": 98, "protocol": 98, "postgr": [98, 391, 525], "mysql": 98, "sqlite": 98, "redshift": 98, "through": [98, 864], "clickhous": 98, "databas": 98, "altern": 98, "solut": 98, "engin": [98, 117, 209, 236, 249, 525, 598], "raw": 98, "connectorx": [98, 105], "postgresql": 98, "server": 98, "transfer": 98, "detail": [98, 106, 107, 871], "partition_col": 98, "explicitli": [98, 109, 110], "polarsdatatyp": 99, "with_column_nam": 99, "push": [99, 101, 102, 103, 104], "down": [99, 101, 102, 103, 104, 349, 525, 722, 864], "therebi": [99, 102, 103, 104], "potenti": [99, 102, 103, 104], "overhead": [99, 102, 103, 104], "updat": 99, "just": [99, 157, 236, 569, 604], "befor": [99, 128, 139, 151, 198, 236, 297, 298, 299, 392, 403, 404, 405, 406, 407, 408, 410, 411, 412, 456, 460, 525, 555, 558, 561, 589, 604, 612, 664, 665, 666, 762, 773, 774, 775, 776, 777, 778, 780, 781, 782, 831, 836, 864], "realloc": [99, 102, 103, 128, 236, 612, 864], "my_long_fil": 99, "doesn": [99, 336, 525, 710, 855, 864], "thing": [99, 474, 494], "less": [99, 151, 236, 440, 445, 450, 456, 561, 604, 815, 820, 825, 831], "limit": [99, 130, 236, 284, 288, 289, 290, 345, 350, 525, 550, 557, 604, 656, 657, 658, 719, 864], "breezah": 99, "languag": [99, 139, 140, 151, 200, 236, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 604, 694, 697, 702], "terribl": 99, "mydf": 99, "write_csv": [99, 236], "lambda": [99, 117, 124, 133, 164, 209, 236, 249, 282, 337, 338, 339, 376, 377, 403, 488, 515, 525, 545, 565, 571, 598, 604, 613, 648, 712, 713, 714, 864], "raw_filesystem": 100, "adjust": [100, 337, 338, 339, 424, 525, 712, 713, 714, 799, 864], "subtreefilesystem": 100, "reli": 100, "mention": 100, "pleas": 100, "ensur": [100, 110, 111, 113, 173, 236, 471, 525, 565, 604, 847, 853, 864], "gcsf": 100, "pyfilesystem": 100, "fsspechandl": 100, "gcsfilesystem": 100, "id": [100, 209, 443, 444, 469, 471, 525, 598, 852, 864], "token": 100, "pa_f": 100, "adlf": 100, "azureblobfilesystem": 100, "account_nam": 100, "account_kei": 100, "allow_pyarrow_filt": 101, "lead": [101, 236, 416, 441, 446, 452, 456, 462, 471, 502, 505, 512, 525, 565, 598, 604, 789, 816, 827, 831, 864], "comparison": 101, "dset": 101, "folder": 101, "out": [101, 105, 140, 236, 268, 357, 360, 525, 556, 604, 634], "1970": 101, "stdout": 105, "14": [105, 117, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 236, 354, 525, 697], "platform": 105, "linux": 105, "microsoft": 105, "standard": [105, 184, 236, 311, 338, 410, 424, 429, 438, 513, 525, 584, 604, 680, 713, 799, 803, 813, 864], "wsl2": 105, "x86_64": 105, "glibc2": 105, "main": 105, "jul": [105, 453, 828], "56": [105, 464, 525], "gcc": 105, "20210110": 105, "23": [105, 139, 140, 236, 239, 309, 324, 490, 555, 556, 604, 678], "check_dtyp": [106, 107], "check_exact": [106, 107], "check_column_nam": 106, "rtol": [106, 107], "1e": [106, 107], "atol": [106, 107], "nans_compare_equ": [106, 107], "assertionerror": [106, 107], "compar": [106, 107, 134, 197, 236, 588, 604, 786, 864], "exactli": [106, 107, 110, 111, 449, 450, 794, 824, 825, 864], "toler": [106, 107, 151, 236, 561, 604], "inexact": [106, 107], "assert": [106, 107, 109, 110, 111, 140, 236, 534, 556, 604, 724, 864], "check_nam": 107, "s1": [107, 133, 236, 856, 864], "searchstrategi": [108, 110, 111], "null_prob": [108, 110, 111], "percentag": [108, 110, 111, 392, 525, 762, 864], "chanc": [108, 110, 111], "hypothesi": [108, 109, 110, 111, 871], "sampled_from": 108, "unique_small_int": 108, "ccy": 108, "gbp": 108, "eur": [108, 121, 137, 236], "jpy": 108, "min_col": [109, 110], "max_col": [109, 110], "_parametr": 109, "suitabl": 109, "standalon": [109, 110], "itself": [109, 563, 604], "explicit": [109, 477, 509], "omit": [109, 110, 111, 160, 236], "random": [109, 110, 111, 141, 175, 236, 351, 397, 414, 420, 525, 725, 767, 784, 795, 864], "mincol": 109, "exact": [109, 110, 111, 181, 236, 453, 828], "control": 109, "especi": 109, "punctuat": 109, "test_special_char_colname_init": 109, "z": [109, 110, 126, 147, 149, 150, 157, 236, 263, 286, 351, 400, 525, 560, 569, 582, 604, 652, 719, 864], "test_unique_xyz": 109, "assert_someth": 109, "min_siz": [110, 111], "max_siz": [110, 111], "include_col": 110, "allow_infin": [110, 111], "allowed_dtyp": [110, 111], "excluded_dtyp": [110, 111], "describ": [110, 137, 236, 597, 864], "desir": 110, "param": [110, 111, 173, 236], "n_chunk": [110, 111, 236, 864], "randomis": 110, "individu": [110, 140, 236, 249, 437, 525, 556, 604, 654, 812, 864], "append": [110, 128, 150, 151, 236, 398, 525, 560, 561, 604, 864], "onto": 110, "independ": [110, 111], "either": [110, 140, 152, 155, 173, 185, 236, 556, 563, 604], "basi": 110, "pct": 110, "take": [110, 133, 164, 187, 236, 321, 330, 463, 492, 494, 525, 587, 604, 694, 703, 839, 856, 864], "preced": 110, "disallow": [110, 111], "exclud": [110, 111, 355, 481, 512, 525], "deploi": [110, 111], "characterist": [110, 111], "develop": [110, 111], "directli": [110, 111, 337, 338, 339, 525, 712, 713, 714, 864], "concret": [110, 111], "test_repr": [110, 111], "isinst": [110, 111, 236], "repr": [110, 111], "known": [110, 598], "colnam": [110, 125, 236, 377, 525, 546, 604], "df_strategi": 110, "15836": 110, "1755e": 110, "38": 110, "575050513": 110, "constructor": 111, "op": [111, 400, 525], "max_data_s": 111, "distinct": [111, 162, 236, 283, 397, 489, 490, 491, 525, 649, 767, 864], "54666": 111, "35": 111, "6414": 111, "63290": 111, "pool": 112, "return_dtyp": [117, 236, 249, 376, 476, 501, 525, 613, 864], "inference_s": [117, 236], "256": [117, 236, 762, 864], "user": [117, 164, 209, 236, 249, 416, 476, 525, 571, 598, 604, 613, 789, 864], "udf": [117, 164, 209, 236, 249, 476, 525, 571, 598, 604, 613, 864], "logic": [117, 209, 236, 249, 466, 525, 553, 560, 574, 596, 598, 604, 849, 864], "almost": [117, 209, 236, 249, 525, 598], "_significantly_": [117, 209, 236, 249, 525, 598], "intens": [117, 209, 236, 249, 525, 598], "becaus": [117, 126, 139, 152, 199, 209, 236, 249, 266, 525, 555, 598, 604, 613, 632, 711, 864], "forc": [117, 151, 209, 236, 249, 525, 560, 561, 598, 604], "materi": [117, 209, 236, 249, 525, 572, 598, 604], "parallelis": [117, 209, 236, 249, 525, 598], "optimis": [117, 209, 236, 249, 525, 598, 787, 788, 864], "wherev": [117, 209, 236, 249, 525, 598], "strongli": [117, 209, 236, 249, 525, 598], "prefer": [117, 128, 209, 236, 249, 403, 525, 598, 604, 612, 773, 864], "achiev": [117, 209, 236, 249, 525, 598], "best": [117, 209, 236, 249, 525, 598], "tri": [117, 236], "arbitrarili": [117, 236], "rearrang": [117, 236], "want": [117, 128, 160, 236, 288, 289, 290, 346, 376, 404, 405, 406, 407, 408, 410, 411, 412, 486, 495, 525, 540, 557, 564, 604, 612, 656, 657, 658, 847, 864], "preserv": [117, 236], "syntax": [117, 160, 183, 236, 581, 583, 604, 864], "15": [117, 139, 140, 145, 236, 299, 324, 329, 525, 555, 556, 604, 666, 697, 702, 864], "better": [117, 209, 236, 249, 471, 525, 598, 787, 788, 864], "scalar": [117, 236, 415, 476, 525, 785, 864], "ident": [118, 119, 236, 538, 539, 604, 655, 659, 864], "cheap": [118, 119, 236, 538, 539, 604, 612, 655, 659, 864], "deepcopi": [118, 119, 236, 538, 539, 604, 655, 659, 864], "13": [118, 119, 129, 130, 136, 140, 145, 152, 159, 205, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 236, 239, 403, 405, 482, 517, 525, 538, 539, 549, 550, 556, 563, 593, 604, 613, 697, 702, 704, 864], "clear": [119, 236, 539, 604, 659, 864], "properti": [120, 125, 143, 176, 178, 203, 236, 534, 541, 546, 577, 591, 604, 709, 721, 727, 757, 790, 842, 864], "appl": [120, 144, 150, 169, 171, 189, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 236, 394, 402, 435, 451, 459, 525, 560, 575, 604, 810, 826], "banana": [120, 189, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 236, 394, 402, 459, 525], "summari": [121, 236, 667, 864], "glimps": [121, 142, 236], "usd": [121, 137, 236], "2020": [121, 137, 140, 236, 307, 310, 313, 315, 317, 320, 326, 334, 556, 604, 674, 676, 679, 685, 687, 690, 693, 699, 707], "2021": [121, 137, 139, 200, 236, 453, 500, 555, 604, 680, 730, 828, 864], "null_count": [121, 124, 236, 299, 525, 666, 667, 864], "266667": [121, 236], "666667": [121, 155, 201, 215, 236, 337, 525, 590, 604], "std": [121, 236, 403, 525, 604, 667, 780, 864], "101514": [121, 236], "707107": [121, 236, 338, 525, 713, 864], "57735": [121, 236], "median": [121, 165, 236, 406, 525, 594, 604, 776, 864], "snippet": [124, 236, 545, 604], "fold": [124, 236, 382, 480, 486, 487, 509, 515, 545, 604], "acc": [124, 236, 486, 487, 495, 509, 545, 604], "is_nul": [124, 236, 525, 545, 604, 864], "height": [124, 236], "sizeunit": [126, 236, 711, 864], "total": [126, 236, 711, 864], "heap": [126, 236, 711, 864], "its": [126, 198, 236, 324, 329, 589, 604, 697, 702, 711, 864], "bitmap": [126, 236, 711, 864], "therefor": [126, 236, 282, 711, 864], "structarrai": [126, 236, 711, 864], "constant": [126, 140, 236, 556, 604, 711, 864], "unchang": [126, 236, 249, 466, 525, 565, 598, 604, 711, 849, 864], "visibl": [126, 236, 711, 864], "capac": [126, 181, 236, 711, 794, 864], "ffi": [126, 236, 711, 864], "kb": [126, 236, 711, 864], "mb": [126, 236, 711, 864], "gb": [126, 236, 711, 864], "tb": [126, 236, 711, 864], "scale": [126, 236, 711, 864], "1_000_000": [126, 236, 711, 864], "25888898": [126, 236], "689577102661133": [126, 236], "long": [127, 157, 199, 236, 547, 569, 604], "largelist": [127, 236], "letter": [127, 212, 222, 236, 340, 493, 525, 547, 599, 600, 604], "locat": [128, 171, 194, 198, 236, 589, 604, 612, 788, 838, 864], "faster": [128, 199, 236, 403, 442, 469, 525, 604, 612, 613, 773, 817, 864], "onlin": [128, 236, 612, 864], "rerun": [128, 236, 612, 864], "them": [128, 139, 140, 151, 200, 236, 270, 388, 389, 482, 525, 555, 556, 561, 604, 612, 636, 758, 759, 864], "latter": [128, 236, 612, 864], "20": [128, 144, 145, 164, 166, 170, 171, 236, 256, 257, 258, 260, 300, 324, 329, 351, 354, 500, 525, 571, 604, 702], "40": [128, 164, 236, 324, 329, 351, 525, 571, 604, 680, 702], "60": [128, 236, 325, 326, 453, 695, 698, 699, 828], "fill_valu": [129, 180, 199, 236, 344, 418, 525, 549, 580, 604, 718, 792, 864], "Not": [129, 236, 361, 363, 525, 549, 604], "To": [129, 236, 302, 303, 345, 502, 505, 515, 525, 549, 604], "fillnullstrategi": [130, 236, 345, 525, 550, 604, 719, 864], "matches_supertyp": [130, 236, 550, 604], "forward": [130, 151, 236, 345, 350, 525, 550, 561, 604, 719, 864], "consecut": [130, 236, 284, 345, 350, 430, 525, 550, 604, 719, 805, 864], "supertyp": [130, 236, 248, 525, 550, 604], "fill_nan": [130, 236, 525, 604, 864], "OR": [131, 236, 475, 551, 604], "reduct": [133, 236], "effect": [133, 236, 595, 604], "supercast": [133, 236], "similar": [133, 151, 236, 391, 525, 561, 604], "parent": [133, 236], "rule": [133, 236, 327, 700], "arithmet": [133, 236], "zip_with": [133, 236, 864], "foo11": [133, 236], "bar22": [133, 236], "null_equ": [134, 236, 786, 864], "retriev": [135, 236, 261, 262, 457, 627, 628, 832], "preview": [137, 236], "wide": [137, 157, 199, 236, 569, 604], "nice": [137, 236], "few": [137, 236], "head": [137, 153, 186, 236, 248, 371, 525, 564, 604, 747, 864], "tail": [137, 142, 207, 236, 248, 424, 525, 604, 799, 864], "maintain_ord": [138, 162, 165, 197, 200, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 236, 244, 249, 462, 468, 484, 525, 540, 543, 548, 554, 572, 581, 588, 604, 851, 864], "consist": [138, 236, 554, 604], "agg": [138, 139, 140, 236, 244, 249, 346, 426, 462, 473, 484, 525, 540, 543, 548, 554, 555, 556, 572, 581, 604], "loop": [138, 236], "sub_df": [138, 236], "index_column": [139, 140, 236, 555, 556, 604], "truncat": [139, 236, 555, 572, 604], "include_boundari": [139, 236, 555, 604], "start_bi": [139, 236, 555, 604], "startbi": [139, 236, 555, 604], "dynamicgroupbi": [139, 236], "normal": [139, 236, 336, 368, 424, 525, 555, 604, 710, 745, 799, 864], "groupbi": [139, 140, 160, 236, 239, 244, 249, 266, 299, 346, 391, 426, 427, 462, 473, 476, 484, 525, 540, 543, 548, 555, 556, 572, 581, 604, 632, 666, 864], "member": [139, 236, 555, 604, 736, 864], "seen": [139, 236, 284, 350, 525, 555, 604], "roll": [139, 140, 236, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 482, 525, 555, 556, 604, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 864], "slot": [139, 236, 265, 299, 300, 525, 555, 604, 631, 666, 668, 864], "1n": [139, 140, 151, 200, 236, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 604, 694, 697, 702], "nanosecond": [139, 140, 151, 200, 236, 321, 324, 325, 329, 404, 405, 406, 407, 408, 410, 411, 412, 491, 525, 555, 556, 561, 604, 694, 697, 698, 702], "1u": [139, 140, 151, 200, 236, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 604, 694, 697, 702], "microsecond": [139, 140, 151, 200, 236, 321, 324, 325, 329, 404, 405, 406, 407, 408, 410, 411, 412, 490, 491, 525, 555, 556, 561, 572, 604, 694, 697, 702], "1m": [139, 140, 151, 200, 236, 313, 315, 320, 321, 324, 326, 329, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 604, 685, 687, 693, 694, 697, 699, 702], "millisecond": [139, 140, 151, 200, 236, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 491, 525, 555, 556, 561, 604, 694, 697, 702], "1h": [139, 140, 151, 200, 236, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 604, 678, 694, 697, 702], "1w": [139, 140, 151, 200, 236, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 604, 694, 697, 702], "week": [139, 140, 151, 200, 236, 321, 324, 329, 332, 404, 405, 406, 407, 408, 410, 411, 412, 491, 525, 555, 556, 561, 604, 694, 697, 702, 705], "month": [139, 140, 151, 200, 236, 306, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 489, 490, 525, 555, 556, 561, 604, 675, 694, 697, 702], "1y": [139, 140, 151, 200, 236, 321, 324, 329, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 604, 694, 697, 702, 708], "year": [139, 140, 151, 200, 236, 311, 321, 322, 324, 329, 331, 404, 405, 406, 407, 408, 410, 411, 412, 489, 490, 525, 555, 556, 561, 604, 680, 694, 695, 697, 702, 704], "1i": [139, 140, 151, 200, 236, 321, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 556, 561, 604, 694], "Or": [139, 140, 151, 200, 236, 391, 518, 525, 555, 556, 561, 604], "10i": [139, 140, 236, 555, 556, 604], "often": [139, 140, 236, 400, 525, 555, 556, 604], "ascend": [139, 140, 236, 478, 555, 556, 604], "dynam": [139, 236, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 604], "matter": [139, 140, 236, 555, 556, 604], "neg": [139, 179, 180, 182, 236, 277, 278, 417, 418, 425, 447, 525, 555, 579, 580, 582, 595, 604, 643, 644, 791, 792, 800, 822, 864], "_lower_bound": [139, 236, 555, 604], "_upper_bound": [139, 236, 555, 604], "impact": [139, 236, 555, 604], "harder": [139, 236, 555, 604], "datapoint": [139, 236, 555, 604], "mondai": [139, 236, 332, 555, 604, 705], "date_rang": [139, 200, 236, 304, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 555, 604, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708], "30m": [139, 236, 324, 329, 555, 604, 697, 702], "time_min": [139, 236, 555, 604], "time_max": [139, 236, 555, 604], "boundari": [139, 236, 288, 289, 290, 525, 555, 604, 656, 657, 658, 864], "ad": [139, 196, 204, 236, 248, 486, 487, 525, 555, 592, 604], "time_count": [139, 236, 555, 604], "_lower_boundari": [139, 236, 555, 604], "_upper_boundari": [139, 236, 555, 604], "lower_bound": [139, 236, 525, 555, 604], "upper_bound": [139, 236, 282, 525, 555, 604], "time_agg_list": [139, 236, 555, 604], "idx": [139, 236, 282, 555, 604, 648, 788, 864], "arang": [139, 199, 209, 236, 555, 598, 604], "2i": [139, 236, 555, 604], "3i": [139, 236, 555, 604], "a_agg_list": [139, 236, 555, 604], "rollinggroupbi": [140, 236], "dynamic_groupbi": [140, 236, 556, 604], "groupby_dynam": [140, 236, 556, 604], "45": [140, 236, 324, 329, 432, 437, 556, 604, 697, 702, 807, 812], "48": [140, 236, 556, 604], "18": [140, 236, 324, 329, 333, 354, 367, 525, 556, 572, 604, 706], "19": [140, 151, 236, 324, 556, 561, 604, 697, 702], "43": [140, 236, 556, 604], "strptime": [140, 236, 327, 556, 604, 700], "2d": [140, 192, 236, 556, 604, 675], "sum_a": [140, 236, 556, 604], "min_a": [140, 236, 556, 604], "max_a": [140, 236, 556, 604], "to_list": [140, 236, 282, 556, 604, 648, 864], "seed": [141, 175, 236, 351, 414, 420, 525, 725, 784, 795, 864], "seed_1": [141, 236, 351, 525, 725, 864], "seed_2": [141, 236, 351, 525, 725, 864], "seed_3": [141, 236, 351, 525, 725, 864], "hash": [141, 236, 525, 864], "u64": [141, 236, 351, 399, 525, 572, 604, 725, 864], "10783150408545073287": [141, 236], "1438741209321515184": [141, 236], "10047419486152048166": [141, 236], "2047317070637311557": [141, 236], "grown": [144, 236], "baz": [145, 146, 165, 198, 219, 236, 448, 450, 559, 589, 604, 825], "intermedi": [146, 236, 559, 604, 728, 864], "linear": [146, 167, 220, 236, 263, 354, 380, 396, 408, 482, 483, 508, 525, 559, 573, 604, 629, 728, 766, 778, 864], "mask": [147, 149, 236, 264, 356, 358, 366, 525, 630, 720, 731, 734, 743, 763, 764, 787, 806, 856, 864], "left_on": [150, 151, 236, 560, 561, 604], "right_on": [150, 151, 236, 560, 561, 604], "joinstrategi": [150, 236, 560, 604], "suffix": [150, 151, 207, 236, 361, 363, 364, 365, 402, 435, 525, 560, 561, 594, 604, 810], "_right": [150, 151, 236, 560, 561, 604], "outer": [150, 236, 560, 604], "semi": [150, 236, 560, 604], "anti": [150, 236, 560, 604, 787, 788, 864], "cross": [150, 236, 560, 604], "join_asof": [150, 236, 560, 604], "stringcach": [150, 236, 534], "other_df": [150, 236, 560, 604], "by_left": [151, 236, 561, 604], "by_right": [151, 236, 561, 604], "asofjoinstrategi": [151, 236, 561, 604], "allow_parallel": [151, 236, 560, 561, 604], "force_parallel": [151, 236, 560, 561, 604], "asof": [151, 236, 561, 604], "rather": [151, 236, 456, 561, 604, 831], "asof_join": [151, 236], "search": [151, 236, 561, 604], "last": [151, 165, 183, 186, 197, 222, 236, 258, 260, 268, 281, 299, 306, 322, 331, 450, 461, 516, 525, 561, 583, 586, 588, 600, 604, 622, 625, 634, 647, 666, 675, 695, 704, 825, 837, 864], "greater": [151, 236, 424, 450, 525, 561, 604, 799, 825, 864], "numer": [151, 236, 288, 289, 290, 400, 419, 525, 534, 561, 604, 656, 657, 658, 742, 786, 793, 864], "distanc": [151, 236, 561, 604], "plan": [151, 152, 236, 537, 542, 543, 553, 560, 561, 574, 581, 596, 604], "gdp": [151, 236, 561, 604], "2016": [151, 236, 561, 604], "2017": [151, 236, 561, 604], "2018": [151, 236, 561, 604], "2019": [151, 236, 561, 604], "record": [151, 236, 561, 604], "jan": [151, 236, 561, 604], "1st": [151, 236, 561, 604], "4164": [151, 236, 561, 604], "4411": [151, 236, 561, 604], "4566": [151, 236, 561, 604], "4696": [151, 236, 561, 604], "popul": [151, 236, 561, 604], "12th": [151, 236, 561, 604], "82": [151, 236, 561, 604], "66": [151, 236, 561, 604, 778, 864], "83": [151, 236, 561, 604], "52": [151, 205, 236, 413, 525, 561, 593, 604], "request": [152, 236], "small": [152, 236, 324, 329, 426, 427, 525, 548, 604], "describe_plan": [152, 236, 604], "unoptim": [152, 236, 543, 604], "describe_optimized_plan": [152, 236, 604], "show_graph": [152, 236, 604], "un": [152, 236], "graphviz": [152, 236, 581, 604], "advis": [152, 236], "thei": [152, 236, 340, 403, 525, 604, 773, 864], "axi": [154, 155, 157, 158, 185, 236, 569, 604], "null_strategi": [155, 185, 236], "nullstrategi": [155, 185, 236], "propag": [155, 185, 236, 388, 389, 525, 758, 759, 864], "spam": [155, 236], "id_var": [157, 236, 569, 604], "value_var": [157, 236, 569, 604], "variable_nam": [157, 236, 569, 604], "value_nam": [157, 236, 569, 604], "unpivot": [157, 236, 569, 604], "leav": [157, 236, 569, 604], "identifi": [157, 236, 569, 604], "massag": [157, 236, 569, 604], "measur": [157, 236, 569, 604], "One": [160, 165, 236, 864], "what": [160, 236, 847, 855, 864], "struct": [160, 195, 198, 236, 282, 449, 450, 471, 486, 487, 488, 525, 589, 604, 648, 824, 825], "pack": [160, 236], "expr_unique_subset": [160, 236], "df_nuniqu": [160, 236], "equival": [160, 236, 442, 817, 829, 830], "df_agg_nuniqu": [160, 236], "simpl": [160, 236], "as_dict": [162, 236], "predict": [162, 165, 168, 200, 236], "k": [162, 236, 286, 368, 467, 525, 652, 745, 850, 864], "l": [162, 236, 348, 525], "pearson": [163, 236, 368, 424, 507, 525, 745, 799, 864], "correl": [163, 236, 507, 512], "coeffici": [163, 236, 424, 525, 799, 864], "corrcoef": [163, 236], "func": [164, 236, 571, 604, 613, 864], "offer": [164, 236, 571, 604], "wai": [164, 236, 571, 604], "recommend": [164, 236], "fulli": [164, 236], "advantag": [164, 236], "cast_str_to_int": [164, 236, 571, 604], "col_nam": [164, 236, 571, 604], "tdf": [164, 236, 571, 604], "aggregate_fn": [165, 236], "pivotagg": [165, 236], "sort_column": [165, 236], "well": [165, 236], "predefin": [165, 236], "transpos": [165, 219, 236], "discoveri": [165, 236], "interpol": [167, 220, 236, 345, 380, 396, 408, 508, 525, 573, 604, 766, 778, 864], "rollinginterpolationmethod": [167, 220, 236, 396, 408, 508, 525, 573, 604, 766, 778, 864], "midpoint": [167, 220, 236, 396, 408, 508, 525, 573, 604, 766, 778, 864], "subsequ": [168, 236], "pair": [169, 236, 575, 604], "old": [169, 236, 575, 604], "new_col": [170, 236], "val": [172, 236, 286, 466, 525, 576, 604, 652], "by_pred": [173, 236], "accord": [173, 236, 680], "mutual": [173, 236], "exclus": [173, 236], "addition": [173, 236], "clariti": [173, 236], "suppli": [173, 236], "anyth": [173, 236], "toomanyrowsreturn": [173, 236, 534], "norowsreturn": [173, 236, 534], "inherit": [173, 236], "rowsexcept": [173, 236, 534], "frac": [175, 236, 337, 338, 339, 414, 424, 467, 525, 712, 713, 714, 784, 799, 850, 864], "with_replac": [175, 236, 414, 525, 784, 864], "shuffl": [175, 209, 236, 414, 525, 598, 784, 864], "modul": [175, 236, 414, 420, 524, 525, 784, 864], "whenthen": [177, 236, 578, 604], "whenthenthen": [177, 236, 578, 604], "shift_and_fil": [179, 236, 525, 604, 864], "shift": [180, 236, 265, 300, 392, 418, 482, 525, 580, 604, 631, 668, 762, 792, 864], "shrink": [181, 236, 419, 525, 793, 794, 864], "fit": [181, 199, 236, 419, 525, 793, 794, 864], "hold": [181, 236, 481], "nulls_last": [183, 236, 258, 260, 426, 525, 583, 604, 622, 625, 864], "ddof": [184, 201, 236, 429, 472, 507, 512, 513, 517, 525, 584, 590, 604, 803, 854, 864], "deviat": [184, 236, 338, 410, 429, 513, 525, 584, 604, 713, 803, 864], "degre": [184, 201, 236, 429, 472, 507, 512, 525, 803, 854, 864], "freedom": [184, 201, 236, 429, 472, 507, 512, 525, 803, 854, 864], "816497": [184, 236], "21": [185, 236], "16a": [185, 236], "27b": [185, 236], "38c": [185, 236], "nth": [187, 236, 450, 463, 525, 587, 604, 825, 839, 864], "mostli": [188, 236, 346, 525], "categoricaltyp": [188, 236], "large_str": [188, 236], "as_seri": [189, 236], "fruit": [189, 236, 394, 402, 435, 451, 459, 525, 810, 826], "car": [189, 236, 394, 402, 459, 525], "beetl": [189, 236, 394, 402, 459, 525], "audi": [189, 236, 394, 402, 459, 525], "28": [189, 236, 333, 706], "300": [189, 236, 774, 775, 777, 864], "hot": [191, 236], "re": [192, 236, 499], "ll": [192, 236, 847, 864], "numpy_arrai": [192, 236], "date_as_object": [193, 236], "sent": [193, 236, 847, 864], "datetime64": [193, 236], "pandas_df": [193, 236], "three": [195, 236, 415, 514, 525], "four": [195, 236, 514], "five": [195, 236], "num": [195, 236, 355, 358, 456, 525], "include_head": [196, 236], "header_nam": [196, 236], "column_nam": [196, 236], "iter": [196, 236, 299, 525, 666, 864], "veri": [196, 236, 539, 604, 659, 864], "perhap": [196, 236], "column_2": [196, 236], "name_gener": [196, 236, 282, 648], "base_nam": [196, 236], "my_column_": [196, 236], "my_column_0": [196, 236], "my_column_1": [196, 236], "my_column_2": [196, 236], "uniquekeepstrategi": [197, 236, 588, 604], "conjunct": [197, 236], "decompos": [198, 236, 589, 604], "t_a": [198, 236, 589, 604], "t_b": [198, 236, 589, 604], "t_c": [198, 236, 589, 604], "t_d": [198, 236, 589, 604], "womp": [198, 236, 589, 604], "t_": [198, 236, 589, 604], "t_struct": [198, 236, 589, 604], "step": [199, 236, 477], "unstackdirect": [199, 236], "form": [199, 236, 392, 525, 762, 864], "much": [199, 236, 299, 525, 666, 864], "pivot": [199, 236], "phase": [199, 236], "subject": [199, 236], "ascii_uppercas": [199, 236], "col1": [199, 236], "col2": [199, 236], "h": [199, 236, 348, 419, 525], "col1_0": [199, 236], "col1_1": [199, 236], "col1_2": [199, 236], "col2_0": [199, 236], "col2_1": [199, 236], "col2_2": [199, 236], "time_column": [200, 236], "frequenc": [200, 236], "forward_fil": [200, 236, 525], "06": [200, 236, 323, 335, 697, 705], "varianc": [201, 236, 339, 368, 412, 472, 517, 525, 590, 604, 714, 745, 782, 854, 864], "grow": [202, 236], "b_squar": [204, 236, 592, 604], "36": [204, 236, 592, 604], "named_expr": [205, 236, 593, 604], "is_not": [205, 236, 525, 593, 604], "opt": [205, 236, 593, 604], "with_columns_kwarg": [205, 236, 593, 604], "row_nr": [206, 236, 595, 604, 788, 864], "complet": [207, 847, 864], "idiomat": 207, "_sum": 207, "_tail_sum": 207, "bar_sum": 207, "bar_tail_sum": 207, "sub": [209, 435, 451, 810, 826], "triangl": [209, 598], "group_df": [209, 598], "nr": [212, 222, 599, 600], "maxim": [214, 226, 256, 525, 620, 864], "833333": 215, "minim": [217, 229, 257, 262, 419, 525, 621, 628, 753, 793, 864], "pivot_column": 219, "values_column": 219, "pivotop": 219, "larg": [219, 426, 427, 525], "overview": [236, 525, 534, 604, 864], "public": [236, 525, 534, 604, 864], "columnstyp": 236, "variou": [236, 525, 604, 864], "behavior": [236, 249, 476, 502, 505, 525], "mydatafram": 236, "notic": [236, 864], "initi": [236, 486, 495], "df4": 236, "drop_in_plac": 236, "drop_nul": [236, 302, 525, 604, 864], "estimated_s": [236, 864], "explod": [236, 348, 525, 604, 864], "find_idx_by_nam": 236, "frame_equ": [236, 324, 329], "get_column": [236, 515], "groupby_rol": [236, 404, 405, 406, 407, 408, 410, 411, 412, 525, 555, 604], "hash_row": 236, "hstack": 236, "insert_at_idx": 236, "is_dupl": [236, 525, 864], "is_empti": [236, 864], "is_uniqu": [236, 525, 864], "melt": [236, 604], "n_uniqu": [236, 525, 597, 864], "partition_bi": 236, "pearson_corr": 236, "pipe": [236, 604], "quantil": [236, 408, 525, 604, 778, 864], "replace_at_idx": 236, "shrink_to_fit": [236, 864], "take_everi": [236, 525, 604, 864], "to_arrow": [236, 864], "to_dict": 236, "to_numpi": [236, 376, 525, 864], "to_panda": [236, 864], "to_struct": [236, 457, 458], "unnest": [236, 449, 450, 604, 824, 825], "unstack": 236, "upsampl": 236, "var": [236, 525, 604, 864], "write_avro": 236, "write_ipc": 236, "write_json": [236, 574, 604], "write_parquet": 236, "favor": 239, "futur": 239, "94": [244, 525], "confus": [246, 361, 363, 525], "tt": [246, 525], "tf": [246, 247, 525], "ff": [246, 247, 525], "upcast": [248, 525], "assum": [249, 525, 565, 598, 604], "a_times_2": [249, 525], "invers": [250, 251, 252, 253, 254, 255, 525, 614, 615, 616, 617, 618, 619, 864], "cosin": [250, 251, 291, 292, 376, 525, 614, 615, 660, 661, 864], "570796": [250, 252, 525, 614, 616, 864], "hyperbol": [251, 253, 255, 292, 423, 465, 525, 615, 617, 619, 661, 798, 841, 864], "sine": [252, 253, 376, 422, 423, 525, 616, 617, 797, 798, 864], "881374": [253, 525, 617, 864], "tangent": [254, 255, 464, 465, 525, 618, 619, 840, 841, 864], "785398": [254, 525, 618, 864], "would": [258, 260, 268, 381, 397, 478, 525, 622, 625, 634, 767, 847, 864], "arg_sort": [260, 525, 625, 864], "sublist": [261, 262, 264, 265, 267, 268, 269, 270, 271, 278, 281, 627, 628, 630, 631, 633, 634, 635, 636, 637, 644, 647, 736, 864], "membership": [264, 630], "null_behavior": [265, 300, 525, 631, 668, 864], "nullbehavior": [265, 300, 525, 631, 668, 864], "th": [265, 300, 424, 525, 631, 668, 799, 864], "against": [266, 632, 870], "blindli": [266, 632], "worth": [266, 632], "enough": [266, 424, 525, 632, 799, 864], "concat_list": [266, 492, 632], "rank": [266, 492, 512, 525, 632, 864], "taken": [278, 447, 462, 525, 644, 822], "n_field_strategi": [282, 648], "tostructstrategi": [282, 648], "first_non_nul": [282, 648], "max_width": [282, 648], "field_0": [282, 648], "field_1": [282, 648], "field_n": [282, 648], "know": [282, 442, 817, 847, 855, 864], "caller": [282, 565, 598, 604], "incorrectli": 282, "downstream": [282, 416, 525, 789, 864], "advic": 282, "col_name_": [282, 648], "col_name_0": [282, 648], "col_name_1": [282, 648], "col_name_2": [282, 648], "strict": [285, 433, 453, 525, 650, 786, 808, 828, 864], "throw": [285, 438, 525, 650, 813, 864], "due": [285, 525, 650, 864], "overflow": [285, 297, 298, 460, 525, 650, 664, 665, 836, 864], "categoricalord": [286, 652], "lexic": [286, 652], "min_val": [288, 290, 525, 656, 658, 864], "max_val": [288, 289, 525, 656, 657, 864], "foo_clip": [288, 289, 290, 525], "clip": [289, 290, 525, 657, 658, 864], "543081": [292, 525, 661, 864], "cumul": [294, 295, 296, 297, 298, 486, 487, 488, 525, 662, 663, 664, 665, 864], "a_revers": [294, 295, 296, 297, 298, 377, 402, 459, 525], "uint16": [297, 298, 460, 525, 664, 665, 836, 864], "prevent": [297, 298, 367, 460, 525, 664, 665, 836, 864], "min_period": [299, 337, 338, 339, 403, 404, 405, 406, 407, 408, 410, 411, 412, 525, 666, 712, 713, 714, 773, 774, 775, 776, 777, 778, 780, 781, 782, 864], "slide": [299, 525, 666, 864], "anoth": [299, 304, 330, 427, 525, 594, 604, 613, 666, 673, 703, 786, 864], "realli": [299, 525, 666, 864], "complex": [299, 467, 525, 666, 850, 864], "visit": [299, 525, 666, 864], "44": [301, 525], "drop_nan": [303, 525, 864], "tu": [304, 308, 328, 333, 673, 674, 677, 701, 706], "lose": [304, 673], "2001": [304, 306, 308, 309, 316, 318, 321, 322, 323, 324, 325, 328, 329, 331, 332, 333, 335, 453, 673, 675, 677, 678, 681, 682, 683, 684, 686, 688, 689, 691, 692, 694, 695, 696, 697, 698, 700, 701, 702, 704, 705, 706, 708, 828], "tu_m": [304, 673], "tu_n": [304, 673], "tz": [305, 330, 334, 674, 703, 707], "with_time_zon": [305, 674], "timestamp": [305, 674], "extract": [306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 325, 326, 331, 332, 335, 437, 438, 675, 676, 678, 679, 680, 684, 685, 686, 687, 689, 690, 691, 692, 693, 695, 696, 698, 699, 704, 705, 708, 812, 813], "weekdai": [306, 322], "day_of_month": [306, 322, 332], "ordinal_dai": [306, 332], "day_of_year": [306, 322, 332], "diff": [307, 310, 313, 315, 317, 320, 326, 525, 676, 679, 685, 687, 690, 693, 699, 864], "days_diff": 307, "epochtimeunit": [308, 677], "unix": [308, 677], "epoch_n": [308, 677], "epoch_": [308, 677], "978307200000000": [308, 328, 677, 701], "978307200": [308, 677], "978393600000000": [308, 328, 677, 701], "978393600": [308, 677], "978480000000000": [308, 328, 677, 701], "978480000": [308, 677], "hours_diff": 310, "iso": [311, 331, 332, 680, 704, 705], "correspond": [311, 397, 525, 680, 767, 864], "microseconds_diff": 313, "1001": [313, 315, 320], "002": [313, 315, 320, 491, 685, 687, 693], "003": [313, 315, 320], "997": [313, 315, 320], "998": [313, 315, 320], "999": [313, 315, 320], "milliseconds_diff": 315, "59": [316, 325, 490, 689, 698], "minutes_diff": 317, "1440": [317, 690], "nanoseconds_diff": 320, "1000000": [320, 456, 693], "leap": [321, 694], "account": [321, 337, 338, 339, 525, 694, 712, 713, 714, 864], "minu": [321, 694], "dictat": [321, 694], "2000": [321, 694], "2005": [321, 694], "date_plus_1i": [321, 694], "1y2mo": [321, 694], "date_min": 321, "1998": [321, 694], "2002": [321, 323, 335, 694, 708], "1999": [321, 694], "2003": [321, 694], "2004": [321, 694], "2006": [321, 694], "ordin": [322, 397, 525, 695, 767, 864], "366": [322, 695], "180": [323, 335], "divid": [324, 329, 337, 338, 339, 368, 525, 697, 702, 712, 713, 714, 745, 864], "half": [324, 337, 338, 339, 525, 697, 712, 713, 714, 864], "seconod": [324, 697], "eg": [324, 329, 453], "225": [324, 329], "to_fram": [324, 329, 453, 457, 458, 787, 788, 824, 825, 828, 864], "10m": [324, 329, 697, 702], "milli": [325, 698], "micro": [325, 698], "compon": [325, 453, 489, 490, 491, 698], "456789": 325, "654321": 325, "111110": 325, "765431": 325, "sec": 325, "11111": 325, "seconds_diff": 326, "fmt": [327, 353, 453, 496, 525, 558, 604, 700, 828], "timestamp_n": [328, 701], "timestamp_m": 328, "978307200000": 328, "978393600000": 328, "978480000000": 328, "naiv": [330, 703], "53": [331, 704], "sundai": [332, 705], "incorrect": [333, 416, 525, 598, 706, 789, 864], "tu_u": [333, 706], "32971": [333, 706], "32974": [333, 706], "32976": [333, 706], "europ": [334, 674, 707], "london": [334, 674, 707], "gmt": [334, 674, 707], "bst": [334, 674, 707], "718281828459045": [336, 373, 525, 710, 748, 864], "formula": [336, 525, 710, 864], "pk": [336, 525, 710, 864], "459148": [336, 525], "754888": [336, 525], "com": [337, 338, 339, 436, 525, 712, 713, 714, 811, 864], "span": [337, 338, 339, 525, 712, 713, 714, 864], "half_lif": [337, 338, 339, 525, 712, 713, 714, 864], "exponenti": [337, 338, 339, 341, 525, 712, 713, 714, 715, 864], "weight": [337, 338, 339, 403, 404, 405, 406, 407, 408, 410, 411, 412, 424, 525, 712, 713, 714, 773, 774, 775, 776, 777, 778, 780, 781, 782, 799, 864], "averag": [337, 397, 525, 712, 767, 864], "decai": [337, 338, 339, 525, 712, 713, 714, 864], "term": [337, 338, 339, 439, 442, 525, 712, 713, 714, 814, 817, 864], "mass": [337, 338, 339, 525, 712, 713, 714, 864], "gamma": [337, 338, 339, 525, 712, 713, 714, 864], "foral": [337, 338, 339, 525, 712, 713, 714, 864], "geq": [337, 338, 339, 525, 712, 713, 714, 864], "theta": [337, 338, 339, 525, 712, 713, 714, 864], "life": [337, 338, 339, 525, 712, 713, 714, 864], "exp": [337, 338, 339, 525, 712, 713, 714, 864], "ln": [337, 338, 339, 525, 712, 713, 714, 864], "smooth": [337, 338, 339, 525, 712, 713, 714, 864], "factor": [337, 338, 339, 466, 525, 712, 713, 714, 849, 864], "leq": [337, 338, 339, 525, 712, 713, 714, 864], "begin": [337, 338, 339, 436, 525, 712, 713, 714, 811, 864], "imbal": [337, 338, 339, 525, 712, 713, 714, 864], "ew": [337, 338, 339, 525, 712, 713, 714, 864], "w_i": [337, 338, 339, 525, 712, 713, 714, 864], "recurs": [337, 338, 339, 525, 712, 713, 714, 864], "y_0": [337, 338, 339, 525, 712, 713, 714, 864], "x_0": [337, 338, 339, 525, 712, 713, 714, 864], "y_t": [337, 338, 339, 525, 712, 713, 714, 864], "y_": [337, 338, 339, 525, 712, 713, 714, 864], "x_t": [337, 338, 339, 525, 712, 713, 714, 864], "observ": [337, 338, 339, 525, 712, 713, 714, 864], "428571": [337, 525], "bia": [338, 339, 368, 409, 424, 525, 713, 714, 745, 779, 799, 864], "unbias": [338, 339, 525, 713, 714, 864], "963624": [338, 525, 713, 864], "928571": [339, 525, 714, 864], "wildcard": [340, 474, 481, 486, 487, 493, 495, 509, 525], "regex": [340, 431, 432, 435, 436, 437, 443, 444, 451, 481, 493, 525, 806, 807, 810, 811, 812, 818, 819, 826], "aa": [340, 493, 525], "ba": [340, 493, 525], "cc": [340, 493, 525], "718282": [341, 525], "389056": [341, 525], "54": [341, 525], "59815": [341, 525], "expand": [342, 348, 400, 525, 716, 864], "group_col": [346, 473, 525], "g1": [346, 391, 473, 525], "g2": [346, 391, 473, 525], "lt": [346, 473, 525], "gte": [346, 473, 525], "r": [348, 432, 436, 437, 443, 525, 807, 811, 812, 818], "word": [348, 525], "9774092659964970114": [351, 525], "13614470193936745724": [351, 525], "1101441246220388612": [351, 525], "11638928888656214026": [351, 525], "13382926553367784577": [351, 525], "cumsum": [353, 525, 558, 604, 864], "interpolationmethod": [354, 525, 728, 864], "regrid": [354, 525], "grid": [354, 525], "df_original_grid": [354, 525], "grid_point": [354, 525], "df_new_grid": [354, 525], "include_bound": [355, 525], "primit": [355, 359, 525, 847, 864], "finit": [357, 512, 525, 733, 864], "optional_memb": [359, 525, 736, 864], "infinit": [360, 525, 737, 864], "_isnan": [361, 525], "b_isnan": [361, 525], "negat": [362, 525], "_is_not_nan": [363, 525], "b_is_not_nan": [363, 525], "_not_nul": [364, 525], "a_not_nul": [364, 525], "b_not_nul": [364, 525], "_isnul": [365, 525], "a_isnul": [365, 525], "b_isnul": [365, 525], "undo": [367, 384, 525], "duplicateerror": [367, 525, 534], "occurr": [367, 525], "333333": [367, 412, 525, 762, 782, 864], "fisher": [368, 424, 525, 745, 799, 864], "fourth": [368, 525, 745, 864], "central": [368, 424, 525, 745, 799, 864], "definit": [368, 525, 745, 864], "subtract": [368, 525, 745, 864], "distribut": [368, 424, 525, 745, 799, 864], "elimin": [368, 525, 745, 864], "come": [368, 525, 535, 603, 745, 864], "bias": [368, 424, 525, 745, 799, 864], "scipi": [368, 424, 525, 745, 799, 864], "stat": [368, 424, 525, 745, 799, 864], "153061": [368, 525], "logarithm": [373, 374, 525, 748, 749, 864], "584963": [373, 525], "30103": [374, 525], "60206": [374, 525], "lowest": [375, 525], "9223372036854775808": [375, 525], "agg_list": [376, 525], "elementwis": [376, 403, 404, 405, 406, 407, 408, 410, 411, 412, 474, 475, 525, 773, 774, 775, 776, 777, 778, 780, 781, 782, 864], "third": [376, 525], "parti": [376, 525], "book": [376, 525], "argmax": [376, 525], "_revers": [377, 402, 459, 525], "b_revers": [377, 402, 459, 525], "computeerror": [381, 534], "keep_nam": [384, 525], "poison": [388, 389, 525, 758, 759, 864], "nanmax": [388, 389, 525, 758, 759, 864], "wherea": [388, 389, 525, 557, 564, 604, 758, 759, 864], "subgroup": [391, 525], "max_by_group": [391, 525], "recent": [392, 525, 762, 864], "percent": [392, 525, 762, 864], "090909": [392, 525], "expon": [393, 525], "power": [393, 525], "reverse_": [394, 525], "reverse_a": [394, 525], "reverse_fruit": [394, 525], "reverse_b": [394, 525], "reverse_car": [394, 525], "rankmethod": [397, 525, 767, 864], "ti": [397, 525, 767, 864], "appropri": [397, 525, 767, 864], "competit": [397, 525, 767, 864], "highest": [397, 470, 512, 525, 767, 864], "immedi": [397, 514, 525, 767, 864], "64bit": [399, 525, 769, 864], "safe": [399, 525, 769, 847, 864], "coerc": [400, 525], "dim": [401, 525, 771, 864], "flat": [401, 525, 771, 864], "fruits_revers": [402, 459, 525], "cars_revers": [402, 459, 525], "window_s": [403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 525, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 864], "rolling_min": [403, 525, 773, 864], "rolling_max": [403, 525, 773, 864], "rolling_mean": [403, 525, 773, 864], "rolling_sum": [403, 525, 773, 864], "multipli": [403, 404, 405, 406, 407, 408, 410, 411, 412, 525, 773, 774, 775, 776, 777, 778, 780, 781, 782, 864], "358899": [403, 525], "041452": [403, 525], "567764": [403, 525], "travers": [404, 405, 407, 410, 411, 412, 525, 774, 775, 777, 780, 781, 782, 864], "vector": [404, 405, 407, 410, 411, 412, 525, 774, 775, 777, 780, 781, 782, 864], "5h": [404, 405, 406, 407, 408, 410, 411, 412, 525], "33": [408, 413, 481, 525, 778, 864], "skew": [409, 525, 779, 864], "527525": [410, 525, 780, 864], "digit": [413, 456, 525, 783, 807, 831, 864], "17": [413, 525, 660, 697, 864], "maintain": [415, 468, 525, 604, 785, 851, 864], "six": [415, 525], "code": [416, 525, 563, 604, 789, 864], "care": [416, 525, 789, 864], "extrema": [419, 525, 793, 864], "112": [419, 525], "129": [419, 525], "i8": [419, 525, 772, 864], "8589934592": [419, 525], "1073741824": [419, 525], "content": [420, 471, 525, 795, 864], "175201": [423, 525, 798, 864], "unimod": [424, 525, 799, 864], "skewtest": [424, 525, 799, 864], "speak": [424, 525, 799, 864], "g_1": [424, 525, 799, 864], "m_3": [424, 525, 799, 864], "m_2": [424, 525, 799, 864], "m_i": [424, 525, 799, 864], "sum_": [424, 525, 799, 864], "texttt": [424, 525, 799, 864], "k_3": [424, 525, 799, 864], "k_2": [424, 525, 799, 864], "sqrt": [424, 525, 799, 864], "343622": [424, 525], "larger": [426, 512, 525], "414214": [428, 525, 802, 864], "substr": [431, 435, 443, 444, 448, 449, 450, 451, 806, 810, 818, 819, 823, 824, 825, 826], "treat": [431, 443, 444, 806, 818, 819], "ends_with": [431, 451, 826], "crab": [431, 806], "dog": [431, 454, 455, 483, 806], "rab": [431, 806], "success": [432, 437, 807, 812], "overlap": [432, 437, 807, 812], "captur": [432, 436, 437, 807, 811, 812], "123": [432, 437, 444, 807, 812, 819, 845, 864], "bla": [432, 437, 807, 812], "asd": [432, 437, 807, 812], "678": [432, 437, 807, 812], "910t": [432, 437, 807, 812], "count_digit": 432, "transferencod": [433, 434, 808, 809], "hex": [433, 434, 808, 809], "base64": [433, 434, 808, 809], "thrown": [433, 808], "unabl": [433, 808], "unhandl": [433, 808], "666f6f": [433, 434, 808, 809], "626172": [433, 434, 808, 809], "mango": [435, 451, 810, 826], "go": [435, 810], "has_suffix": 435, "group_index": [436, 811], "vote": [436, 811], "ballon_dor": [436, 811], "candid": [436, 811], "messi": [436, 811], "ref": [436, 811], "candidat": [436, 811], "jorginho": [436, 811], "ronaldo": [436, 811], "w": [436, 811], "extracted_nr": 437, "910": [437, 812], "json_path": [438, 813], "jsonpath": [438, 813], "regardless": [438, 813], "json_val": [438, 813], "n_char": [439, 814], "caf\u00e9": [439, 442, 814, 817], "345": [439, 442, 814, 817], "\u6771\u4eac": [439, 442, 814, 817], "nchar": [439, 442], "fillchar": [440, 445, 815, 820], "justifi": [440, 445, 815, 820], "pad": [440, 445, 456, 815, 820, 831], "cow": [440, 445, 815, 820], "monkei": [440, 445, 815, 820], "hippopotamu": [440, 445, 815, 820], "whitespac": [441, 446, 452, 816, 821, 827], "trail": [441, 446, 452, 821, 827], "text": [442, 443, 444, 817], "replace_al": [443, 818], "123abc": [443, 818], "abc456": [443, 818], "abcabc": [444, 819], "123a123": [444, 819], "bc": [444, 819], "trim": [446, 452, 816, 821, 827], "subslic": [447, 822], "pear": [447, 822], "papaya": [447, 822], "dragonfruit": [447, 822], "s_slice": 447, "ear": [447, 822], "aya": [447, 822], "uit": [447, 822], "ya": [447, 822], "onf": [447, 822], "inclus": [448, 449, 823, 824], "a_1": [449, 824, 844, 864], "d_4": [449, 824], "rename_field": [449, 450, 824, 825], "first_part": [449, 450, 824, 825], "second_part": [449, 450, 824, 825], "remaind": [450, 825], "prefix": [451, 456, 525, 826, 831], "app": [451, 826], "has_prefix": 451, "tz_awar": [453, 828], "strftime": [453, 828], "convers": [453, 534, 828, 846, 847, 864], "anywher": [453, 828], "3f": 453, "sun": [453, 828], "34": [453, 828], "lowercas": [454, 829], "variant": [454, 455], "uppercas": [455, 830], "10000": 456, "100000": 456, "0010": 456, "0001": 456, "00000": 456, "00001": 456, "my_struct": [457, 458, 514], "NOT": [458, 554, 604], "anymor": 458, "panicexcept": [458, 534], "761594": [465, 525, 841, 864], "replic": [466, 525, 849, 864], "vals_phys": [466, 525], "largest": [467, 525, 850, 864], "smallest": [467, 525, 850, 864], "bottom_k": [467, 525], "appear": [469, 525, 852, 864], "value_count": [469, 525, 864], "9223372036854775807": [470, 525], "multithread": [471, 525], "columnwis": [474, 475], "AND": 474, "bitwis": [474, 475], "returns_scalar": 476, "Be": 477, "argsort": [478, 525, 864], "hamburg": 481, "concat": [482, 483, 654, 755, 864], "lag": 482, "mimic": 482, "a_lag_": 482, "a_rol": 482, "plai": 483, "swim": 483, "walk": 483, "full_sent": 483, "covari": 485, "intoexpr": [486, 495], "include_init": 486, "accumul": [486, 487, 495, 509], "fn": [486, 487, 495, 509], "new_valu": [486, 487, 495, 509], "simpli": [486, 495], "cumreduc": 486, "across": [488, 515], "syntact": [488, 493, 494, 497, 508, 511, 515, 802, 864], "sugar": [488, 493, 494, 497, 508, 511, 515, 802, 864], "cumfold": 488, "999999": 490, "add_week": 491, "add_dai": 491, "add_second": 491, "add_millisecond": 491, "add_hour": 491, "add_millisec": 491, "ond": 491, "eval": 492, "arr": [492, 519, 847, 857, 864], "mathemat": 492, "a_b_doubl": 492, "fstring": 496, "placehold": 496, "hello_": 496, "_world": 496, "foo_": 496, "_bar_": 496, "foo_a_bar_1": 496, "foo_b_bar_2": 496, "foo_c_bar_3": 496, "agg_group": [497, 525], "export": 499, "allow_object": 500, "valueexcept": 500, "544705": 507, "mode": [510, 525, 864], "propagate_nan": 512, "spearman": 512, "605551": 513, "605551275463989": 513, "sever": 514, "a_and_b": 514, "isn": 518, "thens": 518, "chain": 518, "sometim": 524, "ab": [525, 864], "arcco": [525, 864], "arccosh": [525, 864], "arcsin": [525, 864], "arcsinh": [525, 864], "arctan": [525, 864], "arctanh": [525, 864], "arg_max": [525, 864], "arg_min": [525, 864], "arg_uniqu": [525, 864], "backward_fil": 525, "clip_max": [525, 864], "clip_min": [525, 864], "co": [525, 864], "cosh": [525, 864], "cumcount": 525, "cummax": [525, 864], "cummin": [525, 864], "cumprod": [525, 864], "cumulative_ev": [525, 864], "entropi": [525, 864], "ewm_mean": [525, 864], "ewm_std": [525, 864], "ewm_var": [525, 864], "extend_const": [525, 864], "flatten": 525, "inspect": [525, 604], "is_between": 525, "is_finit": [525, 864], "is_first": [525, 864], "is_in": [525, 864], "is_infinit": [525, 864], "is_nan": [525, 864], "is_not_nan": [525, 864], "is_not_nul": [525, 864], "kurtosi": [525, 864], "log10": [525, 864], "map_alia": 525, "nan_max": [525, 864], "nan_min": [525, 864], "pct_chang": [525, 864], "pow": 525, "reinterpret": [525, 864], "repeat_bi": 525, "reshap": [525, 864], "rolling_appli": [525, 864], "rolling_median": [525, 864], "rolling_quantil": [525, 864], "rolling_skew": [525, 864], "rolling_std": [525, 864], "rolling_var": [525, 864], "search_sort": [525, 864], "set_sort": [525, 864], "shrink_dtyp": [525, 864], "sin": [525, 864], "sinh": [525, 864], "sort_bi": 525, "tan": [525, 864], "tanh": [525, 864], "to_phys": [525, 864], "top_k": [525, 864], "unique_count": [525, 864], "expos": 534, "registr": 534, "miscellan": 534, "unset": 534, "arrowerror": 534, "invalidoperationerror": 534, "nodataerror": 534, "notfounderror": 534, "schemaerror": 534, "shapeerror": 534, "build_info": 534, "show_vers": 534, "sqlcontext": [534, 870], "hit": [537, 604], "node": [537, 558, 565, 572, 604], "huge": [540, 604], "saver": [540, 604], "500": [548, 604, 684, 686, 692, 698, 774, 775, 777, 864], "purpos": [548, 604], "help": [548, 604], "influenc": [548, 565, 604], "read_json": [553, 596, 604], "lazygroupbi": [554, 555, 556, 604], "typeerror": [554, 604], "subscript": [554, 604], "validate_output_schema": [565, 604], "past": [565, 604], "paramount": [565, 604], "hard": [565, 604], "bug": [565, 598, 604], "invari": [565, 604], "upheld": [565, 604], "prune": [565, 604], "show_plot": [572, 604], "truncate_nod": [572, 604], "figsiz": [572, 581, 604], "gantt": [572, 604], "chart": [572, 604], "matplotlib": [572, 581, 604], "plot": [572, 581, 604], "groupby_partit": [572, 604], "470": [572, 604], "475": [572, 604], "1964": [572, 604], "from_json": [574, 604], "output_path": [581, 604], "raw_output": [581, 604], "figur": [581, 604], "290994": [584, 604], "118034": [584, 604], "433013": [584, 604], "1875": [590, 604], "extern": [594, 604], "df_a": [594, 604], "df_other": [594, 604], "afoo": [594, 604], "cfoo": [594, 604], "train_df": [594, 604], "feature_0": [594, 604], "feature_1": [594, 604], "test_df": [594, 604], "_train": [594, 604], "feature_0_train": [594, 604], "dataframescan": [596, 604], "output_schema": [596, 604], "unique_nam": 597, "againat": 604, "instanti": 604, "profil": 604, "sink_parquet": 604, "data_pagesize_limit": 604, "slightli": 604, "with_context": 604, "sr": [609, 864], "new_aliased_sr": [609, 864], "append_chunk": [612, 864], "super": [612, 864], "skip_nul": [613, 864], "141593": [614, 864], "292432": [615, 864], "549306": [619, 864], "listnamespac": 626, "catnamespac": 651, "12345": [653, 722, 783, 864], "56789": [653, 722, 783, 864], "901234": [653, 722, 783, 864], "pi": [660, 797, 840, 864], "1232e": [660, 864], "quick": [667, 864], "mix": [667, 864], "series_num": [667, 864], "581139": [667, 864], "series_str": [667, 864], "datetimenamespac": 672, "epoch": 674, "1583020800": 674, "1585699200": 674, "1588291200": 674, "nyc": 674, "edt": 674, "1583038800": 674, "1585717200": 674, "1588309200": 674, "500m": [684, 686, 692, 698], "500000": 684, "2m": 689, "500000000": 692, "date_minus_1y_2mon": 694, "165": [697, 702], "series_equ": [697, 702, 864], "timestamp_u": 701, "978307200000000000": 701, "978393600000000000": 701, "978480000000000000": 701, "005": [710, 864], "06293300616044681": [710, 864], "65": [710, 864], "8568409950394724": [710, 864], "4000000": [711, 864], "814697265625": [711, 864], "bitmask": [724, 864], "swiftli": [724, 864], "10734580197236529959": [725, 864], "3022416320763508302": [725, 864], "13756996518000038261": [725, 864], "datelik": [730, 864], "166667": [762, 864], "142857": [762, 864], "512": [762, 864], "peak": [763, 764, 864], "nanstd": [773, 864], "858612": [773, 864], "200": [774, 775, 777, 864], "400": [774, 775, 777, 864], "150": [775, 864], "250": [775, 864], "350": [775, 864], "450": [775, 864], "381802": [779, 864], "dev": [780, 864], "57": [783, 864], "frequent": [787, 788, 864], "mutat": [788, 864], "2246e": [797, 840, 864], "divisor": [803, 854, 864], "stringnamespac": 804, "6331e16": [840, 864], "int64arrai": [843, 864], "a_2": [844, 864], "a_3": [844, 864], "456": [845, 864], "zero_copy_onli": [847, 864], "writabl": [847, 864], "view": [847, 864], "presenc": [847, 864], "immut": [847, 864], "made": [847, 864], "ignore_nul": [855, 864], "seriesview": [855, 864], "nan_to_nul": 864, "dtype_if_empti": 864, "arraylik": 864, "position": 864, "posit": 864, "scenario": 864, "arg_tru": 864, "chunk_length": 864, "get_chunk": 864, "has_valid": 864, "inner_dtyp": 864, "is_boolean": 864, "is_datelik": 864, "is_float": 864, "is_numer": 864, "is_utf8": 864, "new_from_index": 864, "peak_max": 864, "peak_min": 864, "set_at_idx": 864, "readthedoc": 871}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [29, 0, 1, "", "DataType"], [30, 0, 1, "", "Date"], [31, 0, 1, "", "Datetime"], [32, 0, 1, "", "Duration"], [33, 0, 1, "", "Float32"], [34, 0, 1, "", "Float64"], [35, 0, 1, "", "Int16"], [36, 0, 1, "", "Int32"], [37, 0, 1, "", "Int64"], [38, 0, 1, "", "Int8"], [39, 0, 1, "", "List"], [40, 0, 1, "", "Null"], [41, 0, 1, "", "Object"], [870, 0, 1, "", "SQLContext"], [45, 0, 1, "", "StringCache"], [46, 0, 1, "", "Struct"], [47, 0, 1, "", "Time"], [48, 0, 1, "", "UInt16"], [49, 0, 1, "", "UInt32"], [50, 0, 1, "", "UInt64"], [51, 0, 1, "", "UInt8"], [52, 0, 1, "", "Unknown"], [53, 0, 1, "", "Utf8"], [54, 4, 1, "", "align_frames"], [474, 4, 1, "", "all"], [475, 4, 1, "", "any"], [476, 4, 1, "", "apply"], [477, 4, 1, "", "arange"], [59, 4, 1, "", "arg_where"], [478, 4, 1, "", "argsort_by"], [479, 4, 1, "", "avg"], [60, 4, 1, "", "build_info"], [480, 4, 1, "", "coalesce"], [481, 4, 1, "", "col"], [61, 4, 1, "", "collect_all"], [62, 4, 1, "", "concat"], [482, 4, 1, "", "concat_list"], [483, 4, 1, "", "concat_str"], [484, 4, 1, "", "count"], [485, 4, 1, "", "cov"], [486, 4, 1, "", "cumfold"], [487, 4, 1, "", "cumreduce"], [488, 4, 1, "", "cumsum"], [63, 4, 1, "", "cut"], [489, 4, 1, "", "date"], [64, 4, 1, "", "date_range"], [490, 4, 1, "", "datetime"], [491, 4, 1, "", "duration"], [492, 4, 1, "", "element"], [493, 4, 1, "", "exclude"], [494, 4, 1, "", "first"], [495, 4, 1, "", "fold"], [496, 4, 1, "", "format"], [77, 4, 1, "", "from_arrow"], [78, 4, 1, "", "from_dict"], [79, 4, 1, "", "from_dicts"], [80, 4, 1, "", "from_numpy"], [81, 4, 1, "", "from_pandas"], [82, 4, 1, "", "from_records"], [83, 4, 1, "", "get_dummies"], [84, 4, 1, "", "get_idx_type"], [497, 4, 1, "", "groups"], [498, 4, 1, "", "head"], [499, 4, 1, "", "list"], [500, 4, 1, "", "lit"], [501, 4, 1, "", "map"], [502, 4, 1, "", "max"], [503, 4, 1, "", "mean"], [504, 4, 1, "", "median"], [505, 4, 1, "", "min"], [506, 4, 1, "", "n_unique"], [86, 4, 1, "", "ones"], [507, 4, 1, "", "pearson_corr"], [508, 4, 1, "", "quantile"], [87, 4, 1, "", "read_avro"], [88, 4, 1, "", "read_csv"], [89, 4, 1, "", "read_csv_batched"], [90, 4, 1, "", "read_delta"], [91, 4, 1, "", "read_excel"], [92, 4, 1, "", "read_ipc"], [93, 4, 1, "", "read_ipc_schema"], [94, 4, 1, "", "read_json"], [95, 4, 1, "", "read_ndjson"], [96, 4, 1, "", "read_parquet"], [97, 4, 1, "", "read_parquet_schema"], [98, 4, 1, "", "read_sql"], [509, 4, 1, "", "reduce"], [510, 4, 1, "", "repeat"], [99, 4, 1, "", "scan_csv"], [100, 4, 1, "", "scan_delta"], [101, 4, 1, "", "scan_ds"], [102, 4, 1, "", "scan_ipc"], [103, 4, 1, "", "scan_ndjson"], [104, 4, 1, "", "scan_parquet"], [511, 4, 1, "", "select"], [105, 4, 1, "", "show_versions"], [512, 4, 1, "", "spearman_rank_corr"], [513, 4, 1, "", "std"], [514, 4, 1, "", "struct"], [515, 4, 1, "", "sum"], [516, 4, 1, "", "tail"], [112, 4, 1, "", "threadpool_size"], [113, 4, 1, "", "toggle_string_cache"], [517, 4, 1, "", "var"], [518, 4, 1, "", "when"], [114, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_str_lengths"], [10, 1, 1, "", "set_tbl_cell_alignment"], [11, 1, 1, "", "set_tbl_cols"], [12, 1, 1, "", "set_tbl_column_data_type_inline"], [13, 1, 1, "", "set_tbl_dataframe_shape_below"], [14, 1, 1, "", "set_tbl_formatting"], [15, 1, 1, "", "set_tbl_hide_column_data_types"], [16, 1, 1, "", "set_tbl_hide_column_names"], [17, 1, 1, "", "set_tbl_hide_dataframe_shape"], [18, 1, 1, "", "set_tbl_hide_dtype_separator"], [19, 1, 1, "", "set_tbl_rows"], [20, 1, 1, "", "set_tbl_width_chars"], [21, 1, 1, "", "set_verbose"], [22, 1, 1, "", "state"]], "polars.DataFrame": [[117, 1, 1, "", "apply"], [118, 1, 1, "", "cleared"], [119, 1, 1, "", "clone"], [120, 2, 1, "", "columns"], [121, 1, 1, "", "describe"], [122, 1, 1, "", "drop"], [123, 1, 1, "", "drop_in_place"], [124, 1, 1, "", "drop_nulls"], [125, 2, 1, "", "dtypes"], [126, 1, 1, "", "estimated_size"], [127, 1, 1, "", "explode"], [128, 1, 1, "", "extend"], [129, 1, 1, "", "fill_nan"], [130, 1, 1, "", "fill_null"], [131, 1, 1, "", "filter"], [132, 1, 1, "", "find_idx_by_name"], [133, 1, 1, "", "fold"], [134, 1, 1, "", "frame_equal"], [135, 1, 1, "", "get_column"], [136, 1, 1, "", "get_columns"], [137, 1, 1, "", "glimpse"], [138, 1, 1, "", "groupby"], [139, 1, 1, "", "groupby_dynamic"], [140, 1, 1, "", "groupby_rolling"], [141, 1, 1, "", "hash_rows"], [142, 1, 1, "", "head"], [143, 2, 1, "", "height"], [144, 1, 1, "", "hstack"], [145, 1, 1, "", "insert_at_idx"], [146, 1, 1, "", "interpolate"], [147, 1, 1, "", "is_duplicated"], [148, 1, 1, "", "is_empty"], [149, 1, 1, "", "is_unique"], [150, 1, 1, "", "join"], [151, 1, 1, "", "join_asof"], [152, 1, 1, "", "lazy"], [153, 1, 1, "", "limit"], [154, 1, 1, "", "max"], [155, 1, 1, "", "mean"], [156, 1, 1, "", "median"], [157, 1, 1, "", "melt"], [158, 1, 1, "", "min"], [159, 1, 1, "", "n_chunks"], [160, 1, 1, "", "n_unique"], [161, 1, 1, "", "null_count"], [162, 1, 1, "", "partition_by"], [163, 1, 1, "", "pearson_corr"], [164, 1, 1, "", "pipe"], [165, 1, 1, "", "pivot"], [166, 1, 1, "", "product"], [167, 1, 1, "", "quantile"], [168, 1, 1, "", "rechunk"], [169, 1, 1, "", "rename"], [170, 1, 1, "", "replace"], [171, 1, 1, "", "replace_at_idx"], [172, 1, 1, "", "reverse"], [173, 1, 1, "", "row"], [174, 1, 1, "", "rows"], [175, 1, 1, "", "sample"], [176, 2, 1, "", "schema"], [177, 1, 1, "", "select"], [178, 2, 1, "", "shape"], [179, 1, 1, "", "shift"], [180, 1, 1, "", "shift_and_fill"], [181, 1, 1, "", "shrink_to_fit"], [182, 1, 1, "", "slice"], [183, 1, 1, "", "sort"], [184, 1, 1, "", "std"], [185, 1, 1, "", "sum"], [186, 1, 1, "", "tail"], [187, 1, 1, "", "take_every"], [188, 1, 1, "", "to_arrow"], [189, 1, 1, "", "to_dict"], [190, 1, 1, "", "to_dicts"], [191, 1, 1, "", "to_dummies"], [192, 1, 1, "", "to_numpy"], [193, 1, 1, "", "to_pandas"], [194, 1, 1, "", "to_series"], [195, 1, 1, "", "to_struct"], [196, 1, 1, "", "transpose"], [197, 1, 1, "", "unique"], [198, 1, 1, "", "unnest"], [199, 1, 1, "", "unstack"], [200, 1, 1, "", "upsample"], [201, 1, 1, "", "var"], [202, 1, 1, "", "vstack"], [203, 2, 1, "", "width"], [204, 1, 1, "", "with_column"], [205, 1, 1, "", "with_columns"], [206, 1, 1, "", "with_row_count"], [23, 1, 1, "", "write_avro"], [24, 1, 1, "", "write_csv"], [25, 1, 1, "", "write_ipc"], [26, 1, 1, "", "write_json"], [27, 1, 1, "", "write_ndjson"], [28, 1, 1, "", "write_parquet"]], "polars.DataType": [[29, 1, 1, "", "__init__"]], "polars.Date": [[30, 1, 1, "", "__init__"]], "polars.Datetime": [[31, 1, 1, "", "__init__"]], "polars.Duration": [[32, 1, 1, "", "__init__"]], "polars.Expr": [[243, 1, 1, "", "abs"], [244, 1, 1, "", "agg_groups"], [245, 1, 1, "", "alias"], [246, 1, 1, "", "all"], [247, 1, 1, "", "any"], [248, 1, 1, "", "append"], [249, 1, 1, "", "apply"], [250, 1, 1, "", "arccos"], [251, 1, 1, "", "arccosh"], [252, 1, 1, "", "arcsin"], [253, 1, 1, "", "arcsinh"], [254, 1, 1, "", "arctan"], [255, 1, 1, "", "arctanh"], [256, 1, 1, "", "arg_max"], [257, 1, 1, "", "arg_min"], [258, 1, 1, "", "arg_sort"], [259, 1, 1, "", "arg_unique"], [260, 1, 1, "", "argsort"], [284, 1, 1, "", "backward_fill"], [285, 1, 1, "", "cast"], [287, 1, 1, "", "ceil"], [288, 1, 1, "", "clip"], [289, 1, 1, "", "clip_max"], [290, 1, 1, "", "clip_min"], [291, 1, 1, "", "cos"], [292, 1, 1, "", "cosh"], [293, 1, 1, "", "count"], [294, 1, 1, "", "cumcount"], [295, 1, 1, "", "cummax"], [296, 1, 1, "", "cummin"], [297, 1, 1, "", "cumprod"], [298, 1, 1, "", "cumsum"], [299, 1, 1, "", "cumulative_eval"], [300, 1, 1, "", "diff"], [301, 1, 1, "", "dot"], [302, 1, 1, "", "drop_nans"], [303, 1, 1, "", "drop_nulls"], [336, 1, 1, "", "entropy"], [337, 1, 1, "", "ewm_mean"], [338, 1, 1, "", "ewm_std"], [339, 1, 1, "", "ewm_var"], [340, 1, 1, "", "exclude"], [341, 1, 1, "", "exp"], [342, 1, 1, "", "explode"], [343, 1, 1, "", "extend_constant"], [344, 1, 1, "", "fill_nan"], [345, 1, 1, "", "fill_null"], [346, 1, 1, "", "filter"], [347, 1, 1, "", "first"], [348, 1, 1, "", "flatten"], [349, 1, 1, "", "floor"], [350, 1, 1, "", "forward_fill"], [351, 1, 1, "", "hash"], [352, 1, 1, "", "head"], [353, 1, 1, "", "inspect"], [354, 1, 1, "", "interpolate"], [355, 1, 1, "", "is_between"], [356, 1, 1, "", "is_duplicated"], [357, 1, 1, "", "is_finite"], [358, 1, 1, "", "is_first"], [359, 1, 1, "", "is_in"], [360, 1, 1, "", "is_infinite"], [361, 1, 1, "", "is_nan"], [362, 1, 1, "", "is_not"], [363, 1, 1, "", "is_not_nan"], [364, 1, 1, "", "is_not_null"], [365, 1, 1, "", "is_null"], [366, 1, 1, "", "is_unique"], [367, 1, 1, "", "keep_name"], [368, 1, 1, "", "kurtosis"], [369, 1, 1, "", "last"], [370, 1, 1, "", "len"], [371, 1, 1, "", "limit"], [372, 1, 1, "", "list"], [373, 1, 1, "", "log"], [374, 1, 1, "", "log10"], [375, 1, 1, "", "lower_bound"], [376, 1, 1, "", "map"], [377, 1, 1, "", "map_alias"], [378, 1, 1, "", "max"], [379, 1, 1, "", "mean"], [380, 1, 1, "", "median"], [385, 1, 1, "", "min"], [386, 1, 1, "", "mode"], [387, 1, 1, "", "n_unique"], [388, 1, 1, "", "nan_max"], [389, 1, 1, "", "nan_min"], [390, 1, 1, "", "null_count"], [391, 1, 1, "", "over"], [392, 1, 1, "", "pct_change"], [393, 1, 1, "", "pow"], [394, 1, 1, "", "prefix"], [395, 1, 1, "", "product"], [396, 1, 1, "", "quantile"], [397, 1, 1, "", "rank"], [398, 1, 1, "", "rechunk"], [399, 1, 1, "", "reinterpret"], [400, 1, 1, "", "repeat_by"], [401, 1, 1, "", "reshape"], [402, 1, 1, "", "reverse"], [403, 1, 1, "", "rolling_apply"], [404, 1, 1, "", "rolling_max"], [405, 1, 1, "", "rolling_mean"], [406, 1, 1, "", "rolling_median"], [407, 1, 1, "", "rolling_min"], [408, 1, 1, "", "rolling_quantile"], [409, 1, 1, "", "rolling_skew"], [410, 1, 1, "", "rolling_std"], [411, 1, 1, "", "rolling_sum"], [412, 1, 1, "", "rolling_var"], [413, 1, 1, "", "round"], [414, 1, 1, "", "sample"], [415, 1, 1, "", "search_sorted"], [416, 1, 1, "", "set_sorted"], [417, 1, 1, "", "shift"], [418, 1, 1, "", "shift_and_fill"], [419, 1, 1, "", "shrink_dtype"], [420, 1, 1, "", "shuffle"], [421, 1, 1, "", "sign"], [422, 1, 1, "", "sin"], [423, 1, 1, "", "sinh"], [424, 1, 1, "", "skew"], [425, 1, 1, "", "slice"], [426, 1, 1, "", "sort"], [427, 1, 1, "", "sort_by"], [428, 1, 1, "", "sqrt"], [429, 1, 1, "", "std"], [459, 1, 1, "", "suffix"], [460, 1, 1, "", "sum"], [461, 1, 1, "", "tail"], [462, 1, 1, "", "take"], [463, 1, 1, "", "take_every"], [464, 1, 1, "", "tan"], [465, 1, 1, "", "tanh"], [466, 1, 1, "", "to_physical"], [467, 1, 1, "", "top_k"], [468, 1, 1, "", "unique"], [469, 1, 1, "", "unique_counts"], [470, 1, 1, "", "upper_bound"], [471, 1, 1, "", "value_counts"], [472, 1, 1, "", "var"], [473, 1, 1, "", "where"]], "polars.Expr.arr": [[261, 1, 1, "", "arg_max"], [262, 1, 1, "", "arg_min"], [263, 1, 1, "", "concat"], [264, 1, 1, "", "contains"], [265, 1, 1, "", "diff"], [266, 1, 1, "", "eval"], [267, 1, 1, "", "first"], [268, 1, 1, "", "get"], [269, 1, 1, "", "head"], [270, 1, 1, "", "join"], [271, 1, 1, "", "last"], [272, 1, 1, "", "lengths"], [273, 1, 1, "", "max"], [274, 1, 1, "", "mean"], [275, 1, 1, "", "min"], [276, 1, 1, "", "reverse"], [277, 1, 1, "", "shift"], [278, 1, 1, "", "slice"], [279, 1, 1, "", "sort"], [280, 1, 1, "", "sum"], [281, 1, 1, "", "tail"], [282, 1, 1, "", "to_struct"], [283, 1, 1, "", "unique"]], "polars.Expr.cat": [[286, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[304, 1, 1, "", "cast_time_unit"], [305, 1, 1, "", "cast_time_zone"], [306, 1, 1, "", "day"], [307, 1, 1, "", "days"], [308, 1, 1, "", "epoch"], [309, 1, 1, "", "hour"], [310, 1, 1, "", "hours"], [311, 1, 1, "", "iso_year"], [312, 1, 1, "", "microsecond"], [313, 1, 1, "", "microseconds"], [314, 1, 1, "", "millisecond"], [315, 1, 1, "", "milliseconds"], [316, 1, 1, "", "minute"], [317, 1, 1, "", "minutes"], [318, 1, 1, "", "month"], [319, 1, 1, "", "nanosecond"], [320, 1, 1, "", "nanoseconds"], [321, 1, 1, "", "offset_by"], [322, 1, 1, "", "ordinal_day"], [323, 1, 1, "", "quarter"], [324, 1, 1, "", "round"], [325, 1, 1, "", "second"], [326, 1, 1, "", "seconds"], [327, 1, 1, "", "strftime"], [328, 1, 1, "", "timestamp"], [329, 1, 1, "", "truncate"], [330, 1, 1, "", "tz_localize"], [331, 1, 1, "", "week"], [332, 1, 1, "", "weekday"], [333, 1, 1, "", "with_time_unit"], [334, 1, 1, "", "with_time_zone"], [335, 1, 1, "", "year"]], "polars.Expr.meta": [[381, 1, 1, "", "output_name"], [382, 1, 1, "", "pop"], [383, 1, 1, "", "root_names"], [384, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[430, 1, 1, "", "concat"], [431, 1, 1, "", "contains"], [432, 1, 1, "", "count_match"], [433, 1, 1, "", "decode"], [434, 1, 1, "", "encode"], [435, 1, 1, "", "ends_with"], [436, 1, 1, "", "extract"], [437, 1, 1, "", "extract_all"], [438, 1, 1, "", "json_path_match"], [439, 1, 1, "", "lengths"], [440, 1, 1, "", "ljust"], [441, 1, 1, "", "lstrip"], [442, 1, 1, "", "n_chars"], [443, 1, 1, "", "replace"], [444, 1, 1, "", "replace_all"], [445, 1, 1, "", "rjust"], [446, 1, 1, "", "rstrip"], [447, 1, 1, "", "slice"], [448, 1, 1, "", "split"], [449, 1, 1, "", "split_exact"], [450, 1, 1, "", "splitn"], [451, 1, 1, "", "starts_with"], [452, 1, 1, "", "strip"], [453, 1, 1, "", "strptime"], [454, 1, 1, "", "to_lowercase"], [455, 1, 1, "", "to_uppercase"], [456, 1, 1, "", "zfill"]], "polars.Expr.struct": [[457, 1, 1, "", "field"], [458, 1, 1, "", "rename_fields"]], "polars.Float32": [[33, 1, 1, "", "__init__"]], "polars.Float64": [[34, 1, 1, "", "__init__"]], "polars.Int16": [[35, 1, 1, "", "__init__"]], "polars.Int32": [[36, 1, 1, "", "__init__"]], "polars.Int64": [[37, 1, 1, "", "__init__"]], "polars.Int8": [[38, 1, 1, "", "__init__"]], "polars.LazyFrame": [[537, 1, 1, "", "cache"], [538, 1, 1, "", "cleared"], [539, 1, 1, "", "clone"], [540, 1, 1, "", "collect"], [541, 2, 1, "", "columns"], [542, 1, 1, "", "describe_optimized_plan"], [543, 1, 1, "", "describe_plan"], [544, 1, 1, "", "drop"], [545, 1, 1, "", "drop_nulls"], [546, 2, 1, "", "dtypes"], [547, 1, 1, "", "explode"], [548, 1, 1, "", "fetch"], [549, 1, 1, "", "fill_nan"], [550, 1, 1, "", "fill_null"], [551, 1, 1, "", "filter"], [552, 1, 1, "", "first"], [553, 1, 1, "", "from_json"], [554, 1, 1, "", "groupby"], [555, 1, 1, "", "groupby_dynamic"], [556, 1, 1, "", "groupby_rolling"], [557, 1, 1, "", "head"], [558, 1, 1, "", "inspect"], [559, 1, 1, "", "interpolate"], [560, 1, 1, "", "join"], [561, 1, 1, "", "join_asof"], [562, 1, 1, "", "last"], [563, 1, 1, "", "lazy"], [564, 1, 1, "", "limit"], [565, 1, 1, "", "map"], [566, 1, 1, "", "max"], [567, 1, 1, "", "mean"], [568, 1, 1, "", "median"], [569, 1, 1, "", "melt"], [570, 1, 1, "", "min"], [571, 1, 1, "", "pipe"], [572, 1, 1, "", "profile"], [573, 1, 1, "", "quantile"], [574, 1, 1, "", "read_json"], [575, 1, 1, "", "rename"], [576, 1, 1, "", "reverse"], [577, 2, 1, "", "schema"], [578, 1, 1, "", "select"], [579, 1, 1, "", "shift"], [580, 1, 1, "", "shift_and_fill"], [581, 1, 1, "", "show_graph"], [582, 1, 1, "", "slice"], [583, 1, 1, "", "sort"], [584, 1, 1, "", "std"], [585, 1, 1, "", "sum"], [586, 1, 1, "", "tail"], [587, 1, 1, "", "take_every"], [588, 1, 1, "", "unique"], [589, 1, 1, "", "unnest"], [590, 1, 1, "", "var"], [591, 2, 1, "", "width"], [592, 1, 1, "", "with_column"], [593, 1, 1, "", "with_columns"], [594, 1, 1, "", "with_context"], [595, 1, 1, "", "with_row_count"], [596, 1, 1, "", "write_json"]], "polars.List": [[39, 1, 1, "", "__init__"]], "polars.Null": [[40, 1, 1, "", "__init__"]], "polars.Object": [[41, 1, 1, "", "__init__"]], "polars.SQLContext": [[42, 1, 1, "", "execute"], [43, 1, 1, "", "query"], [44, 1, 1, "", "register"]], "polars.Series": [[608, 1, 1, "", "abs"], [609, 1, 1, "", "alias"], [610, 1, 1, "", "all"], [611, 1, 1, "", "any"], [612, 1, 1, "", "append"], [613, 1, 1, "", "apply"], [614, 1, 1, "", "arccos"], [615, 1, 1, "", "arccosh"], [616, 1, 1, "", "arcsin"], [617, 1, 1, "", "arcsinh"], [618, 1, 1, "", "arctan"], [619, 1, 1, "", "arctanh"], [620, 1, 1, "", "arg_max"], [621, 1, 1, "", "arg_min"], [622, 1, 1, "", "arg_sort"], [623, 1, 1, "", "arg_true"], [624, 1, 1, "", "arg_unique"], [625, 1, 1, "", "argsort"], [626, 3, 1, "", "arr"], [650, 1, 1, "", "cast"], [651, 3, 1, "", "cat"], [653, 1, 1, "", "ceil"], [654, 1, 1, "", "chunk_lengths"], [655, 1, 1, "", "cleared"], [656, 1, 1, "", "clip"], [657, 1, 1, "", "clip_max"], [658, 1, 1, "", "clip_min"], [659, 1, 1, "", "clone"], [660, 1, 1, "", "cos"], [661, 1, 1, "", "cosh"], [662, 1, 1, "", "cummax"], [663, 1, 1, "", "cummin"], [664, 1, 1, "", "cumprod"], [665, 1, 1, "", "cumsum"], [666, 1, 1, "", "cumulative_eval"], [667, 1, 1, "", "describe"], [668, 1, 1, "", "diff"], [669, 1, 1, "", "dot"], [670, 1, 1, "", "drop_nans"], [671, 1, 1, "", "drop_nulls"], [672, 3, 1, "", "dt"], [709, 2, 1, "", "dtype"], [710, 1, 1, "", "entropy"], [711, 1, 1, "", "estimated_size"], [712, 1, 1, "", "ewm_mean"], [713, 1, 1, "", "ewm_std"], [714, 1, 1, "", "ewm_var"], [715, 1, 1, "", "exp"], [716, 1, 1, "", "explode"], [717, 1, 1, "", "extend_constant"], [718, 1, 1, "", "fill_nan"], [719, 1, 1, "", "fill_null"], [720, 1, 1, "", "filter"], [721, 2, 1, "", "flags"], [722, 1, 1, "", "floor"], [723, 1, 1, "", "get_chunks"], [724, 1, 1, "", "has_validity"], [725, 1, 1, "", "hash"], [726, 1, 1, "", "head"], [727, 2, 1, "", "inner_dtype"], [728, 1, 1, "", "interpolate"], [729, 1, 1, "", "is_boolean"], [730, 1, 1, "", "is_datelike"], [731, 1, 1, "", "is_duplicated"], [732, 1, 1, "", "is_empty"], [733, 1, 1, "", "is_finite"], [734, 1, 1, "", "is_first"], [735, 1, 1, "", "is_float"], [736, 1, 1, "", "is_in"], [737, 1, 1, "", "is_infinite"], [738, 1, 1, "", "is_nan"], [739, 1, 1, "", "is_not_nan"], [740, 1, 1, "", "is_not_null"], [741, 1, 1, "", "is_null"], [742, 1, 1, "", "is_numeric"], [743, 1, 1, "", "is_unique"], [744, 1, 1, "", "is_utf8"], [745, 1, 1, "", "kurtosis"], [746, 1, 1, "", "len"], [747, 1, 1, "", "limit"], [748, 1, 1, "", "log"], [749, 1, 1, "", "log10"], [750, 1, 1, "", "max"], [751, 1, 1, "", "mean"], [752, 1, 1, "", "median"], [753, 1, 1, "", "min"], [754, 1, 1, "", "mode"], [755, 1, 1, "", "n_chunks"], [756, 1, 1, "", "n_unique"], [757, 2, 1, "", "name"], [758, 1, 1, "", "nan_max"], [759, 1, 1, "", "nan_min"], [760, 1, 1, "", "new_from_index"], [761, 1, 1, "", "null_count"], [762, 1, 1, "", "pct_change"], [763, 1, 1, "", "peak_max"], [764, 1, 1, "", "peak_min"], [765, 1, 1, "", "product"], [766, 1, 1, "", "quantile"], [767, 1, 1, "", "rank"], [768, 1, 1, "", "rechunk"], [769, 1, 1, "", "reinterpret"], [770, 1, 1, "", "rename"], [771, 1, 1, "", "reshape"], [772, 1, 1, "", "reverse"], [773, 1, 1, "", "rolling_apply"], [774, 1, 1, "", "rolling_max"], [775, 1, 1, "", "rolling_mean"], [776, 1, 1, "", "rolling_median"], [777, 1, 1, "", "rolling_min"], [778, 1, 1, "", "rolling_quantile"], [779, 1, 1, "", "rolling_skew"], [780, 1, 1, "", "rolling_std"], [781, 1, 1, "", "rolling_sum"], [782, 1, 1, "", "rolling_var"], [783, 1, 1, "", "round"], [784, 1, 1, "", "sample"], [785, 1, 1, "", "search_sorted"], [786, 1, 1, "", "series_equal"], [787, 1, 1, "", "set"], [788, 1, 1, "", "set_at_idx"], [789, 1, 1, "", "set_sorted"], [790, 2, 1, "", "shape"], [791, 1, 1, "", "shift"], [792, 1, 1, "", "shift_and_fill"], [793, 1, 1, "", "shrink_dtype"], [794, 1, 1, "", "shrink_to_fit"], [795, 1, 1, "", "shuffle"], [796, 1, 1, "", "sign"], [797, 1, 1, "", "sin"], [798, 1, 1, "", "sinh"], [799, 1, 1, "", "skew"], [800, 1, 1, "", "slice"], [801, 1, 1, "", "sort"], [802, 1, 1, "", "sqrt"], [803, 1, 1, "", "std"], [804, 3, 1, "", "str"], [836, 1, 1, "", "sum"], [837, 1, 1, "", "tail"], [838, 1, 1, "", "take"], [839, 1, 1, "", "take_every"], [840, 1, 1, "", "tan"], [841, 1, 1, "", "tanh"], [842, 2, 1, "", "time_unit"], [843, 1, 1, "", "to_arrow"], [844, 1, 1, "", "to_dummies"], [845, 1, 1, "", "to_frame"], [846, 1, 1, "", "to_list"], [847, 1, 1, "", "to_numpy"], [848, 1, 1, "", "to_pandas"], [849, 1, 1, "", "to_physical"], [850, 1, 1, "", "top_k"], [851, 1, 1, "", "unique"], [852, 1, 1, "", "unique_counts"], [853, 1, 1, "", "value_counts"], [854, 1, 1, "", "var"], [855, 1, 1, "", "view"], [856, 1, 1, "", "zip_with"]], "polars.Series.arr": [[627, 1, 1, "", "arg_max"], [628, 1, 1, "", "arg_min"], [629, 1, 1, "", "concat"], [630, 1, 1, "", "contains"], [631, 1, 1, "", "diff"], [632, 1, 1, "", "eval"], [633, 1, 1, "", "first"], [634, 1, 1, "", "get"], [635, 1, 1, "", "head"], [636, 1, 1, "", "join"], [637, 1, 1, "", "last"], [638, 1, 1, "", "lengths"], [639, 1, 1, "", "max"], [640, 1, 1, "", "mean"], [641, 1, 1, "", "min"], [642, 1, 1, "", "reverse"], [643, 1, 1, "", "shift"], [644, 1, 1, "", "slice"], [645, 1, 1, "", "sort"], [646, 1, 1, "", "sum"], [647, 1, 1, "", "tail"], [648, 1, 1, "", "to_struct"], [649, 1, 1, "", "unique"]], "polars.Series.cat": [[652, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[673, 1, 1, "", "cast_time_unit"], [674, 1, 1, "", "cast_time_zone"], [675, 1, 1, "", "day"], [676, 1, 1, "", "days"], [677, 1, 1, "", "epoch"], [678, 1, 1, "", "hour"], [679, 1, 1, "", "hours"], [680, 1, 1, "", "iso_year"], [681, 1, 1, "", "max"], [682, 1, 1, "", "mean"], [683, 1, 1, "", "median"], [684, 1, 1, "", "microsecond"], [685, 1, 1, "", "microseconds"], [686, 1, 1, "", "millisecond"], [687, 1, 1, "", "milliseconds"], [688, 1, 1, "", "min"], [689, 1, 1, "", "minute"], [690, 1, 1, "", "minutes"], [691, 1, 1, "", "month"], [692, 1, 1, "", "nanosecond"], [693, 1, 1, "", "nanoseconds"], [694, 1, 1, "", "offset_by"], [695, 1, 1, "", "ordinal_day"], [696, 1, 1, "", "quarter"], [697, 1, 1, "", "round"], [698, 1, 1, "", "second"], [699, 1, 1, "", "seconds"], [700, 1, 1, "", "strftime"], [701, 1, 1, "", "timestamp"], [702, 1, 1, "", "truncate"], [703, 1, 1, "", "tz_localize"], [704, 1, 1, "", "week"], [705, 1, 1, "", "weekday"], [706, 1, 1, "", "with_time_unit"], [707, 1, 1, "", "with_time_zone"], [708, 1, 1, "", "year"]], "polars.Series.str": [[805, 1, 1, "", "concat"], [806, 1, 1, "", "contains"], [807, 1, 1, "", "count_match"], [808, 1, 1, "", "decode"], [809, 1, 1, "", "encode"], [810, 1, 1, "", "ends_with"], [811, 1, 1, "", "extract"], [812, 1, 1, "", "extract_all"], [813, 1, 1, "", "json_path_match"], [814, 1, 1, "", "lengths"], [815, 1, 1, "", "ljust"], [816, 1, 1, "", "lstrip"], [817, 1, 1, "", "n_chars"], [818, 1, 1, "", "replace"], [819, 1, 1, "", "replace_all"], [820, 1, 1, "", "rjust"], [821, 1, 1, "", "rstrip"], [822, 1, 1, "", "slice"], [823, 1, 1, "", "split"], [824, 1, 1, "", "split_exact"], [825, 1, 1, "", "splitn"], [826, 1, 1, "", "starts_with"], [827, 1, 1, "", "strip"], [828, 1, 1, "", "strptime"], [829, 1, 1, "", "to_lowercase"], [830, 1, 1, "", "to_uppercase"], [831, 1, 1, "", "zfill"]], "polars.Series.struct": [[832, 1, 1, "", "field"], [833, 3, 1, "", "fields"], [834, 1, 1, "", "rename_fields"], [835, 1, 1, "", "to_frame"]], "polars.StringCache": [[45, 1, 1, "", "__init__"]], "polars.Struct": [[46, 1, 1, "", "__init__"]], "polars.Time": [[47, 1, 1, "", "__init__"]], "polars.UInt16": [[48, 1, 1, "", "__init__"]], "polars.UInt32": [[49, 1, 1, "", "__init__"]], "polars.UInt64": [[50, 1, 1, "", "__init__"]], "polars.UInt8": [[51, 1, 1, "", "__init__"]], "polars.Unknown": [[52, 1, 1, "", "__init__"]], "polars.Utf8": [[53, 1, 1, "", "__init__"]], "polars.api": [[55, 4, 1, "", "register_dataframe_namespace"], [56, 4, 1, "", "register_expr_namespace"], [57, 4, 1, "", "register_lazyframe_namespace"], [58, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[65, 5, 1, "", "ArrowError"], [66, 5, 1, "", "ComputeError"], [67, 5, 1, "", "DuplicateError"], [68, 5, 1, "", "InvalidOperationError"], [69, 5, 1, "", "NoDataError"], [70, 5, 1, "", "NoRowsReturned"], [71, 5, 1, "", "NotFoundError"], [72, 5, 1, "", "PanicException"], [73, 5, 1, "", "RowsException"], [74, 5, 1, "", "SchemaError"], [75, 5, 1, "", "ShapeError"], [76, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[85, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[207, 1, 1, "", "agg"], [208, 1, 1, "", "agg_list"], [209, 1, 1, "", "apply"], [210, 1, 1, "", "count"], [211, 1, 1, "", "first"], [212, 1, 1, "", "head"], [213, 1, 1, "", "last"], [214, 1, 1, "", "max"], [215, 1, 1, "", "mean"], [216, 1, 1, "", "median"], [217, 1, 1, "", "min"], [218, 1, 1, "", "n_unique"], [219, 1, 1, "", "pivot"], [220, 1, 1, "", "quantile"], [221, 1, 1, "", "sum"], [222, 1, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[223, 1, 1, "", "count"], [224, 1, 1, "", "first"], [225, 1, 1, "", "last"], [226, 1, 1, "", "max"], [227, 1, 1, "", "mean"], [228, 1, 1, "", "median"], [229, 1, 1, "", "min"], [230, 1, 1, "", "sum"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[597, 1, 1, "", "agg"], [598, 1, 1, "", "apply"], [599, 1, 1, "", "head"], [600, 1, 1, "", "tail"]], "polars.testing": [[106, 4, 1, "", "assert_frame_equal"], [107, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[108, 0, 1, "", "column"], [109, 4, 1, "", "columns"], [110, 4, 1, "", "dataframes"], [111, 4, 1, "", "series"]], "polars.testing.parametric.column": [[108, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 128], "api": [1, 55, 56, 57, 58, 534], "provid": 1, "new": 1, "function": [1, 240, 524, 533], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856], "binari": 2, "boolean": [3, 520, 859], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 115], "load": [5, 115], "restore_default": 6, "save": [7, 115], "set_ascii_t": 8, "set_fmt_str_length": 9, "set_tbl_cell_align": 10, "set_tbl_col": 11, "set_tbl_column_data_type_inlin": 12, "set_tbl_dataframe_shape_below": 13, "set_tbl_format": 14, "set_tbl_hide_column_data_typ": 15, "set_tbl_hide_column_nam": 16, "set_tbl_hide_dataframe_shap": 17, "set_tbl_hide_dtype_separ": 18, "set_tbl_row": 19, "set_tbl_width_char": 20, "set_verbos": 21, "state": [22, 115], "datafram": [23, 24, 25, 26, 27, 28, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 236], "write_avro": 23, "write_csv": 24, "write_ipc": 25, "write_json": [26, 596], "write_ndjson": 27, "write_parquet": 28, "datatyp": 29, "date": [30, 240, 489], "datetim": [31, 490], "durat": [32, 491], "float32": 33, "float64": 34, "int16": 35, "int32": 36, "int64": 37, "int8": 38, "list": [39, 372, 499], "null": 40, "object": 41, "sqlcontext": [42, 43, 44], "execut": 42, "queri": 43, "regist": 44, "stringcach": [45, 533], "struct": [46, 457, 458, 514, 530, 832, 833, 834, 835, 868], "time": [47, 240], "uint16": 48, "uint32": 49, "uint64": 50, "uint8": 51, "unknown": 52, "utf8": 53, "align_fram": 54, "register_dataframe_namespac": 55, "register_expr_namespac": 56, "register_lazyframe_namespac": 57, "register_series_namespac": 58, "arg_wher": 59, "build_info": 60, "collect_al": 61, "concat": [62, 263, 430, 629, 805], "cut": 63, "date_rang": 64, "except": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 241], "arrowerror": 65, "computeerror": 66, "duplicateerror": 67, "invalidoperationerror": 68, "nodataerror": 69, "norowsreturn": 70, "notfounderror": 71, "panicexcept": 72, "rowsexcept": 73, "schemaerror": 74, "shapeerror": 75, "toomanyrowsreturn": 76, "from_arrow": 77, "from_dict": [78, 79], "from_numpi": 80, "from_panda": 81, "from_record": 82, "get_dummi": 83, "get_idx_typ": 84, "intern": [85, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 597, 598, 599, 600], "batch": 85, "batchedcsvread": [85, 535], "next_batch": 85, "ones": 86, "read_avro": 87, "read_csv": 88, "read_csv_batch": 89, "read_delta": 90, "read_excel": 91, "read_ipc": 92, "read_ipc_schema": 93, "read_json": [94, 574], "read_ndjson": 95, "read_parquet": 96, "read_parquet_schema": 97, "read_sql": 98, "scan_csv": 99, "scan_delta": 100, "scan_d": 101, "scan_ipc": 102, "scan_ndjson": 103, "scan_parquet": 104, "show_vers": 105, "test": [106, 107, 108, 109, 110, 111, 871], "assert_frame_equ": 106, "assert_series_equ": 107, "parametr": [108, 109, 110, 111], "column": [108, 109, 120, 522, 541], "seri": [111, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 864], "threadpool_s": 112, "toggle_string_cach": 113, "zero": 114, "option": 115, "set": [115, 787], "unset": 115, "current": 115, "aggreg": [116, 242, 536, 607], "appli": [117, 209, 249, 476, 598, 613], "clear": [118, 538, 655], "clone": [119, 539, 659], "describ": [121, 667], "drop": [122, 544], "drop_in_plac": 123, "drop_nul": [124, 303, 545, 671], "dtype": [125, 546, 709], "estimated_s": [126, 711], "explod": [127, 342, 547, 716], "fill_nan": [129, 344, 549, 718], "fill_nul": [130, 345, 550, 719], "filter": [131, 346, 551, 720], "find_idx_by_nam": 132, "fold": [133, 495], "frame_equ": 134, "get_column": [135, 136], "glimps": 137, "groupbi": [138, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 235, 554, 597, 598, 599, 600, 603], "groupby_dynam": [139, 555], "groupby_rol": [140, 556], "hash_row": 141, "head": [142, 212, 269, 352, 498, 557, 599, 635, 726], "height": 143, "hstack": 144, "insert_at_idx": 145, "interpol": [146, 354, 559, 728], "is_dupl": [147, 356, 731], "is_empti": [148, 732], "is_uniqu": [149, 366, 743], "join": [150, 270, 560, 636], "join_asof": [151, 561], "lazi": [152, 533, 563], "limit": [153, 371, 564, 747], "max": [154, 214, 226, 273, 378, 502, 566, 639, 681, 750], "mean": [155, 215, 227, 274, 379, 503, 567, 640, 682, 751], "median": [156, 216, 228, 380, 504, 568, 683, 752], "melt": [157, 569], "min": [158, 217, 229, 275, 385, 505, 570, 641, 688, 753], "n_chunk": [159, 755], "n_uniqu": [160, 218, 387, 506, 756], "null_count": [161, 390, 761], "partition_bi": 162, "pearson_corr": [163, 507], "pipe": [164, 571], "pivot": [165, 219, 223, 224, 225, 226, 227, 228, 229, 230, 239], "product": [166, 395, 765], "quantil": [167, 220, 396, 508, 573, 766], "rechunk": [168, 398, 768], "renam": [169, 575, 770], "replac": [170, 443, 818], "replace_at_idx": 171, "revers": [172, 276, 402, 576, 642, 772], "row": [173, 174], "sampl": [175, 414, 784], "schema": [176, 577], "select": [177, 238, 511, 528, 578, 606, 866], "shape": [178, 790], "shift": [179, 277, 417, 579, 643, 791], "shift_and_fil": [180, 418, 580, 792], "shrink_to_fit": [181, 794], "slice": [182, 278, 425, 447, 582, 644, 800, 822], "sort": [183, 279, 426, 583, 645, 801], "std": [184, 429, 513, 584, 803], "sum": [185, 221, 230, 280, 460, 515, 585, 646, 836], "tail": [186, 222, 281, 461, 516, 586, 600, 647, 837], "take_everi": [187, 463, 587, 839], "to_arrow": [188, 843], "to_dict": [189, 190], "to_dummi": [191, 844], "to_numpi": [192, 847], "to_panda": [193, 848], "to_seri": 194, "to_struct": [195, 282, 648], "transpos": 196, "uniqu": [197, 283, 468, 588, 649, 851], "unnest": [198, 589], "unstack": 199, "upsampl": 200, "var": [201, 472, 517, 590, 854], "vstack": 202, "width": [203, 591], "with_column": [204, 205, 592, 593], "with_row_count": [206, 595], "agg": [207, 597], "agg_list": 208, "count": [210, 223, 293, 484], "first": [211, 224, 267, 347, 494, 552, 633], "last": [213, 225, 271, 369, 562, 637], "pivotop": [223, 224, 225, 226, 227, 228, 229, 230], "attribut": [231, 601, 858], "comput": [232, 523, 861], "descript": [233, 602, 862], "export": [234, 863], "miscellan": [237, 527, 533, 605, 865], "manipul": [238, 528, 606, 866], "data": 240, "type": 240, "numer": 240, "nest": 240, "other": 240, "expr": [243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "ab": [243, 608], "agg_group": 244, "alia": [245, 609], "all": [246, 474, 610], "ani": [247, 475, 611], "append": [248, 612], "arcco": [250, 614], "arccosh": [251, 615], "arcsin": [252, 616], "arcsinh": [253, 617], "arctan": [254, 618], "arctanh": [255, 619], "arg_max": [256, 261, 620, 627], "arg_min": [257, 262, 621, 628], "arg_sort": [258, 622], "arg_uniqu": [259, 624], "argsort": [260, 625], "arr": [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649], "contain": [264, 431, 630, 806], "diff": [265, 300, 631, 668], "eval": [266, 632], "get": [268, 634], "length": [272, 439, 638, 814], "backward_fil": 284, "cast": [285, 650], "cat": [286, 651, 652], "set_ord": [286, 652], "ceil": [287, 653], "clip": [288, 656], "clip_max": [289, 657], "clip_min": [290, 658], "co": [291, 660], "cosh": [292, 661], "cumcount": 294, "cummax": [295, 662], "cummin": [296, 663], "cumprod": [297, 664], "cumsum": [298, 488, 665], "cumulative_ev": [299, 666], "dot": [301, 669], "drop_nan": [302, 670], "dt": [304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708], "cast_time_unit": [304, 673], "cast_time_zon": [305, 674], "dai": [306, 307, 675, 676], "epoch": [308, 677], "hour": [309, 310, 678, 679], "iso_year": [311, 680], "microsecond": [312, 313, 684, 685], "millisecond": [314, 315, 686, 687], "minut": [316, 317, 689, 690], "month": [318, 691], "nanosecond": [319, 320, 692, 693], "offset_bi": [321, 694], "ordinal_dai": [322, 695], "quarter": [323, 696], "round": [324, 413, 697, 783], "second": [325, 326, 698, 699], "strftime": [327, 700], "timestamp": [328, 701], "truncat": [329, 702], "tz_local": [330, 703], "week": [331, 704], "weekdai": [332, 705], "with_time_unit": [333, 706], "with_time_zon": [334, 707], "year": [335, 708], "entropi": [336, 710], "ewm_mean": [337, 712], "ewm_std": [338, 713], "ewm_var": [339, 714], "exclud": [340, 493], "exp": [341, 715], "extend_const": [343, 717], "flatten": 348, "floor": [349, 722], "forward_fil": 350, "hash": [351, 725], "inspect": [353, 558], "is_between": 355, "is_finit": [357, 733], "is_first": [358, 734], "is_in": [359, 736], "is_infinit": [360, 737], "is_nan": [361, 738], "is_not": 362, "is_not_nan": [363, 739], "is_not_nul": [364, 740], "is_nul": [365, 741], "keep_nam": 367, "kurtosi": [368, 745], "len": [370, 746], "log": [373, 748], "log10": [374, 749], "lower_bound": 375, "map": [376, 501, 565], "map_alia": 377, "meta": [381, 382, 383, 384, 526], "output_nam": 381, "pop": 382, "root_nam": 383, "undo_alias": 384, "mode": [386, 754], "nan_max": [388, 758], "nan_min": [389, 759], "over": 391, "pct_chang": [392, 762], "pow": 393, "prefix": 394, "rank": [397, 767], "reinterpret": [399, 769], "repeat_bi": 400, "reshap": [401, 771], "rolling_appli": [403, 773], "rolling_max": [404, 774], "rolling_mean": [405, 775], "rolling_median": [406, 776], "rolling_min": [407, 777], "rolling_quantil": [408, 778], "rolling_skew": [409, 779], "rolling_std": [410, 780], "rolling_sum": [411, 781], "rolling_var": [412, 782], "search_sort": [415, 785], "set_sort": [416, 789], "shrink_dtyp": [419, 793], "shuffl": [420, 795], "sign": [421, 796], "sin": [422, 797], "sinh": [423, 798], "skew": [424, 799], "sort_bi": 427, "sqrt": [428, 802], "str": [430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831], "count_match": [432, 807], "decod": [433, 808], "encod": [434, 809], "ends_with": [435, 810], "extract": [436, 811], "extract_al": [437, 812], "json_path_match": [438, 813], "ljust": [440, 815], "lstrip": [441, 816], "n_char": [442, 817], "replace_al": [444, 819], "rjust": [445, 820], "rstrip": [446, 821], "split": [448, 823], "split_exact": [449, 824], "splitn": [450, 825], "starts_with": [451, 826], "strip": [452, 827], "strptime": [453, 828], "to_lowercas": [454, 829], "to_uppercas": [455, 830], "zfill": [456, 831], "field": [457, 832, 833], "rename_field": [458, 834], "suffix": 459, "take": [462, 838], "tan": [464, 840], "tanh": [465, 841], "to_phys": [466, 849], "top_k": [467, 850], "unique_count": [469, 852], "upper_bound": 470, "value_count": [471, 853], "where": 473, "arang": 477, "argsort_bi": 478, "avg": 479, "coalesc": 480, "col": 481, "concat_list": 482, "concat_str": 483, "cov": 485, "cumfold": 486, "cumreduc": 487, "element": 492, "format": 496, "group": 497, "lit": 500, "reduc": 509, "repeat": 510, "spearman_rank_corr": 512, "when": 518, "arrai": [519, 857], "categori": [521, 860], "name": [522, 757], "express": 525, "string": [529, 867], "tempor": [531, 869], "window": 532, "convers": 533, "eager": 533, "parallel": 533, "refer": 534, "input": 535, "output": 535, "csv": 535, "feather": 535, "ipc": 535, "parquet": 535, "sql": [535, 870], "json": 535, "avro": 535, "excel": 535, "delta": 535, "lake": 535, "dataset": 535, "lazyfram": [537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 604], "cach": 537, "collect": 540, "describe_optimized_plan": 542, "describe_plan": 543, "fetch": 548, "from_json": 553, "profil": 572, "show_graph": 581, "with_context": 594, "lazygroupbi": [597, 598, 599, 600], "read": 605, "write": 605, "logic": 605, "plan": 605, "arg_tru": 623, "chunk_length": 654, "flag": 721, "get_chunk": 723, "has_valid": 724, "inner_dtyp": 727, "is_boolean": 729, "is_datelik": 730, "is_float": 735, "is_numer": 742, "is_utf8": 744, "new_from_index": 760, "peak_max": 763, "peak_min": 764, "series_equ": 786, "set_at_idx": 788, "to_fram": [835, 845], "time_unit": 842, "to_list": 846, "view": 855, "zip_with": 856, "method": 870, "assert": 871, "properti": 871, "base": 871, "strategi": 871, "helper": 871, "util": 872}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.exceptions.RowsException": [[73, "polars-exceptions-rowsexception"]], "polars.from_records": [[82, "polars-from-records"]], "polars.read_json": [[94, "polars-read-json"]], "polars.read_csv": [[88, "polars-read-csv"]], "polars.DataFrame.drop_in_place": [[123, "polars-dataframe-drop-in-place"]], "polars.DataFrame.filter": [[131, "polars-dataframe-filter"]], "polars.show_versions": [[105, "polars-show-versions"]], "polars.DataFrame.cleared": [[118, "polars-dataframe-cleared"]], "polars.DataFrame.fill_nan": [[129, "polars-dataframe-fill-nan"]], "polars.DataFrame.estimated_size": [[126, "polars-dataframe-estimated-size"]], "polars.read_csv_batched": [[89, "polars-read-csv-batched"]], "polars.exceptions.ComputeError": [[66, "polars-exceptions-computeerror"]], "polars.from_numpy": [[80, "polars-from-numpy"]], "polars.scan_delta": [[100, "polars-scan-delta"]], "polars.exceptions.NotFoundError": [[71, "polars-exceptions-notfounderror"]], "polars.DataFrame.fill_null": [[130, "polars-dataframe-fill-null"]], "Aggregation": [[116, "aggregation"], [607, "aggregation"], [536, "aggregation"], [242, "aggregation"]], "polars.exceptions.NoRowsReturned": [[70, "polars-exceptions-norowsreturned"]], "polars.from_dict": [[78, "polars-from-dict"]], "polars.DataFrame.drop_nulls": [[124, "polars-dataframe-drop-nulls"]], "polars.read_ipc_schema": [[93, "polars-read-ipc-schema"]], "polars.read_excel": [[91, "polars-read-excel"]], "polars.read_parquet_schema": [[97, "polars-read-parquet-schema"]], "polars.DataFrame.dtypes": [[125, "polars-dataframe-dtypes"]], "polars.testing.parametric.columns": [[109, "polars-testing-parametric-columns"]], "polars.DataFrame.clone": [[119, "polars-dataframe-clone"]], "polars.get_idx_type": [[84, "polars-get-idx-type"]], "polars.exceptions.PanicException": [[72, "polars-exceptions-panicexception"]], "polars.toggle_string_cache": [[113, "polars-toggle-string-cache"]], "polars.DataFrame.drop": [[122, "polars-dataframe-drop"]], "polars.scan_parquet": [[104, "polars-scan-parquet"]], "polars.zeros": [[114, "polars-zeros"]], "polars.DataFrame.extend": [[128, "polars-dataframe-extend"]], "polars.exceptions.InvalidOperationError": [[68, "polars-exceptions-invalidoperationerror"]], "polars.from_dicts": [[79, "polars-from-dicts"]], "polars.exceptions.DuplicateError": [[67, "polars-exceptions-duplicateerror"]], "polars.testing.parametric.dataframes": [[110, "polars-testing-parametric-dataframes"]], "polars.read_ndjson": [[95, "polars-read-ndjson"]], "polars.DataFrame.apply": [[117, "polars-dataframe-apply"]], "polars.scan_ipc": [[102, "polars-scan-ipc"]], "polars.read_sql": [[98, "polars-read-sql"]], "polars.get_dummies": [[83, "polars-get-dummies"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[85, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.exceptions.SchemaError": [[74, "polars-exceptions-schemaerror"]], "polars.exceptions.ShapeError": [[75, "polars-exceptions-shapeerror"]], "polars.testing.parametric.column": [[108, "polars-testing-parametric-column"]], "polars.DataFrame.columns": [[120, "polars-dataframe-columns"]], "polars.scan_ds": [[101, "polars-scan-ds"]], "polars.exceptions.TooManyRowsReturned": [[76, "polars-exceptions-toomanyrowsreturned"]], "polars.from_arrow": [[77, "polars-from-arrow"]], "polars.ones": [[86, "polars-ones"]], "polars.testing.assert_series_equal": [[107, "polars-testing-assert-series-equal"]], "polars.read_parquet": [[96, "polars-read-parquet"]], "polars.read_avro": [[87, "polars-read-avro"]], "polars.read_delta": [[90, "polars-read-delta"]], "polars.from_pandas": [[81, "polars-from-pandas"]], "polars.exceptions.NoDataError": [[69, "polars-exceptions-nodataerror"]], "polars.testing.parametric.series": [[111, "polars-testing-parametric-series"]], "polars.DataFrame.describe": [[121, "polars-dataframe-describe"]], "polars.DataFrame.explode": [[127, "polars-dataframe-explode"]], "polars.scan_ndjson": [[103, "polars-scan-ndjson"]], "polars.scan_csv": [[99, "polars-scan-csv"]], "Config": [[115, "config"]], "Config options (set/unset)": [[115, "config-options-set-unset"]], "Config load, save, and current state": [[115, "config-load-save-and-current-state"]], "polars.threadpool_size": [[112, "polars-threadpool-size"]], "polars.read_ipc": [[92, "polars-read-ipc"]], "polars.testing.assert_frame_equal": [[106, "polars-testing-assert-frame-equal"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.SQLContext.query": [[43, "polars-sqlcontext-query"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.DataFrame.write_avro": [[23, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_width_chars": [[20, "polars-config-set-tbl-width-chars"]], "polars.api.register_expr_namespace": [[56, "polars-api-register-expr-namespace"]], "polars.Config.set_tbl_column_data_type_inline": [[12, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_fmt_str_lengths": [[9, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_dataframe_shape_below": [[13, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Unknown": [[52, "polars-unknown"]], "polars.Config.set_tbl_formatting": [[14, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_cols": [[11, "polars-config-set-tbl-cols"]], "polars.Float32": [[33, "polars-float32"]], "polars.Int32": [[36, "polars-int32"]], "polars.cut": [[63, "polars-cut"]], "polars.exceptions.ArrowError": [[65, "polars-exceptions-arrowerror"]], "polars.api.register_series_namespace": [[58, "polars-api-register-series-namespace"]], "polars.api.register_lazyframe_namespace": [[57, "polars-api-register-lazyframe-namespace"]], "polars.Time": [[47, "polars-time"]], "polars.Struct": [[46, "polars-struct"]], "polars.UInt16": [[48, "polars-uint16"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.Object": [[41, "polars-object"]], "polars.Date": [[30, "polars-date"]], "polars.UInt8": [[51, "polars-uint8"]], "polars.collect_all": [[61, "polars-collect-all"]], "polars.DataFrame.write_json": [[26, "polars-dataframe-write-json"]], "polars.DataFrame.write_parquet": [[28, "polars-dataframe-write-parquet"]], "polars.Int8": [[38, "polars-int8"]], "polars.DataFrame.write_ndjson": [[27, "polars-dataframe-write-ndjson"]], "polars.Datetime": [[31, "polars-datetime"]], "polars.Null": [[40, "polars-null"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Config.set_tbl_rows": [[19, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_csv": [[24, "polars-dataframe-write-csv"]], "polars.Config.set_tbl_hide_column_data_types": [[15, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.state": [[22, "polars-config-state"]], "polars.DataType": [[29, "polars-datatype"]], "polars.Binary": [[2, "polars-binary"]], "polars.SQLContext.execute": [[42, "polars-sqlcontext-execute"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.Int16": [[35, "polars-int16"]], "polars.Config.set_tbl_cell_alignment": [[10, "polars-config-set-tbl-cell-alignment"]], "polars.date_range": [[64, "polars-date-range"]], "polars.api.register_dataframe_namespace": [[55, "polars-api-register-dataframe-namespace"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.StringCache": [[45, "polars-stringcache"]], "polars.UInt64": [[50, "polars-uint64"]], "polars.Float64": [[34, "polars-float64"]], "polars.align_frames": [[54, "polars-align-frames"]], "polars.Config.set_verbose": [[21, "polars-config-set-verbose"]], "polars.arg_where": [[59, "polars-arg-where"]], "polars.DataFrame.write_ipc": [[25, "polars-dataframe-write-ipc"]], "polars.build_info": [[60, "polars-build-info"]], "polars.Config.set_tbl_hide_dataframe_shape": [[17, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Duration": [[32, "polars-duration"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.SQLContext.register": [[44, "polars-sqlcontext-register"]], "polars.UInt32": [[49, "polars-uint32"]], "polars.concat": [[62, "polars-concat"]], "polars.Config.set_tbl_hide_column_names": [[16, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_dtype_separator": [[18, "polars-config-set-tbl-hide-dtype-separator"]], "polars.List": [[39, "polars-list"]], "polars.Utf8": [[53, "polars-utf8"]], "polars.Int64": [[37, "polars-int64"]], "polars.Series.sin": [[797, "polars-series-sin"]], "polars.Series.to_arrow": [[843, "polars-series-to-arrow"]], "polars.Series.to_list": [[846, "polars-series-to-list"]], "polars.Series.str.to_lowercase": [[829, "polars-series-str-to-lowercase"]], "polars.Series.str.count_match": [[807, "polars-series-str-count-match"]], "polars.Series.str.lstrip": [[816, "polars-series-str-lstrip"]], "polars.Series.str.contains": [[806, "polars-series-str-contains"]], "polars.Series.str.slice": [[822, "polars-series-str-slice"]], "polars.Series.std": [[803, "polars-series-std"]], "polars.Series.shuffle": [[795, "polars-series-shuffle"]], "polars.Series.str.concat": [[805, "polars-series-str-concat"]], "polars.Series.sinh": [[798, "polars-series-sinh"]], "polars.Series.str.rjust": [[820, "polars-series-str-rjust"]], "polars.Series.str.to_uppercase": [[830, "polars-series-str-to-uppercase"]], "polars.Series.tail": [[837, "polars-series-tail"]], "polars.Series.unique": [[851, "polars-series-unique"]], "polars.Series.value_counts": [[853, "polars-series-value-counts"]], "polars.Series.struct.to_frame": [[835, "polars-series-struct-to-frame"]], "polars.Series.str.extract": [[811, "polars-series-str-extract"]], "polars.Series.str.n_chars": [[817, "polars-series-str-n-chars"]], "polars.Series.to_physical": [[849, "polars-series-to-physical"]], "polars.Series.str.zfill": [[831, "polars-series-str-zfill"]], "polars.Series.take": [[838, "polars-series-take"]], "polars.Series.sqrt": [[802, "polars-series-sqrt"]], "polars.Series.str.json_path_match": [[813, "polars-series-str-json-path-match"]], "polars.Series.shrink_dtype": [[793, "polars-series-shrink-dtype"]], "polars.Series.str.splitn": [[825, "polars-series-str-splitn"]], "polars.Series.str.starts_with": [[826, "polars-series-str-starts-with"]], "polars.Series.to_pandas": [[848, "polars-series-to-pandas"]], "polars.Series.shift_and_fill": [[792, "polars-series-shift-and-fill"]], "polars.Series.struct.fields": [[833, "polars-series-struct-fields"]], "polars.Series.str.split": [[823, "polars-series-str-split"]], "polars.Series.to_frame": [[845, "polars-series-to-frame"]], "polars.Series.to_numpy": [[847, "polars-series-to-numpy"]], "polars.Series.tanh": [[841, "polars-series-tanh"]], "polars.Series.str.replace_all": [[819, "polars-series-str-replace-all"]], "polars.Series.struct.field": [[832, "polars-series-struct-field"]], "polars.Series.unique_counts": [[852, "polars-series-unique-counts"]], "polars.Series.sum": [[836, "polars-series-sum"]], "polars.Series.time_unit": [[842, "polars-series-time-unit"]], "polars.Series.struct.rename_fields": [[834, "polars-series-struct-rename-fields"]], "polars.Series.top_k": [[850, "polars-series-top-k"]], "polars.Series.var": [[854, "polars-series-var"]], "polars.Series.tan": [[840, "polars-series-tan"]], "polars.Series.slice": [[800, "polars-series-slice"]], "polars.Series.str.ends_with": [[810, "polars-series-str-ends-with"]], "polars.Series.str": [[804, "polars-series-str"]], "polars.Series.str.replace": [[818, "polars-series-str-replace"]], "polars.Series.take_every": [[839, "polars-series-take-every"]], "polars.Series.to_dummies": [[844, "polars-series-to-dummies"]], "polars.Series.view": [[855, "polars-series-view"]], "polars.Series.str.encode": [[809, "polars-series-str-encode"]], "polars.Series.str.ljust": [[815, "polars-series-str-ljust"]], "polars.Series.sort": [[801, "polars-series-sort"]], "polars.Series.str.strip": [[827, "polars-series-str-strip"]], "polars.Series.zip_with": [[856, "polars-series-zip-with"]], "polars.Series.str.split_exact": [[824, "polars-series-str-split-exact"]], "polars.Series.str.lengths": [[814, "polars-series-str-lengths"]], "polars.Series.str.strptime": [[828, "polars-series-str-strptime"]], "polars.Series.sign": [[796, "polars-series-sign"]], "Array": [[857, "array"], [519, "array"]], "polars.Series.skew": [[799, "polars-series-skew"]], "polars.Series.shrink_to_fit": [[794, "polars-series-shrink-to-fit"]], "polars.Series.str.decode": [[808, "polars-series-str-decode"]], "polars.Series.str.rstrip": [[821, "polars-series-str-rstrip"]], "polars.Series.str.extract_all": [[812, "polars-series-str-extract-all"]], "polars.Series.set_sorted": [[789, "polars-series-set-sorted"]], "polars.Series.reverse": [[772, "polars-series-reverse"]], "polars.Series.quantile": [[766, "polars-series-quantile"]], "polars.Series.is_boolean": [[729, "polars-series-is-boolean"]], "polars.Series.round": [[783, "polars-series-round"]], "polars.Series.rolling_skew": [[779, "polars-series-rolling-skew"]], "polars.Series.is_unique": [[743, "polars-series-is-unique"]], "polars.Series.mean": [[751, "polars-series-mean"]], "polars.Series.sample": [[784, "polars-series-sample"]], "polars.Series.rolling_apply": [[773, "polars-series-rolling-apply"]], "polars.Series.shift": [[791, "polars-series-shift"]], "polars.Series.log10": [[749, "polars-series-log10"]], "polars.Series.is_datelike": [[730, "polars-series-is-datelike"]], "polars.Series.inner_dtype": [[727, "polars-series-inner-dtype"]], "polars.Series.nan_min": [[759, "polars-series-nan-min"]], "polars.Series.is_numeric": [[742, "polars-series-is-numeric"]], "polars.Series.search_sorted": [[785, "polars-series-search-sorted"]], "polars.Series.reinterpret": [[769, "polars-series-reinterpret"]], "polars.Series.rolling_var": [[782, "polars-series-rolling-var"]], "polars.Series.min": [[753, "polars-series-min"]], "polars.Series.limit": [[747, "polars-series-limit"]], "polars.Series.is_null": [[741, "polars-series-is-null"]], "polars.Series.max": [[750, "polars-series-max"]], "polars.Series.rolling_mean": [[775, "polars-series-rolling-mean"]], "polars.Series.set": [[787, "polars-series-set"]], "polars.Series.rolling_median": [[776, "polars-series-rolling-median"]], "polars.Series.nan_max": [[758, "polars-series-nan-max"]], "polars.Series.is_first": [[734, "polars-series-is-first"]], "polars.Series.log": [[748, "polars-series-log"]], "polars.Series.pct_change": [[762, "polars-series-pct-change"]], "polars.Series.rolling_std": [[780, "polars-series-rolling-std"]], "polars.Series.series_equal": [[786, "polars-series-series-equal"]], "polars.Series.mode": [[754, "polars-series-mode"]], "polars.Series.rolling_max": [[774, "polars-series-rolling-max"]], "polars.Series.rolling_min": [[777, "polars-series-rolling-min"]], "polars.Series.rank": [[767, "polars-series-rank"]], "polars.Series.rolling_quantile": [[778, "polars-series-rolling-quantile"]], "polars.Series.interpolate": [[728, "polars-series-interpolate"]], "polars.Series.is_empty": [[732, "polars-series-is-empty"]], "polars.Series.is_nan": [[738, "polars-series-is-nan"]], "polars.Series.median": [[752, "polars-series-median"]], "polars.Series.is_utf8": [[744, "polars-series-is-utf8"]], "polars.Series.product": [[765, "polars-series-product"]], "polars.Series.n_unique": [[756, "polars-series-n-unique"]], "polars.Series.rechunk": [[768, "polars-series-rechunk"]], "polars.Series.peak_min": [[764, "polars-series-peak-min"]], "polars.Series.is_not_nan": [[739, "polars-series-is-not-nan"]], "polars.Series.kurtosis": [[745, "polars-series-kurtosis"]], "polars.Series.len": [[746, "polars-series-len"]], "polars.Series.head": [[726, "polars-series-head"]], "polars.Series.new_from_index": [[760, "polars-series-new-from-index"]], "polars.Series.rolling_sum": [[781, "polars-series-rolling-sum"]], "polars.Series.is_float": [[735, "polars-series-is-float"]], "polars.Series.is_in": [[736, "polars-series-is-in"]], "polars.Series.is_finite": [[733, "polars-series-is-finite"]], "polars.Series.name": [[757, "polars-series-name"]], "polars.Series.is_infinite": [[737, "polars-series-is-infinite"]], "polars.Series.rename": [[770, "polars-series-rename"]], "polars.Series.n_chunks": [[755, "polars-series-n-chunks"]], "polars.Series.null_count": [[761, "polars-series-null-count"]], "polars.Series.reshape": [[771, "polars-series-reshape"]], "polars.Series.peak_max": [[763, "polars-series-peak-max"]], "polars.Series.is_not_null": [[740, "polars-series-is-not-null"]], "polars.Series.is_duplicated": [[731, "polars-series-is-duplicated"]], "polars.Series.shape": [[790, "polars-series-shape"]], "polars.Series.set_at_idx": [[788, "polars-series-set-at-idx"]], "polars.Series.cummin": [[663, "polars-series-cummin"]], "polars.Series.extend_constant": [[717, "polars-series-extend-constant"]], "polars.Series.dt.ordinal_day": [[695, "polars-series-dt-ordinal-day"]], "polars.Series.cumprod": [[664, "polars-series-cumprod"]], "polars.Series.exp": [[715, "polars-series-exp"]], "polars.Series.cos": [[660, "polars-series-cos"]], "polars.Series.dt.hours": [[679, "polars-series-dt-hours"]], "polars.Series.dt.nanosecond": [[692, "polars-series-dt-nanosecond"]], "polars.Series.dt.quarter": [[696, "polars-series-dt-quarter"]], "polars.Series.dt.month": [[691, "polars-series-dt-month"]], "polars.Series.describe": [[667, "polars-series-describe"]], "polars.Series.dtype": [[709, "polars-series-dtype"]], "polars.Series.drop_nulls": [[671, "polars-series-drop-nulls"]], "polars.Series.dt.with_time_zone": [[707, "polars-series-dt-with-time-zone"]], "polars.Series.ewm_var": [[714, "polars-series-ewm-var"]], "polars.Series.hash": [[725, "polars-series-hash"]], "polars.Series.dt.milliseconds": [[687, "polars-series-dt-milliseconds"]], "polars.Series.dt.with_time_unit": [[706, "polars-series-dt-with-time-unit"]], "polars.Series.diff": [[668, "polars-series-diff"]], "polars.Series.dt.millisecond": [[686, "polars-series-dt-millisecond"]], "polars.Series.dt.min": [[688, "polars-series-dt-min"]], "polars.Series.cosh": [[661, "polars-series-cosh"]], "polars.Series.dt.nanoseconds": [[693, "polars-series-dt-nanoseconds"]], "polars.Series.dt.weekday": [[705, "polars-series-dt-weekday"]], "polars.Series.filter": [[720, "polars-series-filter"]], "polars.Series.dt.days": [[676, "polars-series-dt-days"]], "polars.Series.dt.median": [[683, "polars-series-dt-median"]], "polars.Series.has_validity": [[724, "polars-series-has-validity"]], "polars.Series.dt.day": [[675, "polars-series-dt-day"]], "polars.Series.dt.truncate": [[702, "polars-series-dt-truncate"]], "polars.Series.flags": [[721, "polars-series-flags"]], "polars.Series.dt": [[672, "polars-series-dt"]], "polars.Series.get_chunks": [[723, "polars-series-get-chunks"]], "polars.Series.dt.minutes": [[690, "polars-series-dt-minutes"]], "polars.Series.dt.round": [[697, "polars-series-dt-round"]], "polars.Series.dt.epoch": [[677, "polars-series-dt-epoch"]], "polars.Series.dt.hour": [[678, "polars-series-dt-hour"]], "polars.Series.dt.second": [[698, "polars-series-dt-second"]], "polars.Series.fill_null": [[719, "polars-series-fill-null"]], "polars.Series.dt.strftime": [[700, "polars-series-dt-strftime"]], "polars.Series.estimated_size": [[711, "polars-series-estimated-size"]], "polars.Series.dt.tz_localize": [[703, "polars-series-dt-tz-localize"]], "polars.Series.entropy": [[710, "polars-series-entropy"]], "polars.Series.fill_nan": [[718, "polars-series-fill-nan"]], "polars.Series.cummax": [[662, "polars-series-cummax"]], "polars.Series.drop_nans": [[670, "polars-series-drop-nans"]], "polars.Series.dt.cast_time_zone": [[674, "polars-series-dt-cast-time-zone"]], "polars.Series.dt.max": [[681, "polars-series-dt-max"]], "polars.Series.dt.offset_by": [[694, "polars-series-dt-offset-by"]], "polars.Series.dt.timestamp": [[701, "polars-series-dt-timestamp"]], "polars.Series.dt.microsecond": [[684, "polars-series-dt-microsecond"]], "polars.Series.dt.iso_year": [[680, "polars-series-dt-iso-year"]], "polars.Series.ewm_mean": [[712, "polars-series-ewm-mean"]], "polars.Series.ewm_std": [[713, "polars-series-ewm-std"]], "polars.Series.dt.minute": [[689, "polars-series-dt-minute"]], "polars.Series.dt.cast_time_unit": [[673, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.mean": [[682, "polars-series-dt-mean"]], "polars.Series.dt.week": [[704, "polars-series-dt-week"]], "polars.Series.dt.microseconds": [[685, "polars-series-dt-microseconds"]], "polars.Series.explode": [[716, "polars-series-explode"]], "polars.Series.floor": [[722, "polars-series-floor"]], "polars.Series.cumsum": [[665, "polars-series-cumsum"]], "polars.Series.dot": [[669, "polars-series-dot"]], "polars.Series.dt.seconds": [[699, "polars-series-dt-seconds"]], "polars.Series.cumulative_eval": [[666, "polars-series-cumulative-eval"]], "polars.Series.dt.year": [[708, "polars-series-dt-year"]], "Series": [[864, "series"]], "SQL": [[870, "sql"], [535, "sql"]], "Methods": [[870, "methods"]], "Export": [[863, "export"], [234, "export"]], "Manipulation/selection": [[866, "manipulation-selection"], [606, "manipulation-selection"], [528, "manipulation-selection"], [238, "manipulation-selection"]], "Categories": [[860, "categories"], [521, "categories"]], "Descriptive": [[862, "descriptive"], [602, "descriptive"], [233, "descriptive"]], "Strings": [[867, "strings"], [529, "strings"]], "Testing": [[871, "testing"]], "Asserts": [[871, "asserts"]], "Property-based testing": [[871, "property-based-testing"]], "Strategies": [[871, "strategies"]], "Strategy helpers": [[871, "strategy-helpers"]], "Temporal": [[869, "temporal"], [531, "temporal"]], "Attributes": [[858, "attributes"], [601, "attributes"], [231, "attributes"]], "Miscellaneous": [[865, "miscellaneous"], [605, "miscellaneous"], [533, "miscellaneous"], [527, "miscellaneous"], [237, "miscellaneous"]], "Struct": [[868, "struct"], [530, "struct"]], "Boolean": [[859, "boolean"], [520, "boolean"]], "Utils": [[872, "utils"]], "Computation": [[861, "computation"], [523, "computation"], [232, "computation"]], "GroupBy": [[603, "groupby"], [235, "groupby"]], "polars.Series.arr.get": [[634, "polars-series-arr-get"]], "polars.Series.apply": [[613, "polars-series-apply"]], "polars.Series.arr.arg_min": [[628, "polars-series-arr-arg-min"]], "polars.Series.arg_max": [[620, "polars-series-arg-max"]], "polars.Series.argsort": [[625, "polars-series-argsort"]], "polars.Series.arctanh": [[619, "polars-series-arctanh"]], "polars.Series.cat.set_ordering": [[652, "polars-series-cat-set-ordering"]], "polars.Series.clip_min": [[658, "polars-series-clip-min"]], "Read/write logical plan": [[605, "read-write-logical-plan"]], "polars.Series.arr.concat": [[629, "polars-series-arr-concat"]], "polars.Series.clip": [[656, "polars-series-clip"]], "polars.Series.chunk_lengths": [[654, "polars-series-chunk-lengths"]], "polars.Series.arr.mean": [[640, "polars-series-arr-mean"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[600, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.abs": [[608, "polars-series-abs"]], "polars.Series.append": [[612, "polars-series-append"]], "polars.Series.arr.eval": [[632, "polars-series-arr-eval"]], "polars.Series.arr.diff": [[631, "polars-series-arr-diff"]], "polars.Series.arr.unique": [[649, "polars-series-arr-unique"]], "polars.Series.cat": [[651, "polars-series-cat"]], "polars.Series.clone": [[659, "polars-series-clone"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[599, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "LazyFrame": [[604, "lazyframe"]], "polars.Series.any": [[611, "polars-series-any"]], "polars.Series.arr.min": [[641, "polars-series-arr-min"]], "polars.Series.arr.slice": [[644, "polars-series-arr-slice"]], "polars.Series.arr.sum": [[646, "polars-series-arr-sum"]], "polars.Series.arr.sort": [[645, "polars-series-arr-sort"]], "polars.Series.cleared": [[655, "polars-series-cleared"]], "polars.LazyFrame.write_json": [[596, "polars-lazyframe-write-json"]], "polars.Series.arr": [[626, "polars-series-arr"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[598, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.with_row_count": [[595, "polars-lazyframe-with-row-count"]], "polars.Series.all": [[610, "polars-series-all"]], "polars.Series.arccos": [[614, "polars-series-arccos"]], "polars.Series.arg_min": [[621, "polars-series-arg-min"]], "polars.Series.arr.first": [[633, "polars-series-arr-first"]], "polars.Series.arg_unique": [[624, "polars-series-arg-unique"]], "polars.Series.alias": [[609, "polars-series-alias"]], "polars.Series.cast": [[650, "polars-series-cast"]], "polars.Series.arg_sort": [[622, "polars-series-arg-sort"]], "polars.Series.arr.lengths": [[638, "polars-series-arr-lengths"]], "polars.Series.arr.max": [[639, "polars-series-arr-max"]], "polars.Series.arr.join": [[636, "polars-series-arr-join"]], "polars.Series.arr.tail": [[647, "polars-series-arr-tail"]], "polars.Series.arr.arg_max": [[627, "polars-series-arr-arg-max"]], "polars.Series.arr.to_struct": [[648, "polars-series-arr-to-struct"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[597, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.arccosh": [[615, "polars-series-arccosh"]], "polars.Series.ceil": [[653, "polars-series-ceil"]], "polars.Series.arr.head": [[635, "polars-series-arr-head"]], "polars.Series.arcsinh": [[617, "polars-series-arcsinh"]], "polars.Series.arg_true": [[623, "polars-series-arg-true"]], "polars.Series.arcsin": [[616, "polars-series-arcsin"]], "polars.Series.arctan": [[618, "polars-series-arctan"]], "polars.Series.arr.contains": [[630, "polars-series-arr-contains"]], "polars.Series.arr.shift": [[643, "polars-series-arr-shift"]], "polars.Series.arr.reverse": [[642, "polars-series-arr-reverse"]], "polars.Series.clip_max": [[657, "polars-series-clip-max"]], "polars.LazyFrame.with_context": [[594, "polars-lazyframe-with-context"]], "polars.Series.arr.last": [[637, "polars-series-arr-last"]], "polars.LazyFrame.dtypes": [[546, "polars-lazyframe-dtypes"]], "polars.LazyFrame.std": [[584, "polars-lazyframe-std"]], "polars.LazyFrame.shift": [[579, "polars-lazyframe-shift"]], "polars.LazyFrame.unnest": [[589, "polars-lazyframe-unnest"]], "polars.LazyFrame.show_graph": [[581, "polars-lazyframe-show-graph"]], "polars.LazyFrame.clone": [[539, "polars-lazyframe-clone"]], "polars.LazyFrame.cache": [[537, "polars-lazyframe-cache"]], "polars.LazyFrame.limit": [[564, "polars-lazyframe-limit"]], "polars.LazyFrame.last": [[562, "polars-lazyframe-last"]], "polars.LazyFrame.mean": [[567, "polars-lazyframe-mean"]], "polars.LazyFrame.pipe": [[571, "polars-lazyframe-pipe"]], "polars.LazyFrame.shift_and_fill": [[580, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.filter": [[551, "polars-lazyframe-filter"]], "polars.LazyFrame.fill_null": [[550, "polars-lazyframe-fill-null"]], "polars.LazyFrame.fetch": [[548, "polars-lazyframe-fetch"]], "polars.LazyFrame.profile": [[572, "polars-lazyframe-profile"]], "polars.LazyFrame.interpolate": [[559, "polars-lazyframe-interpolate"]], "polars.LazyFrame.quantile": [[573, "polars-lazyframe-quantile"]], "polars.LazyFrame.sum": [[585, "polars-lazyframe-sum"]], "polars.LazyFrame.fill_nan": [[549, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.groupby_dynamic": [[555, "polars-lazyframe-groupby-dynamic"]], "Functions": [[533, "functions"], [524, "functions"], [240, "functions"]], "Conversion": [[533, "conversion"]], "Eager/Lazy functions": [[533, "eager-lazy-functions"]], "Parallelization": [[533, "parallelization"]], "StringCache": [[533, "stringcache"]], "polars.LazyFrame.select": [[578, "polars-lazyframe-select"]], "polars.LazyFrame.columns": [[541, "polars-lazyframe-columns"]], "polars.LazyFrame.groupby": [[554, "polars-lazyframe-groupby"]], "polars.LazyFrame.unique": [[588, "polars-lazyframe-unique"]], "polars.LazyFrame.cleared": [[538, "polars-lazyframe-cleared"]], "polars.LazyFrame.map": [[565, "polars-lazyframe-map"]], "polars.LazyFrame.lazy": [[563, "polars-lazyframe-lazy"]], "Window": [[532, "window"]], "polars.LazyFrame.median": [[568, "polars-lazyframe-median"]], "polars.LazyFrame.inspect": [[558, "polars-lazyframe-inspect"]], "polars.LazyFrame.melt": [[569, "polars-lazyframe-melt"]], "polars.LazyFrame.reverse": [[576, "polars-lazyframe-reverse"]], "polars.LazyFrame.schema": [[577, "polars-lazyframe-schema"]], "Input/output": [[535, "input-output"]], "CSV": [[535, "csv"]], "Feather/ IPC": [[535, "feather-ipc"]], "Parquet": [[535, "parquet"]], "JSON": [[535, "json"]], "AVRO": [[535, "avro"]], "Excel": [[535, "excel"]], "Delta Lake": [[535, "delta-lake"]], "Datasets": [[535, "datasets"]], "BatchedCsvReader": [[535, "batchedcsvreader"]], "polars.LazyFrame.describe_optimized_plan": [[542, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.tail": [[586, "polars-lazyframe-tail"]], "polars.LazyFrame.join_asof": [[561, "polars-lazyframe-join-asof"]], "polars.LazyFrame.sort": [[583, "polars-lazyframe-sort"]], "polars.LazyFrame.width": [[591, "polars-lazyframe-width"]], "polars.LazyFrame.with_columns": [[593, "polars-lazyframe-with-columns"]], "polars.LazyFrame.rename": [[575, "polars-lazyframe-rename"]], "polars.LazyFrame.first": [[552, "polars-lazyframe-first"]], "polars.LazyFrame.var": [[590, "polars-lazyframe-var"]], "polars.LazyFrame.describe_plan": [[543, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.join": [[560, "polars-lazyframe-join"]], "polars.LazyFrame.drop": [[544, "polars-lazyframe-drop"]], "polars.LazyFrame.max": [[566, "polars-lazyframe-max"]], "polars.LazyFrame.explode": [[547, "polars-lazyframe-explode"]], "polars.LazyFrame.from_json": [[553, "polars-lazyframe-from-json"]], "polars.LazyFrame.drop_nulls": [[545, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.slice": [[582, "polars-lazyframe-slice"]], "polars.LazyFrame.read_json": [[574, "polars-lazyframe-read-json"]], "polars.LazyFrame.min": [[570, "polars-lazyframe-min"]], "polars.LazyFrame.collect": [[540, "polars-lazyframe-collect"]], "polars.LazyFrame.head": [[557, "polars-lazyframe-head"]], "API reference": [[534, "api-reference"]], "polars.LazyFrame.take_every": [[587, "polars-lazyframe-take-every"]], "polars.LazyFrame.with_column": [[592, "polars-lazyframe-with-column"]], "polars.LazyFrame.groupby_rolling": [[556, "polars-lazyframe-groupby-rolling"]], "polars.Expr.set_sorted": [[416, "polars-expr-set-sorted"]], "polars.Expr.sinh": [[423, "polars-expr-sinh"]], "polars.Expr.rolling_median": [[406, "polars-expr-rolling-median"]], "polars.Expr.str.extract_all": [[437, "polars-expr-str-extract-all"]], "polars.Expr.str.zfill": [[456, "polars-expr-str-zfill"]], "polars.Expr.shuffle": [[420, "polars-expr-shuffle"]], "polars.Expr.std": [[429, "polars-expr-std"]], "polars.Expr.repeat_by": [[400, "polars-expr-repeat-by"]], "polars.Expr.rolling_skew": [[409, "polars-expr-rolling-skew"]], "polars.Expr.str.n_chars": [[442, "polars-expr-str-n-chars"]], "polars.Expr.rolling_max": [[404, "polars-expr-rolling-max"]], "polars.Expr.tail": [[461, "polars-expr-tail"]], "polars.Expr.rolling_sum": [[411, "polars-expr-rolling-sum"]], "polars.Expr.str.concat": [[430, "polars-expr-str-concat"]], "polars.Expr.search_sorted": [[415, "polars-expr-search-sorted"]], "polars.Expr.sort_by": [[427, "polars-expr-sort-by"]], "polars.Expr.rolling_std": [[410, "polars-expr-rolling-std"]], "polars.Expr.str.replace_all": [[444, "polars-expr-str-replace-all"]], "polars.Expr.str.lstrip": [[441, "polars-expr-str-lstrip"]], "polars.Expr.str.lengths": [[439, "polars-expr-str-lengths"]], "polars.Expr.round": [[413, "polars-expr-round"]], "polars.Expr.rolling_apply": [[403, "polars-expr-rolling-apply"]], "polars.Expr.rolling_min": [[407, "polars-expr-rolling-min"]], "polars.Expr.str.starts_with": [[451, "polars-expr-str-starts-with"]], "polars.Expr.str.strip": [[452, "polars-expr-str-strip"]], "polars.Expr.rolling_var": [[412, "polars-expr-rolling-var"]], "polars.Expr.sample": [[414, "polars-expr-sample"]], "polars.Expr.str.ljust": [[440, "polars-expr-str-ljust"]], "polars.Expr.struct.rename_fields": [[458, "polars-expr-struct-rename-fields"]], "polars.Expr.str.strptime": [[453, "polars-expr-str-strptime"]], "polars.Expr.struct.field": [[457, "polars-expr-struct-field"]], "polars.Expr.skew": [[424, "polars-expr-skew"]], "polars.Expr.sign": [[421, "polars-expr-sign"]], "polars.Expr.str.splitn": [[450, "polars-expr-str-splitn"]], "polars.Expr.str.split": [[448, "polars-expr-str-split"]], "polars.Expr.quantile": [[396, "polars-expr-quantile"]], "polars.Expr.shrink_dtype": [[419, "polars-expr-shrink-dtype"]], "polars.Expr.sum": [[460, "polars-expr-sum"]], "polars.Expr.str.slice": [[447, "polars-expr-str-slice"]], "polars.Expr.reinterpret": [[399, "polars-expr-reinterpret"]], "polars.Expr.suffix": [[459, "polars-expr-suffix"]], "polars.Expr.rolling_quantile": [[408, "polars-expr-rolling-quantile"]], "polars.Expr.str.ends_with": [[435, "polars-expr-str-ends-with"]], "polars.Expr.reverse": [[402, "polars-expr-reverse"]], "polars.Expr.rank": [[397, "polars-expr-rank"]], "polars.Expr.sqrt": [[428, "polars-expr-sqrt"]], "polars.Expr.rechunk": [[398, "polars-expr-rechunk"]], "polars.Expr.slice": [[425, "polars-expr-slice"]], "polars.Expr.str.extract": [[436, "polars-expr-str-extract"]], "polars.Expr.str.to_lowercase": [[454, "polars-expr-str-to-lowercase"]], "polars.Expr.reshape": [[401, "polars-expr-reshape"]], "polars.Expr.str.count_match": [[432, "polars-expr-str-count-match"]], "polars.Expr.str.to_uppercase": [[455, "polars-expr-str-to-uppercase"]], "polars.Expr.rolling_mean": [[405, "polars-expr-rolling-mean"]], "polars.Expr.shift_and_fill": [[418, "polars-expr-shift-and-fill"]], "polars.Expr.str.split_exact": [[449, "polars-expr-str-split-exact"]], "polars.Expr.sort": [[426, "polars-expr-sort"]], "polars.Expr.str.contains": [[431, "polars-expr-str-contains"]], "polars.Expr.str.replace": [[443, "polars-expr-str-replace"]], "polars.Expr.sin": [[422, "polars-expr-sin"]], "polars.Expr.str.json_path_match": [[438, "polars-expr-str-json-path-match"]], "polars.Expr.str.rstrip": [[446, "polars-expr-str-rstrip"]], "polars.Expr.str.rjust": [[445, "polars-expr-str-rjust"]], "polars.Expr.str.encode": [[434, "polars-expr-str-encode"]], "polars.Expr.str.decode": [[433, "polars-expr-str-decode"]], "polars.Expr.shift": [[417, "polars-expr-shift"]], "polars.Expr.pct_change": [[392, "polars-expr-pct-change"]], "polars.Expr.meta.pop": [[382, "polars-expr-meta-pop"]], "polars.Expr.meta.output_name": [[381, "polars-expr-meta-output-name"]], "polars.Expr.mean": [[379, "polars-expr-mean"]], "polars.Expr.over": [[391, "polars-expr-over"]], "polars.Expr.n_unique": [[387, "polars-expr-n-unique"]], "polars.Expr.is_unique": [[366, "polars-expr-is-unique"]], "polars.Expr.max": [[378, "polars-expr-max"]], "polars.Expr.map_alias": [[377, "polars-expr-map-alias"]], "polars.Expr.mode": [[386, "polars-expr-mode"]], "polars.Expr.is_not_nan": [[363, "polars-expr-is-not-nan"]], "polars.Expr.filter": [[346, "polars-expr-filter"]], "polars.Expr.forward_fill": [[350, "polars-expr-forward-fill"]], "polars.Expr.keep_name": [[367, "polars-expr-keep-name"]], "polars.Expr.flatten": [[348, "polars-expr-flatten"]], "polars.Expr.inspect": [[353, "polars-expr-inspect"]], "polars.Expr.meta.root_names": [[383, "polars-expr-meta-root-names"]], "polars.Expr.nan_max": [[388, "polars-expr-nan-max"]], "polars.Expr.dt.year": [[335, "polars-expr-dt-year"]], "polars.Expr.dt.with_time_zone": [[334, "polars-expr-dt-with-time-zone"]], "polars.Expr.product": [[395, "polars-expr-product"]], "polars.Expr.lower_bound": [[375, "polars-expr-lower-bound"]], "polars.Expr.fill_null": [[345, "polars-expr-fill-null"]], "polars.Expr.is_not_null": [[364, "polars-expr-is-not-null"]], "polars.Expr.ewm_std": [[338, "polars-expr-ewm-std"]], "polars.Expr.interpolate": [[354, "polars-expr-interpolate"]], "polars.Expr.is_not": [[362, "polars-expr-is-not"]], "polars.Expr.is_first": [[358, "polars-expr-is-first"]], "polars.Expr.map": [[376, "polars-expr-map"]], "polars.Expr.nan_min": [[389, "polars-expr-nan-min"]], "polars.Expr.list": [[372, "polars-expr-list"]], "polars.Expr.head": [[352, "polars-expr-head"]], "polars.Expr.log10": [[374, "polars-expr-log10"]], "polars.Expr.dt.with_time_unit": [[333, "polars-expr-dt-with-time-unit"]], "polars.Expr.ewm_var": [[339, "polars-expr-ewm-var"]], "polars.Expr.is_infinite": [[360, "polars-expr-is-infinite"]], "polars.Expr.is_nan": [[361, "polars-expr-is-nan"]], "polars.Expr.kurtosis": [[368, "polars-expr-kurtosis"]], "polars.Expr.dt.tz_localize": [[330, "polars-expr-dt-tz-localize"]], "polars.Expr.is_duplicated": [[356, "polars-expr-is-duplicated"]], "polars.Expr.explode": [[342, "polars-expr-explode"]], "polars.Expr.is_finite": [[357, "polars-expr-is-finite"]], "polars.Expr.is_null": [[365, "polars-expr-is-null"]], "polars.Expr.last": [[369, "polars-expr-last"]], "polars.Expr.exclude": [[340, "polars-expr-exclude"]], "polars.Expr.first": [[347, "polars-expr-first"]], "polars.Expr.ewm_mean": [[337, "polars-expr-ewm-mean"]], "polars.Expr.hash": [[351, "polars-expr-hash"]], "polars.Expr.dt.week": [[331, "polars-expr-dt-week"]], "polars.Expr.len": [[370, "polars-expr-len"]], "polars.Expr.fill_nan": [[344, "polars-expr-fill-nan"]], "polars.Expr.floor": [[349, "polars-expr-floor"]], "polars.Expr.meta.undo_aliases": [[384, "polars-expr-meta-undo-aliases"]], "polars.Expr.is_in": [[359, "polars-expr-is-in"]], "polars.Expr.min": [[385, "polars-expr-min"]], "polars.Expr.extend_constant": [[343, "polars-expr-extend-constant"]], "polars.Expr.limit": [[371, "polars-expr-limit"]], "polars.Expr.null_count": [[390, "polars-expr-null-count"]], "polars.Expr.prefix": [[394, "polars-expr-prefix"]], "polars.Expr.dt.weekday": [[332, "polars-expr-dt-weekday"]], "polars.Expr.is_between": [[355, "polars-expr-is-between"]], "polars.Expr.log": [[373, "polars-expr-log"]], "polars.Expr.entropy": [[336, "polars-expr-entropy"]], "polars.Expr.exp": [[341, "polars-expr-exp"]], "polars.Expr.median": [[380, "polars-expr-median"]], "polars.Expr.pow": [[393, "polars-expr-pow"]], "polars.Expr.count": [[293, "polars-expr-count"]], "polars.Expr.drop_nulls": [[303, "polars-expr-drop-nulls"]], "polars.Expr.dt.microsecond": [[312, "polars-expr-dt-microsecond"]], "polars.Expr.cat.set_ordering": [[286, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.ordinal_day": [[322, "polars-expr-dt-ordinal-day"]], "polars.Expr.arr.last": [[271, "polars-expr-arr-last"]], "polars.Expr.cumcount": [[294, "polars-expr-cumcount"]], "polars.Expr.arr.tail": [[281, "polars-expr-arr-tail"]], "polars.Expr.dt.second": [[325, "polars-expr-dt-second"]], "polars.Expr.cumprod": [[297, "polars-expr-cumprod"]], "polars.Expr.clip_max": [[289, "polars-expr-clip-max"]], "polars.Expr.dt.nanosecond": [[319, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.hour": [[309, "polars-expr-dt-hour"]], "polars.Expr.dt.strftime": [[327, "polars-expr-dt-strftime"]], "polars.Expr.dt.timestamp": [[328, "polars-expr-dt-timestamp"]], "polars.Expr.dt.cast_time_zone": [[305, "polars-expr-dt-cast-time-zone"]], "polars.Expr.dt.days": [[307, "polars-expr-dt-days"]], "polars.Expr.dt.truncate": [[329, "polars-expr-dt-truncate"]], "polars.Expr.dt.month": [[318, "polars-expr-dt-month"]], "polars.Expr.arr.reverse": [[276, "polars-expr-arr-reverse"]], "polars.Expr.cos": [[291, "polars-expr-cos"]], "polars.Expr.arr.head": [[269, "polars-expr-arr-head"]], "polars.Expr.arr.lengths": [[272, "polars-expr-arr-lengths"]], "polars.Expr.arr.sum": [[280, "polars-expr-arr-sum"]], "polars.Expr.arr.get": [[268, "polars-expr-arr-get"]], "polars.Expr.dt.day": [[306, "polars-expr-dt-day"]], "polars.Expr.dt.minutes": [[317, "polars-expr-dt-minutes"]], "polars.Expr.dt.millisecond": [[314, "polars-expr-dt-millisecond"]], "polars.Expr.dt.minute": [[316, "polars-expr-dt-minute"]], "polars.Expr.diff": [[300, "polars-expr-diff"]], "polars.Expr.drop_nans": [[302, "polars-expr-drop-nans"]], "polars.Expr.dt.cast_time_unit": [[304, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.round": [[324, "polars-expr-dt-round"]], "polars.Expr.ceil": [[287, "polars-expr-ceil"]], "polars.Expr.cumulative_eval": [[299, "polars-expr-cumulative-eval"]], "polars.Expr.arr.eval": [[266, "polars-expr-arr-eval"]], "polars.Expr.arr.slice": [[278, "polars-expr-arr-slice"]], "polars.Expr.dt.epoch": [[308, "polars-expr-dt-epoch"]], "polars.Expr.dt.nanoseconds": [[320, "polars-expr-dt-nanoseconds"]], "polars.Expr.arr.join": [[270, "polars-expr-arr-join"]], "polars.Expr.dt.milliseconds": [[315, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.microseconds": [[313, "polars-expr-dt-microseconds"]], "polars.Expr.arr.mean": [[274, "polars-expr-arr-mean"]], "polars.Expr.dt.hours": [[310, "polars-expr-dt-hours"]], "polars.Expr.backward_fill": [[284, "polars-expr-backward-fill"]], "polars.Expr.dt.seconds": [[326, "polars-expr-dt-seconds"]], "polars.Expr.clip": [[288, "polars-expr-clip"]], "polars.Expr.arr.min": [[275, "polars-expr-arr-min"]], "polars.Expr.cummax": [[295, "polars-expr-cummax"]], "polars.Expr.cosh": [[292, "polars-expr-cosh"]], "polars.Expr.dt.iso_year": [[311, "polars-expr-dt-iso-year"]], "polars.Expr.dt.offset_by": [[321, "polars-expr-dt-offset-by"]], "polars.Expr.arr.first": [[267, "polars-expr-arr-first"]], "polars.Expr.arr.sort": [[279, "polars-expr-arr-sort"]], "polars.Expr.dt.quarter": [[323, "polars-expr-dt-quarter"]], "polars.Expr.clip_min": [[290, "polars-expr-clip-min"]], "polars.Expr.arr.shift": [[277, "polars-expr-arr-shift"]], "polars.Expr.arr.to_struct": [[282, "polars-expr-arr-to-struct"]], "polars.Expr.arr.diff": [[265, "polars-expr-arr-diff"]], "polars.Expr.cast": [[285, "polars-expr-cast"]], "polars.Expr.arr.contains": [[264, "polars-expr-arr-contains"]], "polars.Expr.cumsum": [[298, "polars-expr-cumsum"]], "polars.Expr.cummin": [[296, "polars-expr-cummin"]], "polars.Expr.arr.unique": [[283, "polars-expr-arr-unique"]], "polars.Expr.arr.max": [[273, "polars-expr-arr-max"]], "polars.Expr.dot": [[301, "polars-expr-dot"]], "polars.list": [[499, "polars-list"]], "polars.cumfold": [[486, "polars-cumfold"]], "polars.groups": [[497, "polars-groups"]], "polars.Expr.take": [[462, "polars-expr-take"]], "polars.quantile": [[508, "polars-quantile"]], "polars.max": [[502, "polars-max"]], "polars.struct": [[514, "polars-struct"]], "polars.median": [[504, "polars-median"]], "polars.min": [[505, "polars-min"]], "polars.when": [[518, "polars-when"]], "polars.argsort_by": [[478, "polars-argsort-by"]], "polars.fold": [[495, "polars-fold"]], "polars.first": [[494, "polars-first"]], "polars.datetime": [[490, "polars-datetime"]], "polars.exclude": [[493, "polars-exclude"]], "polars.reduce": [[509, "polars-reduce"]], "polars.spearman_rank_corr": [[512, "polars-spearman-rank-corr"]], "polars.tail": [[516, "polars-tail"]], "polars.Expr.upper_bound": [[470, "polars-expr-upper-bound"]], "polars.std": [[513, "polars-std"]], "polars.map": [[501, "polars-map"]], "polars.var": [[517, "polars-var"]], "polars.Expr.unique": [[468, "polars-expr-unique"]], "polars.pearson_corr": [[507, "polars-pearson-corr"]], "polars.concat_str": [[483, "polars-concat-str"]], "polars.Expr.value_counts": [[471, "polars-expr-value-counts"]], "polars.Expr.tan": [[464, "polars-expr-tan"]], "polars.Expr.take_every": [[463, "polars-expr-take-every"]], "polars.format": [[496, "polars-format"]], "polars.mean": [[503, "polars-mean"]], "polars.element": [[492, "polars-element"]], "polars.duration": [[491, "polars-duration"]], "polars.apply": [[476, "polars-apply"]], "polars.cumreduce": [[487, "polars-cumreduce"]], "polars.cumsum": [[488, "polars-cumsum"]], "polars.date": [[489, "polars-date"]], "polars.Expr.where": [[473, "polars-expr-where"]], "polars.head": [[498, "polars-head"]], "polars.avg": [[479, "polars-avg"]], "polars.Expr.top_k": [[467, "polars-expr-top-k"]], "polars.any": [[475, "polars-any"]], "polars.repeat": [[510, "polars-repeat"]], "polars.Expr.var": [[472, "polars-expr-var"]], "polars.arange": [[477, "polars-arange"]], "polars.coalesce": [[480, "polars-coalesce"]], "polars.col": [[481, "polars-col"]], "polars.concat_list": [[482, "polars-concat-list"]], "polars.sum": [[515, "polars-sum"]], "Expressions": [[525, "expressions"]], "polars.count": [[484, "polars-count"]], "polars.n_unique": [[506, "polars-n-unique"]], "polars.lit": [[500, "polars-lit"]], "polars.Expr.tanh": [[465, "polars-expr-tanh"]], "Columns / names": [[522, "columns-names"]], "Meta": [[526, "meta"]], "polars.Expr.unique_counts": [[469, "polars-expr-unique-counts"]], "polars.select": [[511, "polars-select"]], "polars.all": [[474, "polars-all"]], "polars.cov": [[485, "polars-cov"]], "polars.Expr.to_physical": [[466, "polars-expr-to-physical"]], "polars.DataFrame.height": [[143, "polars-dataframe-height"]], "polars.DataFrame.to_numpy": [[192, "polars-dataframe-to-numpy"]], "polars.DataFrame.find_idx_by_name": [[132, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.shrink_to_fit": [[181, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.n_chunks": [[159, "polars-dataframe-n-chunks"]], "polars.DataFrame.null_count": [[161, "polars-dataframe-null-count"]], "polars.DataFrame.transpose": [[196, "polars-dataframe-transpose"]], "polars.DataFrame.hash_rows": [[141, "polars-dataframe-hash-rows"]], "polars.DataFrame.hstack": [[144, "polars-dataframe-hstack"]], "polars.DataFrame.to_series": [[194, "polars-dataframe-to-series"]], "polars.DataFrame.join_asof": [[151, "polars-dataframe-join-asof"]], "polars.DataFrame.to_dict": [[189, "polars-dataframe-to-dict"]], "polars.DataFrame.rechunk": [[168, "polars-dataframe-rechunk"]], "polars.DataFrame.take_every": [[187, "polars-dataframe-take-every"]], "polars.DataFrame.insert_at_idx": [[145, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.pearson_corr": [[163, "polars-dataframe-pearson-corr"]], "polars.DataFrame.tail": [[186, "polars-dataframe-tail"]], "polars.DataFrame.interpolate": [[146, "polars-dataframe-interpolate"]], "polars.DataFrame.to_dicts": [[190, "polars-dataframe-to-dicts"]], "polars.DataFrame.shift": [[179, "polars-dataframe-shift"]], "polars.DataFrame.quantile": [[167, "polars-dataframe-quantile"]], "polars.DataFrame.to_pandas": [[193, "polars-dataframe-to-pandas"]], "polars.DataFrame.replace": [[170, "polars-dataframe-replace"]], "polars.DataFrame.max": [[154, "polars-dataframe-max"]], "polars.DataFrame.n_unique": [[160, "polars-dataframe-n-unique"]], "polars.DataFrame.pivot": [[165, "polars-dataframe-pivot"]], "polars.DataFrame.glimpse": [[137, "polars-dataframe-glimpse"]], "polars.DataFrame.to_dummies": [[191, "polars-dataframe-to-dummies"]], "polars.DataFrame.replace_at_idx": [[171, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.std": [[184, "polars-dataframe-std"]], "polars.DataFrame.get_columns": [[136, "polars-dataframe-get-columns"]], "polars.DataFrame.is_empty": [[148, "polars-dataframe-is-empty"]], "polars.DataFrame.schema": [[176, "polars-dataframe-schema"]], "polars.DataFrame.lazy": [[152, "polars-dataframe-lazy"]], "polars.DataFrame.sort": [[183, "polars-dataframe-sort"]], "polars.DataFrame.rename": [[169, "polars-dataframe-rename"]], "polars.DataFrame.median": [[156, "polars-dataframe-median"]], "polars.DataFrame.to_arrow": [[188, "polars-dataframe-to-arrow"]], "polars.DataFrame.slice": [[182, "polars-dataframe-slice"]], "polars.DataFrame.is_duplicated": [[147, "polars-dataframe-is-duplicated"]], "polars.DataFrame.melt": [[157, "polars-dataframe-melt"]], "polars.DataFrame.limit": [[153, "polars-dataframe-limit"]], "polars.DataFrame.sample": [[175, "polars-dataframe-sample"]], "polars.DataFrame.row": [[173, "polars-dataframe-row"]], "polars.DataFrame.join": [[150, "polars-dataframe-join"]], "polars.DataFrame.shape": [[178, "polars-dataframe-shape"]], "polars.DataFrame.sum": [[185, "polars-dataframe-sum"]], "polars.DataFrame.rows": [[174, "polars-dataframe-rows"]], "polars.DataFrame.groupby_dynamic": [[139, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.frame_equal": [[134, "polars-dataframe-frame-equal"]], "polars.DataFrame.groupby_rolling": [[140, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.to_struct": [[195, "polars-dataframe-to-struct"]], "polars.DataFrame.min": [[158, "polars-dataframe-min"]], "polars.DataFrame.pipe": [[164, "polars-dataframe-pipe"]], "polars.DataFrame.product": [[166, "polars-dataframe-product"]], "polars.DataFrame.shift_and_fill": [[180, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.get_column": [[135, "polars-dataframe-get-column"]], "polars.DataFrame.reverse": [[172, "polars-dataframe-reverse"]], "polars.DataFrame.groupby": [[138, "polars-dataframe-groupby"]], "polars.DataFrame.mean": [[155, "polars-dataframe-mean"]], "polars.DataFrame.partition_by": [[162, "polars-dataframe-partition-by"]], "polars.DataFrame.select": [[177, "polars-dataframe-select"]], "polars.DataFrame.head": [[142, "polars-dataframe-head"]], "polars.DataFrame.fold": [[133, "polars-dataframe-fold"]], "polars.DataFrame.is_unique": [[149, "polars-dataframe-is-unique"]], "polars.DataFrame.unique": [[197, "polars-dataframe-unique"]], "Pivot": [[239, "pivot"]], "polars.internals.dataframe.groupby.GroupBy.max": [[214, "polars-internals-dataframe-groupby-groupby-max"]], "polars.Expr.arr.concat": [[263, "polars-expr-arr-concat"]], "DataFrame": [[236, "dataframe"]], "polars.internals.dataframe.groupby.GroupBy.pivot": [[219, "polars-internals-dataframe-groupby-groupby-pivot"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[209, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.Expr.any": [[247, "polars-expr-any"]], "polars.Expr.arg_unique": [[259, "polars-expr-arg-unique"]], "polars.internals.dataframe.groupby.GroupBy.last": [[213, "polars-internals-dataframe-groupby-groupby-last"]], "polars.Expr.arctan": [[254, "polars-expr-arctan"]], "polars.Expr.all": [[246, "polars-expr-all"]], "polars.internals.dataframe.pivot.PivotOps.mean": [[227, "polars-internals-dataframe-pivot-pivotops-mean"]], "polars.DataFrame.width": [[203, "polars-dataframe-width"]], "polars.DataFrame.upsample": [[200, "polars-dataframe-upsample"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[221, "polars-internals-dataframe-groupby-groupby-sum"]], "Data types": [[240, "data-types"]], "Numeric": [[240, "numeric"]], "Date / Time": [[240, "date-time"]], "Nested": [[240, "nested"]], "Other": [[240, "other"]], "polars.Expr.append": [[248, "polars-expr-append"]], "polars.DataFrame.with_row_count": [[206, "polars-dataframe-with-row-count"]], "polars.internals.dataframe.pivot.PivotOps.first": [[224, "polars-internals-dataframe-pivot-pivotops-first"]], "polars.Expr.agg_groups": [[244, "polars-expr-agg-groups"]], "Exceptions": [[241, "exceptions"]], "polars.internals.dataframe.groupby.GroupBy.first": [[211, "polars-internals-dataframe-groupby-groupby-first"]], "polars.DataFrame.unstack": [[199, "polars-dataframe-unstack"]], "polars.DataFrame.vstack": [[202, "polars-dataframe-vstack"]], "polars.internals.dataframe.pivot.PivotOps.sum": [[230, "polars-internals-dataframe-pivot-pivotops-sum"]], "polars.Expr.arr.arg_max": [[261, "polars-expr-arr-arg-max"]], "polars.internals.dataframe.groupby.GroupBy.count": [[210, "polars-internals-dataframe-groupby-groupby-count"]], "polars.Expr.argsort": [[260, "polars-expr-argsort"]], "polars.DataFrame.with_columns": [[205, "polars-dataframe-with-columns"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[220, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[207, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.Expr.alias": [[245, "polars-expr-alias"]], "polars.Expr.arccosh": [[251, "polars-expr-arccosh"]], "polars.Expr.arg_min": [[257, "polars-expr-arg-min"]], "polars.internals.dataframe.pivot.PivotOps.max": [[226, "polars-internals-dataframe-pivot-pivotops-max"]], "polars.Expr.arg_max": [[256, "polars-expr-arg-max"]], "polars.Expr.arcsinh": [[253, "polars-expr-arcsinh"]], "polars.DataFrame.with_column": [[204, "polars-dataframe-with-column"]], "polars.internals.dataframe.pivot.PivotOps.count": [[223, "polars-internals-dataframe-pivot-pivotops-count"]], "polars.internals.dataframe.groupby.GroupBy.agg_list": [[208, "polars-internals-dataframe-groupby-groupby-agg-list"]], "polars.internals.dataframe.groupby.GroupBy.head": [[212, "polars-internals-dataframe-groupby-groupby-head"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[215, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.Expr.apply": [[249, "polars-expr-apply"]], "polars.Expr.arccos": [[250, "polars-expr-arccos"]], "polars.Expr.arcsin": [[252, "polars-expr-arcsin"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[222, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.Expr.arr.arg_min": [[262, "polars-expr-arr-arg-min"]], "polars.Expr.abs": [[243, "polars-expr-abs"]], "polars.Expr.arctanh": [[255, "polars-expr-arctanh"]], "polars.internals.dataframe.pivot.PivotOps.median": [[228, "polars-internals-dataframe-pivot-pivotops-median"]], "polars.DataFrame.var": [[201, "polars-dataframe-var"]], "polars.internals.dataframe.pivot.PivotOps.min": [[229, "polars-internals-dataframe-pivot-pivotops-min"]], "polars.internals.dataframe.pivot.PivotOps.last": [[225, "polars-internals-dataframe-pivot-pivotops-last"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[218, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.groupby.GroupBy.min": [[217, "polars-internals-dataframe-groupby-groupby-min"]], "polars.DataFrame.unnest": [[198, "polars-dataframe-unnest"]], "polars.internals.dataframe.groupby.GroupBy.median": [[216, "polars-internals-dataframe-groupby-groupby-median"]], "polars.Expr.arg_sort": [[258, "polars-expr-arg-sort"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_str_lengths() (polars.config class method)": [[9, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[10, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[11, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[12, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[13, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[14, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[15, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[19, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[20, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[21, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[22, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[23, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[24, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[25, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[26, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[27, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[28, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[29, "polars.DataType"]], "__init__() (polars.datatype method)": [[29, "polars.DataType.__init__"]], "date (class in polars)": [[30, "polars.Date"]], "__init__() (polars.date method)": [[30, "polars.Date.__init__"]], "datetime (class in polars)": [[31, "polars.Datetime"]], "__init__() (polars.datetime method)": [[31, "polars.Datetime.__init__"]], "duration (class in polars)": [[32, "polars.Duration"]], "__init__() (polars.duration method)": [[32, "polars.Duration.__init__"]], "float32 (class in polars)": [[33, "polars.Float32"]], "__init__() (polars.float32 method)": [[33, "polars.Float32.__init__"]], "float64 (class in polars)": [[34, "polars.Float64"]], "__init__() (polars.float64 method)": [[34, "polars.Float64.__init__"]], "int16 (class in polars)": [[35, "polars.Int16"]], "__init__() (polars.int16 method)": [[35, "polars.Int16.__init__"]], "int32 (class in polars)": [[36, "polars.Int32"]], "__init__() (polars.int32 method)": [[36, "polars.Int32.__init__"]], "int64 (class in polars)": [[37, "polars.Int64"]], "__init__() (polars.int64 method)": [[37, "polars.Int64.__init__"]], "int8 (class in polars)": [[38, "polars.Int8"]], "__init__() (polars.int8 method)": [[38, "polars.Int8.__init__"]], "list (class in polars)": [[39, "polars.List"]], "__init__() (polars.list method)": [[39, "polars.List.__init__"]], "null (class in polars)": [[40, "polars.Null"]], "__init__() (polars.null method)": [[40, "polars.Null.__init__"]], "object (class in polars)": [[41, "polars.Object"]], "__init__() (polars.object method)": [[41, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[42, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[43, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[44, "polars.SQLContext.register"]], "stringcache (class in polars)": [[45, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[45, "polars.StringCache.__init__"]], "struct (class in polars)": [[46, "polars.Struct"]], "__init__() (polars.struct method)": [[46, "polars.Struct.__init__"]], "time (class in polars)": [[47, "polars.Time"]], "__init__() (polars.time method)": [[47, "polars.Time.__init__"]], "uint16 (class in polars)": [[48, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[48, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[49, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[49, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[50, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[50, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[51, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[51, "polars.UInt8.__init__"]], "unknown (class in polars)": [[52, "polars.Unknown"]], "__init__() (polars.unknown method)": [[52, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[53, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[53, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[54, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[55, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[56, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[57, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[58, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[59, "polars.arg_where"]], "build_info() (in module polars)": [[60, "polars.build_info"]], "collect_all() (in module polars)": [[61, "polars.collect_all"]], "concat() (in module polars)": [[62, "polars.concat"]], "cut() (in module polars)": [[63, "polars.cut"]], "date_range() (in module polars)": [[64, "polars.date_range"]], "arrowerror": [[65, "polars.exceptions.ArrowError"]], "computeerror": [[66, "polars.exceptions.ComputeError"]], "duplicateerror": [[67, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[68, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[69, "polars.exceptions.NoDataError"]], "norowsreturned": [[70, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[71, "polars.exceptions.NotFoundError"]], "panicexception": [[72, "polars.exceptions.PanicException"]], "rowsexception": [[73, "polars.exceptions.RowsException"]], "schemaerror": [[74, "polars.exceptions.SchemaError"]], "shapeerror": [[75, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[76, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[77, "polars.from_arrow"]], "from_dict() (in module polars)": [[78, "polars.from_dict"]], "from_dicts() (in module polars)": [[79, "polars.from_dicts"]], "from_numpy() (in module polars)": [[80, "polars.from_numpy"]], "from_pandas() (in module polars)": [[81, "polars.from_pandas"]], "from_records() (in module polars)": [[82, "polars.from_records"]], "get_dummies() (in module polars)": [[83, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[84, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[85, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[86, "polars.ones"]], "read_avro() (in module polars)": [[87, "polars.read_avro"]], "read_csv() (in module polars)": [[88, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[89, "polars.read_csv_batched"]], "read_delta() (in module polars)": [[90, "polars.read_delta"]], "read_excel() (in module polars)": [[91, "polars.read_excel"]], "read_ipc() (in module polars)": [[92, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[93, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[94, "polars.read_json"]], "read_ndjson() (in module polars)": [[95, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[96, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[97, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[98, "polars.read_sql"]], "scan_csv() (in module polars)": [[99, "polars.scan_csv"]], "scan_delta() (in module polars)": [[100, "polars.scan_delta"]], "scan_ds() (in module polars)": [[101, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[102, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[103, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[104, "polars.scan_parquet"]], "show_versions() (in module polars)": [[105, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[106, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[107, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[108, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[108, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[109, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[110, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[111, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[112, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[113, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[114, "polars.zeros"]], "apply() (polars.dataframe method)": [[117, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[118, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[119, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[120, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[121, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[122, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[123, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[124, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[125, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[126, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[127, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[128, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[129, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[130, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[131, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[132, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[133, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[134, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[135, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[136, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[137, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[138, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[139, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[140, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[141, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[142, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[143, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[144, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[145, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[146, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[147, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[148, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[149, "polars.DataFrame.is_unique"]], "join() (polars.dataframe method)": [[150, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[151, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[152, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[153, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[154, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[155, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[156, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[157, "polars.DataFrame.melt"]], "min() (polars.dataframe method)": [[158, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[159, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[160, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[161, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[162, "polars.DataFrame.partition_by"]], "pearson_corr() (polars.dataframe method)": [[163, "polars.DataFrame.pearson_corr"]], "pipe() (polars.dataframe method)": [[164, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[165, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[166, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[167, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[168, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[169, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[170, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[171, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[172, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[173, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[174, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[175, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[176, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[177, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[178, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[179, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[180, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[181, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[182, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[183, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[184, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[185, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[186, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[187, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[188, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[189, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[190, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[191, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[192, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[193, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[194, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[195, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[196, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[197, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[198, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[199, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[200, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[201, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[202, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[203, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[204, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[205, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[206, "polars.DataFrame.with_row_count"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[207, "polars.internals.dataframe.groupby.GroupBy.agg"]], "agg_list() (polars.internals.dataframe.groupby.groupby method)": [[208, "polars.internals.dataframe.groupby.GroupBy.agg_list"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[209, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[210, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[211, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[212, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[213, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[214, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[215, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[216, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "pivot() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.pivot"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.tail"]], "count() (polars.internals.dataframe.pivot.pivotops method)": [[223, "polars.internals.dataframe.pivot.PivotOps.count"]], "first() (polars.internals.dataframe.pivot.pivotops method)": [[224, "polars.internals.dataframe.pivot.PivotOps.first"]], "last() (polars.internals.dataframe.pivot.pivotops method)": [[225, "polars.internals.dataframe.pivot.PivotOps.last"]], "max() (polars.internals.dataframe.pivot.pivotops method)": [[226, "polars.internals.dataframe.pivot.PivotOps.max"]], "mean() (polars.internals.dataframe.pivot.pivotops method)": [[227, "polars.internals.dataframe.pivot.PivotOps.mean"]], "median() (polars.internals.dataframe.pivot.pivotops method)": [[228, "polars.internals.dataframe.pivot.PivotOps.median"]], "min() (polars.internals.dataframe.pivot.pivotops method)": [[229, "polars.internals.dataframe.pivot.PivotOps.min"]], "sum() (polars.internals.dataframe.pivot.pivotops method)": [[230, "polars.internals.dataframe.pivot.PivotOps.sum"]], "abs() (polars.expr method)": [[243, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[244, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[245, "polars.Expr.alias"]], "all() (polars.expr method)": [[246, "polars.Expr.all"]], "any() (polars.expr method)": [[247, "polars.Expr.any"]], "append() (polars.expr method)": [[248, "polars.Expr.append"]], "apply() (polars.expr method)": [[249, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[250, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[251, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[252, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[253, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[254, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[255, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[256, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[257, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[258, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[259, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[260, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[261, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[262, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[263, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[264, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[265, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[266, "polars.Expr.arr.eval"]], "first() (polars.expr.arr method)": [[267, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[268, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[269, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[270, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[271, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[272, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[273, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[274, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[275, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[276, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[277, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[278, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[279, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[280, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[281, "polars.Expr.arr.tail"]], "to_struct() (polars.expr.arr method)": [[282, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[283, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[284, "polars.Expr.backward_fill"]], "cast() (polars.expr method)": [[285, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[286, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[287, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[288, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[289, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[290, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[291, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[292, "polars.Expr.cosh"]], "count() (polars.expr method)": [[293, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[294, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[295, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[296, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[297, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[298, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[299, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[300, "polars.Expr.diff"]], "dot() (polars.expr method)": [[301, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[302, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[303, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[304, "polars.Expr.dt.cast_time_unit"]], "cast_time_zone() (polars.expr.dt method)": [[305, "polars.Expr.dt.cast_time_zone"]], "day() (polars.expr.dt method)": [[306, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[307, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[308, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[309, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[310, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[311, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[312, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[313, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[314, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[315, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[316, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[317, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[318, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[319, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[320, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[321, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[322, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[323, "polars.Expr.dt.quarter"]], "round() (polars.expr.dt method)": [[324, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[325, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[326, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[327, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[328, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[329, "polars.Expr.dt.truncate"]], "tz_localize() (polars.expr.dt method)": [[330, "polars.Expr.dt.tz_localize"]], "week() (polars.expr.dt method)": [[331, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[332, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[333, "polars.Expr.dt.with_time_unit"]], "with_time_zone() (polars.expr.dt method)": [[334, "polars.Expr.dt.with_time_zone"]], "year() (polars.expr.dt method)": [[335, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[336, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[337, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[338, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[339, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[340, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[341, "polars.Expr.exp"]], "explode() (polars.expr method)": [[342, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[343, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[344, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[345, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[346, "polars.Expr.filter"]], "first() (polars.expr method)": [[347, "polars.Expr.first"]], "flatten() (polars.expr method)": [[348, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[349, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[350, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[351, "polars.Expr.hash"]], "head() (polars.expr method)": [[352, "polars.Expr.head"]], "inspect() (polars.expr method)": [[353, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[354, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[355, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[356, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[357, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[358, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[359, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[360, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[361, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[362, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[363, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[364, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[365, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[366, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[367, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[368, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[369, "polars.Expr.last"]], "len() (polars.expr method)": [[370, "polars.Expr.len"]], "limit() (polars.expr method)": [[371, "polars.Expr.limit"]], "list() (polars.expr method)": [[372, "polars.Expr.list"]], "log() (polars.expr method)": [[373, "polars.Expr.log"]], "log10() (polars.expr method)": [[374, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[375, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[376, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[377, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[378, "polars.Expr.max"]], "mean() (polars.expr method)": [[379, "polars.Expr.mean"]], "median() (polars.expr method)": [[380, "polars.Expr.median"]], "output_name() (polars.expr.meta method)": [[381, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[382, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[383, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[384, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[385, "polars.Expr.min"]], "mode() (polars.expr method)": [[386, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[387, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[388, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[389, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[390, "polars.Expr.null_count"]], "over() (polars.expr method)": [[391, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[392, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[393, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[394, "polars.Expr.prefix"]], "product() (polars.expr method)": [[395, "polars.Expr.product"]], "quantile() (polars.expr method)": [[396, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[397, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[398, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[399, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[400, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[401, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[402, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[403, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[404, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[405, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[406, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[407, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[408, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[409, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[410, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[411, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[412, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[413, "polars.Expr.round"]], "sample() (polars.expr method)": [[414, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[415, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[416, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[417, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[418, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[419, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[420, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[421, "polars.Expr.sign"]], "sin() (polars.expr method)": [[422, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[423, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[424, "polars.Expr.skew"]], "slice() (polars.expr method)": [[425, "polars.Expr.slice"]], "sort() (polars.expr method)": [[426, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[427, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[428, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[429, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[430, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[431, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[432, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[433, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[434, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[435, "polars.Expr.str.ends_with"]], "extract() (polars.expr.str method)": [[436, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[437, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[438, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[439, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[440, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[441, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[442, "polars.Expr.str.n_chars"]], "replace() (polars.expr.str method)": [[443, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[444, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[445, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[446, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[447, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[448, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[449, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[450, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[451, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[452, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[453, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[454, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[455, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[456, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[457, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[458, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[459, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[460, "polars.Expr.sum"]], "tail() (polars.expr method)": [[461, "polars.Expr.tail"]], "take() (polars.expr method)": [[462, "polars.Expr.take"]], "take_every() (polars.expr method)": [[463, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[464, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[465, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[466, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[467, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[468, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[469, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[470, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[471, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[472, "polars.Expr.var"]], "where() (polars.expr method)": [[473, "polars.Expr.where"]], "all() (in module polars)": [[474, "polars.all"]], "any() (in module polars)": [[475, "polars.any"]], "apply() (in module polars)": [[476, "polars.apply"]], "arange() (in module polars)": [[477, "polars.arange"]], "argsort_by() (in module polars)": [[478, "polars.argsort_by"]], "avg() (in module polars)": [[479, "polars.avg"]], "coalesce() (in module polars)": [[480, "polars.coalesce"]], "col() (in module polars)": [[481, "polars.col"]], "concat_list() (in module polars)": [[482, "polars.concat_list"]], "concat_str() (in module polars)": [[483, "polars.concat_str"]], "count() (in module polars)": [[484, "polars.count"]], "cov() (in module polars)": [[485, "polars.cov"]], "cumfold() (in module polars)": [[486, "polars.cumfold"]], "cumreduce() (in module polars)": [[487, "polars.cumreduce"]], "cumsum() (in module polars)": [[488, "polars.cumsum"]], "date() (in module polars)": [[489, "polars.date"]], "datetime() (in module polars)": [[490, "polars.datetime"]], "duration() (in module polars)": [[491, "polars.duration"]], "element() (in module polars)": [[492, "polars.element"]], "exclude() (in module polars)": [[493, "polars.exclude"]], "first() (in module polars)": [[494, "polars.first"]], "fold() (in module polars)": [[495, "polars.fold"]], "format() (in module polars)": [[496, "polars.format"]], "groups() (in module polars)": [[497, "polars.groups"]], "head() (in module polars)": [[498, "polars.head"]], "list() (in module polars)": [[499, "polars.list"]], "lit() (in module polars)": [[500, "polars.lit"]], "map() (in module polars)": [[501, "polars.map"]], "max() (in module polars)": [[502, "polars.max"]], "mean() (in module polars)": [[503, "polars.mean"]], "median() (in module polars)": [[504, "polars.median"]], "min() (in module polars)": [[505, "polars.min"]], "n_unique() (in module polars)": [[506, "polars.n_unique"]], "pearson_corr() (in module polars)": [[507, "polars.pearson_corr"]], "quantile() (in module polars)": [[508, "polars.quantile"]], "reduce() (in module polars)": [[509, "polars.reduce"]], "repeat() (in module polars)": [[510, "polars.repeat"]], "select() (in module polars)": [[511, "polars.select"]], "spearman_rank_corr() (in module polars)": [[512, "polars.spearman_rank_corr"]], "std() (in module polars)": [[513, "polars.std"]], "struct() (in module polars)": [[514, "polars.struct"]], "sum() (in module polars)": [[515, "polars.sum"]], "tail() (in module polars)": [[516, "polars.tail"]], "var() (in module polars)": [[517, "polars.var"]], "when() (in module polars)": [[518, "polars.when"]], "cache() (polars.lazyframe method)": [[537, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[538, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[539, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[540, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[541, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[542, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[543, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[544, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[545, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[546, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[547, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[548, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[549, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[550, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[551, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[552, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[553, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[554, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[555, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[556, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[557, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[558, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[559, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[560, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[561, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[562, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[563, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[564, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[565, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[566, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[567, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[568, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[569, "polars.LazyFrame.melt"]], "min() (polars.lazyframe method)": [[570, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[571, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[572, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[573, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[574, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[575, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[576, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[577, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[578, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[579, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[580, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[581, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[582, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[583, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[584, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[585, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[586, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[587, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[588, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[589, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[590, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[591, "polars.LazyFrame.width"]], "with_column() (polars.lazyframe method)": [[592, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[593, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[594, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[595, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[596, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[597, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[598, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[599, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[600, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[608, "polars.Series.abs"]], "alias() (polars.series method)": [[609, "polars.Series.alias"]], "all() (polars.series method)": [[610, "polars.Series.all"]], "any() (polars.series method)": [[611, "polars.Series.any"]], "append() (polars.series method)": [[612, "polars.Series.append"]], "apply() (polars.series method)": [[613, "polars.Series.apply"]], "arccos() (polars.series method)": [[614, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[615, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[616, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[617, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[618, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[619, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[620, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[621, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[622, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[623, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[624, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[625, "polars.Series.argsort"]], "arr (polars.series attribute)": [[626, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[627, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[628, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[629, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[630, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[631, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[632, "polars.Series.arr.eval"]], "first() (polars.series.arr method)": [[633, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[634, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[635, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[636, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[637, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[638, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[639, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[640, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[641, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[642, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[643, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[644, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[645, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[646, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[647, "polars.Series.arr.tail"]], "to_struct() (polars.series.arr method)": [[648, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[649, "polars.Series.arr.unique"]], "cast() (polars.series method)": [[650, "polars.Series.cast"]], "cat (polars.series attribute)": [[651, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[652, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[653, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[654, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[655, "polars.Series.cleared"]], "clip() (polars.series method)": [[656, "polars.Series.clip"]], "clip_max() (polars.series method)": [[657, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[658, "polars.Series.clip_min"]], "clone() (polars.series method)": [[659, "polars.Series.clone"]], "cos() (polars.series method)": [[660, "polars.Series.cos"]], "cosh() (polars.series method)": [[661, "polars.Series.cosh"]], "cummax() (polars.series method)": [[662, "polars.Series.cummax"]], "cummin() (polars.series method)": [[663, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[664, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[665, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[666, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[667, "polars.Series.describe"]], "diff() (polars.series method)": [[668, "polars.Series.diff"]], "dot() (polars.series method)": [[669, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[670, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[671, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[672, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[673, "polars.Series.dt.cast_time_unit"]], "cast_time_zone() (polars.series.dt method)": [[674, "polars.Series.dt.cast_time_zone"]], "day() (polars.series.dt method)": [[675, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[676, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[677, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[678, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[679, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[680, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[681, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[682, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[683, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[684, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[685, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[686, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[687, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[688, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[689, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[690, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[691, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[692, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[693, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[694, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[695, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[696, "polars.Series.dt.quarter"]], "round() (polars.series.dt method)": [[697, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[698, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[699, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[700, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[701, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[702, "polars.Series.dt.truncate"]], "tz_localize() (polars.series.dt method)": [[703, "polars.Series.dt.tz_localize"]], "week() (polars.series.dt method)": [[704, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[705, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[706, "polars.Series.dt.with_time_unit"]], "with_time_zone() (polars.series.dt method)": [[707, "polars.Series.dt.with_time_zone"]], "year() (polars.series.dt method)": [[708, "polars.Series.dt.year"]], "dtype (polars.series property)": [[709, "polars.Series.dtype"]], "entropy() (polars.series method)": [[710, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[711, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[712, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[713, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[714, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[715, "polars.Series.exp"]], "explode() (polars.series method)": [[716, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[717, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[718, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[719, "polars.Series.fill_null"]], "filter() (polars.series method)": [[720, "polars.Series.filter"]], "flags (polars.series property)": [[721, "polars.Series.flags"]], "floor() (polars.series method)": [[722, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[723, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[724, "polars.Series.has_validity"]], "hash() (polars.series method)": [[725, "polars.Series.hash"]], "head() (polars.series method)": [[726, "polars.Series.head"]], "inner_dtype (polars.series property)": [[727, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[728, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[729, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[730, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[731, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[732, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[733, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[734, "polars.Series.is_first"]], "is_float() (polars.series method)": [[735, "polars.Series.is_float"]], "is_in() (polars.series method)": [[736, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[737, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[738, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[739, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[740, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[741, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[742, "polars.Series.is_numeric"]], "is_unique() (polars.series method)": [[743, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[744, "polars.Series.is_utf8"]], "kurtosis() (polars.series method)": [[745, "polars.Series.kurtosis"]], "len() (polars.series method)": [[746, "polars.Series.len"]], "limit() (polars.series method)": [[747, "polars.Series.limit"]], "log() (polars.series method)": [[748, "polars.Series.log"]], "log10() (polars.series method)": [[749, "polars.Series.log10"]], "max() (polars.series method)": [[750, "polars.Series.max"]], "mean() (polars.series method)": [[751, "polars.Series.mean"]], "median() (polars.series method)": [[752, "polars.Series.median"]], "min() (polars.series method)": [[753, "polars.Series.min"]], "mode() (polars.series method)": [[754, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[755, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[756, "polars.Series.n_unique"]], "name (polars.series property)": [[757, "polars.Series.name"]], "nan_max() (polars.series method)": [[758, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[759, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[760, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[761, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[762, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[763, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[764, "polars.Series.peak_min"]], "product() (polars.series method)": [[765, "polars.Series.product"]], "quantile() (polars.series method)": [[766, "polars.Series.quantile"]], "rank() (polars.series method)": [[767, "polars.Series.rank"]], "rechunk() (polars.series method)": [[768, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[769, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[770, "polars.Series.rename"]], "reshape() (polars.series method)": [[771, "polars.Series.reshape"]], "reverse() (polars.series method)": [[772, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[773, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[774, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[775, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[776, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[777, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[778, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[779, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[780, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[781, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[782, "polars.Series.rolling_var"]], "round() (polars.series method)": [[783, "polars.Series.round"]], "sample() (polars.series method)": [[784, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[785, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[786, "polars.Series.series_equal"]], "set() (polars.series method)": [[787, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[788, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[789, "polars.Series.set_sorted"]], "shape (polars.series property)": [[790, "polars.Series.shape"]], "shift() (polars.series method)": [[791, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[792, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[793, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[794, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[795, "polars.Series.shuffle"]], "sign() (polars.series method)": [[796, "polars.Series.sign"]], "sin() (polars.series method)": [[797, "polars.Series.sin"]], "sinh() (polars.series method)": [[798, "polars.Series.sinh"]], "skew() (polars.series method)": [[799, "polars.Series.skew"]], "slice() (polars.series method)": [[800, "polars.Series.slice"]], "sort() (polars.series method)": [[801, "polars.Series.sort"]], "sqrt() (polars.series method)": [[802, "polars.Series.sqrt"]], "std() (polars.series method)": [[803, "polars.Series.std"]], "str (polars.series attribute)": [[804, "polars.Series.str"]], "concat() (polars.series.str method)": [[805, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[806, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[807, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[808, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[809, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[810, "polars.Series.str.ends_with"]], "extract() (polars.series.str method)": [[811, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[812, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[813, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[814, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[815, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[816, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[817, "polars.Series.str.n_chars"]], "replace() (polars.series.str method)": [[818, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[819, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[820, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[821, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[822, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[823, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[824, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[825, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[826, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[827, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[828, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[829, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[830, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[831, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[832, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[833, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[834, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[835, "polars.Series.struct.to_frame"]], "sum() (polars.series method)": [[836, "polars.Series.sum"]], "tail() (polars.series method)": [[837, "polars.Series.tail"]], "take() (polars.series method)": [[838, "polars.Series.take"]], "take_every() (polars.series method)": [[839, "polars.Series.take_every"]], "tan() (polars.series method)": [[840, "polars.Series.tan"]], "tanh() (polars.series method)": [[841, "polars.Series.tanh"]], "time_unit (polars.series property)": [[842, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[843, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[844, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[845, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[846, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[847, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[848, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[849, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[850, "polars.Series.top_k"]], "unique() (polars.series method)": [[851, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[852, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[853, "polars.Series.value_counts"]], "var() (polars.series method)": [[854, "polars.Series.var"]], "view() (polars.series method)": [[855, "polars.Series.view"]], "zip_with() (polars.series method)": [[856, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[870, "polars.SQLContext"]]}})